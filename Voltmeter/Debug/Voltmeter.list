
Voltmeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e44  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004f04  08004f04  00014f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f40  08004f40  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004f40  08004f40  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f40  08004f40  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f40  08004f40  00014f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f44  08004f44  00014f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000014  08004f5c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004f5c  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a788  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022a9  00000000  00000000  0002a807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  0002cab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000895  00000000  00000000  0002d5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010443  00000000  00000000  0002de7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f4b7  00000000  00000000  0003e2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005f444  00000000  00000000  0004d777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028b8  00000000  00000000  000acbbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000af474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004eec 	.word	0x08004eec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08004eec 	.word	0x08004eec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f8b7 	bl	800039c <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f843 	bl	80002c4 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f8a9 	bl	800039c <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f89f 	bl	800039c <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f84f 	bl	8000310 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f845 	bl	8000310 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	; 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fbab 	bl	8000a00 <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	; 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 fa05 	bl	80006c0 <__aeabi_fsub>
 80002b6:	f000 fba3 	bl	8000a00 <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__eqsf2>:
 80002c4:	b570      	push	{r4, r5, r6, lr}
 80002c6:	0042      	lsls	r2, r0, #1
 80002c8:	0245      	lsls	r5, r0, #9
 80002ca:	024e      	lsls	r6, r1, #9
 80002cc:	004c      	lsls	r4, r1, #1
 80002ce:	0fc3      	lsrs	r3, r0, #31
 80002d0:	0a6d      	lsrs	r5, r5, #9
 80002d2:	2001      	movs	r0, #1
 80002d4:	0e12      	lsrs	r2, r2, #24
 80002d6:	0a76      	lsrs	r6, r6, #9
 80002d8:	0e24      	lsrs	r4, r4, #24
 80002da:	0fc9      	lsrs	r1, r1, #31
 80002dc:	2aff      	cmp	r2, #255	; 0xff
 80002de:	d006      	beq.n	80002ee <__eqsf2+0x2a>
 80002e0:	2cff      	cmp	r4, #255	; 0xff
 80002e2:	d003      	beq.n	80002ec <__eqsf2+0x28>
 80002e4:	42a2      	cmp	r2, r4
 80002e6:	d101      	bne.n	80002ec <__eqsf2+0x28>
 80002e8:	42b5      	cmp	r5, r6
 80002ea:	d006      	beq.n	80002fa <__eqsf2+0x36>
 80002ec:	bd70      	pop	{r4, r5, r6, pc}
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d1fc      	bne.n	80002ec <__eqsf2+0x28>
 80002f2:	2cff      	cmp	r4, #255	; 0xff
 80002f4:	d1fa      	bne.n	80002ec <__eqsf2+0x28>
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d1f8      	bne.n	80002ec <__eqsf2+0x28>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d006      	beq.n	800030c <__eqsf2+0x48>
 80002fe:	2001      	movs	r0, #1
 8000300:	2a00      	cmp	r2, #0
 8000302:	d1f3      	bne.n	80002ec <__eqsf2+0x28>
 8000304:	0028      	movs	r0, r5
 8000306:	1e43      	subs	r3, r0, #1
 8000308:	4198      	sbcs	r0, r3
 800030a:	e7ef      	b.n	80002ec <__eqsf2+0x28>
 800030c:	2000      	movs	r0, #0
 800030e:	e7ed      	b.n	80002ec <__eqsf2+0x28>

08000310 <__gesf2>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	0042      	lsls	r2, r0, #1
 8000314:	0245      	lsls	r5, r0, #9
 8000316:	024e      	lsls	r6, r1, #9
 8000318:	004c      	lsls	r4, r1, #1
 800031a:	0fc3      	lsrs	r3, r0, #31
 800031c:	0a6d      	lsrs	r5, r5, #9
 800031e:	0e12      	lsrs	r2, r2, #24
 8000320:	0a76      	lsrs	r6, r6, #9
 8000322:	0e24      	lsrs	r4, r4, #24
 8000324:	0fc8      	lsrs	r0, r1, #31
 8000326:	2aff      	cmp	r2, #255	; 0xff
 8000328:	d01b      	beq.n	8000362 <__gesf2+0x52>
 800032a:	2cff      	cmp	r4, #255	; 0xff
 800032c:	d00e      	beq.n	800034c <__gesf2+0x3c>
 800032e:	2a00      	cmp	r2, #0
 8000330:	d11b      	bne.n	800036a <__gesf2+0x5a>
 8000332:	2c00      	cmp	r4, #0
 8000334:	d101      	bne.n	800033a <__gesf2+0x2a>
 8000336:	2e00      	cmp	r6, #0
 8000338:	d01c      	beq.n	8000374 <__gesf2+0x64>
 800033a:	2d00      	cmp	r5, #0
 800033c:	d00c      	beq.n	8000358 <__gesf2+0x48>
 800033e:	4283      	cmp	r3, r0
 8000340:	d01c      	beq.n	800037c <__gesf2+0x6c>
 8000342:	2102      	movs	r1, #2
 8000344:	1e58      	subs	r0, r3, #1
 8000346:	4008      	ands	r0, r1
 8000348:	3801      	subs	r0, #1
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	2e00      	cmp	r6, #0
 800034e:	d122      	bne.n	8000396 <__gesf2+0x86>
 8000350:	2a00      	cmp	r2, #0
 8000352:	d1f4      	bne.n	800033e <__gesf2+0x2e>
 8000354:	2d00      	cmp	r5, #0
 8000356:	d1f2      	bne.n	800033e <__gesf2+0x2e>
 8000358:	2800      	cmp	r0, #0
 800035a:	d1f6      	bne.n	800034a <__gesf2+0x3a>
 800035c:	2001      	movs	r0, #1
 800035e:	4240      	negs	r0, r0
 8000360:	e7f3      	b.n	800034a <__gesf2+0x3a>
 8000362:	2d00      	cmp	r5, #0
 8000364:	d117      	bne.n	8000396 <__gesf2+0x86>
 8000366:	2cff      	cmp	r4, #255	; 0xff
 8000368:	d0f0      	beq.n	800034c <__gesf2+0x3c>
 800036a:	2c00      	cmp	r4, #0
 800036c:	d1e7      	bne.n	800033e <__gesf2+0x2e>
 800036e:	2e00      	cmp	r6, #0
 8000370:	d1e5      	bne.n	800033e <__gesf2+0x2e>
 8000372:	e7e6      	b.n	8000342 <__gesf2+0x32>
 8000374:	2000      	movs	r0, #0
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e7      	beq.n	800034a <__gesf2+0x3a>
 800037a:	e7e2      	b.n	8000342 <__gesf2+0x32>
 800037c:	42a2      	cmp	r2, r4
 800037e:	dc05      	bgt.n	800038c <__gesf2+0x7c>
 8000380:	dbea      	blt.n	8000358 <__gesf2+0x48>
 8000382:	42b5      	cmp	r5, r6
 8000384:	d802      	bhi.n	800038c <__gesf2+0x7c>
 8000386:	d3e7      	bcc.n	8000358 <__gesf2+0x48>
 8000388:	2000      	movs	r0, #0
 800038a:	e7de      	b.n	800034a <__gesf2+0x3a>
 800038c:	4243      	negs	r3, r0
 800038e:	4158      	adcs	r0, r3
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	3801      	subs	r0, #1
 8000394:	e7d9      	b.n	800034a <__gesf2+0x3a>
 8000396:	2002      	movs	r0, #2
 8000398:	4240      	negs	r0, r0
 800039a:	e7d6      	b.n	800034a <__gesf2+0x3a>

0800039c <__lesf2>:
 800039c:	b570      	push	{r4, r5, r6, lr}
 800039e:	0042      	lsls	r2, r0, #1
 80003a0:	0245      	lsls	r5, r0, #9
 80003a2:	024e      	lsls	r6, r1, #9
 80003a4:	004c      	lsls	r4, r1, #1
 80003a6:	0fc3      	lsrs	r3, r0, #31
 80003a8:	0a6d      	lsrs	r5, r5, #9
 80003aa:	0e12      	lsrs	r2, r2, #24
 80003ac:	0a76      	lsrs	r6, r6, #9
 80003ae:	0e24      	lsrs	r4, r4, #24
 80003b0:	0fc8      	lsrs	r0, r1, #31
 80003b2:	2aff      	cmp	r2, #255	; 0xff
 80003b4:	d00b      	beq.n	80003ce <__lesf2+0x32>
 80003b6:	2cff      	cmp	r4, #255	; 0xff
 80003b8:	d00d      	beq.n	80003d6 <__lesf2+0x3a>
 80003ba:	2a00      	cmp	r2, #0
 80003bc:	d11f      	bne.n	80003fe <__lesf2+0x62>
 80003be:	2c00      	cmp	r4, #0
 80003c0:	d116      	bne.n	80003f0 <__lesf2+0x54>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d114      	bne.n	80003f0 <__lesf2+0x54>
 80003c6:	2000      	movs	r0, #0
 80003c8:	2d00      	cmp	r5, #0
 80003ca:	d010      	beq.n	80003ee <__lesf2+0x52>
 80003cc:	e009      	b.n	80003e2 <__lesf2+0x46>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d10c      	bne.n	80003ec <__lesf2+0x50>
 80003d2:	2cff      	cmp	r4, #255	; 0xff
 80003d4:	d113      	bne.n	80003fe <__lesf2+0x62>
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d108      	bne.n	80003ec <__lesf2+0x50>
 80003da:	2a00      	cmp	r2, #0
 80003dc:	d008      	beq.n	80003f0 <__lesf2+0x54>
 80003de:	4283      	cmp	r3, r0
 80003e0:	d012      	beq.n	8000408 <__lesf2+0x6c>
 80003e2:	2102      	movs	r1, #2
 80003e4:	1e58      	subs	r0, r3, #1
 80003e6:	4008      	ands	r0, r1
 80003e8:	3801      	subs	r0, #1
 80003ea:	e000      	b.n	80003ee <__lesf2+0x52>
 80003ec:	2002      	movs	r0, #2
 80003ee:	bd70      	pop	{r4, r5, r6, pc}
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d1f4      	bne.n	80003de <__lesf2+0x42>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	d1fa      	bne.n	80003ee <__lesf2+0x52>
 80003f8:	2001      	movs	r0, #1
 80003fa:	4240      	negs	r0, r0
 80003fc:	e7f7      	b.n	80003ee <__lesf2+0x52>
 80003fe:	2c00      	cmp	r4, #0
 8000400:	d1ed      	bne.n	80003de <__lesf2+0x42>
 8000402:	2e00      	cmp	r6, #0
 8000404:	d1eb      	bne.n	80003de <__lesf2+0x42>
 8000406:	e7ec      	b.n	80003e2 <__lesf2+0x46>
 8000408:	42a2      	cmp	r2, r4
 800040a:	dc05      	bgt.n	8000418 <__lesf2+0x7c>
 800040c:	dbf2      	blt.n	80003f4 <__lesf2+0x58>
 800040e:	42b5      	cmp	r5, r6
 8000410:	d802      	bhi.n	8000418 <__lesf2+0x7c>
 8000412:	d3ef      	bcc.n	80003f4 <__lesf2+0x58>
 8000414:	2000      	movs	r0, #0
 8000416:	e7ea      	b.n	80003ee <__lesf2+0x52>
 8000418:	4243      	negs	r3, r0
 800041a:	4158      	adcs	r0, r3
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	3801      	subs	r0, #1
 8000420:	e7e5      	b.n	80003ee <__lesf2+0x52>
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_fmul>:
 8000424:	0243      	lsls	r3, r0, #9
 8000426:	0a5b      	lsrs	r3, r3, #9
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	464f      	mov	r7, r9
 800042c:	4646      	mov	r6, r8
 800042e:	4699      	mov	r9, r3
 8000430:	46d6      	mov	lr, sl
 8000432:	0fc3      	lsrs	r3, r0, #31
 8000434:	0045      	lsls	r5, r0, #1
 8000436:	4698      	mov	r8, r3
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	464b      	mov	r3, r9
 800043c:	1c0f      	adds	r7, r1, #0
 800043e:	0e2d      	lsrs	r5, r5, #24
 8000440:	d100      	bne.n	8000444 <__aeabi_fmul+0x20>
 8000442:	e0cb      	b.n	80005dc <__aeabi_fmul+0x1b8>
 8000444:	2dff      	cmp	r5, #255	; 0xff
 8000446:	d100      	bne.n	800044a <__aeabi_fmul+0x26>
 8000448:	e0cf      	b.n	80005ea <__aeabi_fmul+0x1c6>
 800044a:	2280      	movs	r2, #128	; 0x80
 800044c:	00db      	lsls	r3, r3, #3
 800044e:	04d2      	lsls	r2, r2, #19
 8000450:	431a      	orrs	r2, r3
 8000452:	2300      	movs	r3, #0
 8000454:	4691      	mov	r9, r2
 8000456:	2600      	movs	r6, #0
 8000458:	469a      	mov	sl, r3
 800045a:	3d7f      	subs	r5, #127	; 0x7f
 800045c:	027c      	lsls	r4, r7, #9
 800045e:	007b      	lsls	r3, r7, #1
 8000460:	0a64      	lsrs	r4, r4, #9
 8000462:	0e1b      	lsrs	r3, r3, #24
 8000464:	0fff      	lsrs	r7, r7, #31
 8000466:	2b00      	cmp	r3, #0
 8000468:	d100      	bne.n	800046c <__aeabi_fmul+0x48>
 800046a:	e0a9      	b.n	80005c0 <__aeabi_fmul+0x19c>
 800046c:	2bff      	cmp	r3, #255	; 0xff
 800046e:	d011      	beq.n	8000494 <__aeabi_fmul+0x70>
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	00e4      	lsls	r4, r4, #3
 8000474:	04d2      	lsls	r2, r2, #19
 8000476:	4314      	orrs	r4, r2
 8000478:	4642      	mov	r2, r8
 800047a:	3b7f      	subs	r3, #127	; 0x7f
 800047c:	195b      	adds	r3, r3, r5
 800047e:	407a      	eors	r2, r7
 8000480:	2000      	movs	r0, #0
 8000482:	b2d2      	uxtb	r2, r2
 8000484:	1c5d      	adds	r5, r3, #1
 8000486:	2e0a      	cmp	r6, #10
 8000488:	dd13      	ble.n	80004b2 <__aeabi_fmul+0x8e>
 800048a:	003a      	movs	r2, r7
 800048c:	2e0b      	cmp	r6, #11
 800048e:	d047      	beq.n	8000520 <__aeabi_fmul+0xfc>
 8000490:	4647      	mov	r7, r8
 8000492:	e03f      	b.n	8000514 <__aeabi_fmul+0xf0>
 8000494:	002b      	movs	r3, r5
 8000496:	33ff      	adds	r3, #255	; 0xff
 8000498:	2c00      	cmp	r4, #0
 800049a:	d11e      	bne.n	80004da <__aeabi_fmul+0xb6>
 800049c:	2202      	movs	r2, #2
 800049e:	4316      	orrs	r6, r2
 80004a0:	4642      	mov	r2, r8
 80004a2:	3501      	adds	r5, #1
 80004a4:	407a      	eors	r2, r7
 80004a6:	b2d2      	uxtb	r2, r2
 80004a8:	35ff      	adds	r5, #255	; 0xff
 80004aa:	2e0a      	cmp	r6, #10
 80004ac:	dd00      	ble.n	80004b0 <__aeabi_fmul+0x8c>
 80004ae:	e0e4      	b.n	800067a <__aeabi_fmul+0x256>
 80004b0:	2002      	movs	r0, #2
 80004b2:	2e02      	cmp	r6, #2
 80004b4:	dc1c      	bgt.n	80004f0 <__aeabi_fmul+0xcc>
 80004b6:	3e01      	subs	r6, #1
 80004b8:	2e01      	cmp	r6, #1
 80004ba:	d842      	bhi.n	8000542 <__aeabi_fmul+0x11e>
 80004bc:	2802      	cmp	r0, #2
 80004be:	d03d      	beq.n	800053c <__aeabi_fmul+0x118>
 80004c0:	2801      	cmp	r0, #1
 80004c2:	d166      	bne.n	8000592 <__aeabi_fmul+0x16e>
 80004c4:	2000      	movs	r0, #0
 80004c6:	2100      	movs	r1, #0
 80004c8:	05c0      	lsls	r0, r0, #23
 80004ca:	4308      	orrs	r0, r1
 80004cc:	07d2      	lsls	r2, r2, #31
 80004ce:	4310      	orrs	r0, r2
 80004d0:	bce0      	pop	{r5, r6, r7}
 80004d2:	46ba      	mov	sl, r7
 80004d4:	46b1      	mov	r9, r6
 80004d6:	46a8      	mov	r8, r5
 80004d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004da:	2203      	movs	r2, #3
 80004dc:	4316      	orrs	r6, r2
 80004de:	4642      	mov	r2, r8
 80004e0:	3501      	adds	r5, #1
 80004e2:	407a      	eors	r2, r7
 80004e4:	b2d2      	uxtb	r2, r2
 80004e6:	35ff      	adds	r5, #255	; 0xff
 80004e8:	2e0a      	cmp	r6, #10
 80004ea:	dd00      	ble.n	80004ee <__aeabi_fmul+0xca>
 80004ec:	e0e4      	b.n	80006b8 <__aeabi_fmul+0x294>
 80004ee:	2003      	movs	r0, #3
 80004f0:	2101      	movs	r1, #1
 80004f2:	40b1      	lsls	r1, r6
 80004f4:	26a6      	movs	r6, #166	; 0xa6
 80004f6:	00f6      	lsls	r6, r6, #3
 80004f8:	4231      	tst	r1, r6
 80004fa:	d10a      	bne.n	8000512 <__aeabi_fmul+0xee>
 80004fc:	2690      	movs	r6, #144	; 0x90
 80004fe:	00b6      	lsls	r6, r6, #2
 8000500:	4231      	tst	r1, r6
 8000502:	d116      	bne.n	8000532 <__aeabi_fmul+0x10e>
 8000504:	3eb9      	subs	r6, #185	; 0xb9
 8000506:	3eff      	subs	r6, #255	; 0xff
 8000508:	420e      	tst	r6, r1
 800050a:	d01a      	beq.n	8000542 <__aeabi_fmul+0x11e>
 800050c:	46a1      	mov	r9, r4
 800050e:	4682      	mov	sl, r0
 8000510:	e000      	b.n	8000514 <__aeabi_fmul+0xf0>
 8000512:	0017      	movs	r7, r2
 8000514:	4653      	mov	r3, sl
 8000516:	003a      	movs	r2, r7
 8000518:	2b02      	cmp	r3, #2
 800051a:	d00f      	beq.n	800053c <__aeabi_fmul+0x118>
 800051c:	464c      	mov	r4, r9
 800051e:	4650      	mov	r0, sl
 8000520:	2803      	cmp	r0, #3
 8000522:	d1cd      	bne.n	80004c0 <__aeabi_fmul+0x9c>
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	03c9      	lsls	r1, r1, #15
 8000528:	4321      	orrs	r1, r4
 800052a:	0249      	lsls	r1, r1, #9
 800052c:	20ff      	movs	r0, #255	; 0xff
 800052e:	0a49      	lsrs	r1, r1, #9
 8000530:	e7ca      	b.n	80004c8 <__aeabi_fmul+0xa4>
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	2200      	movs	r2, #0
 8000536:	20ff      	movs	r0, #255	; 0xff
 8000538:	03c9      	lsls	r1, r1, #15
 800053a:	e7c5      	b.n	80004c8 <__aeabi_fmul+0xa4>
 800053c:	20ff      	movs	r0, #255	; 0xff
 800053e:	2100      	movs	r1, #0
 8000540:	e7c2      	b.n	80004c8 <__aeabi_fmul+0xa4>
 8000542:	0c20      	lsrs	r0, r4, #16
 8000544:	4649      	mov	r1, r9
 8000546:	0424      	lsls	r4, r4, #16
 8000548:	0c24      	lsrs	r4, r4, #16
 800054a:	0027      	movs	r7, r4
 800054c:	0c0e      	lsrs	r6, r1, #16
 800054e:	0409      	lsls	r1, r1, #16
 8000550:	0c09      	lsrs	r1, r1, #16
 8000552:	4374      	muls	r4, r6
 8000554:	434f      	muls	r7, r1
 8000556:	4346      	muls	r6, r0
 8000558:	4348      	muls	r0, r1
 800055a:	0c39      	lsrs	r1, r7, #16
 800055c:	1900      	adds	r0, r0, r4
 800055e:	1809      	adds	r1, r1, r0
 8000560:	428c      	cmp	r4, r1
 8000562:	d903      	bls.n	800056c <__aeabi_fmul+0x148>
 8000564:	2080      	movs	r0, #128	; 0x80
 8000566:	0240      	lsls	r0, r0, #9
 8000568:	4684      	mov	ip, r0
 800056a:	4466      	add	r6, ip
 800056c:	043f      	lsls	r7, r7, #16
 800056e:	0408      	lsls	r0, r1, #16
 8000570:	0c3f      	lsrs	r7, r7, #16
 8000572:	19c0      	adds	r0, r0, r7
 8000574:	0184      	lsls	r4, r0, #6
 8000576:	1e67      	subs	r7, r4, #1
 8000578:	41bc      	sbcs	r4, r7
 800057a:	0c09      	lsrs	r1, r1, #16
 800057c:	0e80      	lsrs	r0, r0, #26
 800057e:	1989      	adds	r1, r1, r6
 8000580:	4304      	orrs	r4, r0
 8000582:	0189      	lsls	r1, r1, #6
 8000584:	430c      	orrs	r4, r1
 8000586:	0109      	lsls	r1, r1, #4
 8000588:	d571      	bpl.n	800066e <__aeabi_fmul+0x24a>
 800058a:	2301      	movs	r3, #1
 800058c:	0861      	lsrs	r1, r4, #1
 800058e:	401c      	ands	r4, r3
 8000590:	430c      	orrs	r4, r1
 8000592:	002b      	movs	r3, r5
 8000594:	337f      	adds	r3, #127	; 0x7f
 8000596:	2b00      	cmp	r3, #0
 8000598:	dd51      	ble.n	800063e <__aeabi_fmul+0x21a>
 800059a:	0761      	lsls	r1, r4, #29
 800059c:	d004      	beq.n	80005a8 <__aeabi_fmul+0x184>
 800059e:	210f      	movs	r1, #15
 80005a0:	4021      	ands	r1, r4
 80005a2:	2904      	cmp	r1, #4
 80005a4:	d000      	beq.n	80005a8 <__aeabi_fmul+0x184>
 80005a6:	3404      	adds	r4, #4
 80005a8:	0121      	lsls	r1, r4, #4
 80005aa:	d503      	bpl.n	80005b4 <__aeabi_fmul+0x190>
 80005ac:	4b43      	ldr	r3, [pc, #268]	; (80006bc <__aeabi_fmul+0x298>)
 80005ae:	401c      	ands	r4, r3
 80005b0:	002b      	movs	r3, r5
 80005b2:	3380      	adds	r3, #128	; 0x80
 80005b4:	2bfe      	cmp	r3, #254	; 0xfe
 80005b6:	dcc1      	bgt.n	800053c <__aeabi_fmul+0x118>
 80005b8:	01a1      	lsls	r1, r4, #6
 80005ba:	0a49      	lsrs	r1, r1, #9
 80005bc:	b2d8      	uxtb	r0, r3
 80005be:	e783      	b.n	80004c8 <__aeabi_fmul+0xa4>
 80005c0:	2c00      	cmp	r4, #0
 80005c2:	d12c      	bne.n	800061e <__aeabi_fmul+0x1fa>
 80005c4:	2301      	movs	r3, #1
 80005c6:	4642      	mov	r2, r8
 80005c8:	431e      	orrs	r6, r3
 80005ca:	002b      	movs	r3, r5
 80005cc:	407a      	eors	r2, r7
 80005ce:	2001      	movs	r0, #1
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	1c5d      	adds	r5, r3, #1
 80005d4:	2e0a      	cmp	r6, #10
 80005d6:	dd00      	ble.n	80005da <__aeabi_fmul+0x1b6>
 80005d8:	e757      	b.n	800048a <__aeabi_fmul+0x66>
 80005da:	e76a      	b.n	80004b2 <__aeabi_fmul+0x8e>
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d110      	bne.n	8000602 <__aeabi_fmul+0x1de>
 80005e0:	2301      	movs	r3, #1
 80005e2:	2604      	movs	r6, #4
 80005e4:	2500      	movs	r5, #0
 80005e6:	469a      	mov	sl, r3
 80005e8:	e738      	b.n	800045c <__aeabi_fmul+0x38>
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fmul+0x1d4>
 80005ee:	2302      	movs	r3, #2
 80005f0:	2608      	movs	r6, #8
 80005f2:	25ff      	movs	r5, #255	; 0xff
 80005f4:	469a      	mov	sl, r3
 80005f6:	e731      	b.n	800045c <__aeabi_fmul+0x38>
 80005f8:	2303      	movs	r3, #3
 80005fa:	260c      	movs	r6, #12
 80005fc:	25ff      	movs	r5, #255	; 0xff
 80005fe:	469a      	mov	sl, r3
 8000600:	e72c      	b.n	800045c <__aeabi_fmul+0x38>
 8000602:	4648      	mov	r0, r9
 8000604:	f001 fcbe 	bl	8001f84 <__clzsi2>
 8000608:	464a      	mov	r2, r9
 800060a:	1f43      	subs	r3, r0, #5
 800060c:	2576      	movs	r5, #118	; 0x76
 800060e:	409a      	lsls	r2, r3
 8000610:	2300      	movs	r3, #0
 8000612:	426d      	negs	r5, r5
 8000614:	4691      	mov	r9, r2
 8000616:	2600      	movs	r6, #0
 8000618:	469a      	mov	sl, r3
 800061a:	1a2d      	subs	r5, r5, r0
 800061c:	e71e      	b.n	800045c <__aeabi_fmul+0x38>
 800061e:	0020      	movs	r0, r4
 8000620:	f001 fcb0 	bl	8001f84 <__clzsi2>
 8000624:	4642      	mov	r2, r8
 8000626:	1f43      	subs	r3, r0, #5
 8000628:	409c      	lsls	r4, r3
 800062a:	1a2b      	subs	r3, r5, r0
 800062c:	3b76      	subs	r3, #118	; 0x76
 800062e:	407a      	eors	r2, r7
 8000630:	2000      	movs	r0, #0
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	1c5d      	adds	r5, r3, #1
 8000636:	2e0a      	cmp	r6, #10
 8000638:	dd00      	ble.n	800063c <__aeabi_fmul+0x218>
 800063a:	e726      	b.n	800048a <__aeabi_fmul+0x66>
 800063c:	e739      	b.n	80004b2 <__aeabi_fmul+0x8e>
 800063e:	2101      	movs	r1, #1
 8000640:	1acb      	subs	r3, r1, r3
 8000642:	2b1b      	cmp	r3, #27
 8000644:	dd00      	ble.n	8000648 <__aeabi_fmul+0x224>
 8000646:	e73d      	b.n	80004c4 <__aeabi_fmul+0xa0>
 8000648:	359e      	adds	r5, #158	; 0x9e
 800064a:	0021      	movs	r1, r4
 800064c:	40ac      	lsls	r4, r5
 800064e:	40d9      	lsrs	r1, r3
 8000650:	1e63      	subs	r3, r4, #1
 8000652:	419c      	sbcs	r4, r3
 8000654:	4321      	orrs	r1, r4
 8000656:	074b      	lsls	r3, r1, #29
 8000658:	d004      	beq.n	8000664 <__aeabi_fmul+0x240>
 800065a:	230f      	movs	r3, #15
 800065c:	400b      	ands	r3, r1
 800065e:	2b04      	cmp	r3, #4
 8000660:	d000      	beq.n	8000664 <__aeabi_fmul+0x240>
 8000662:	3104      	adds	r1, #4
 8000664:	014b      	lsls	r3, r1, #5
 8000666:	d504      	bpl.n	8000672 <__aeabi_fmul+0x24e>
 8000668:	2001      	movs	r0, #1
 800066a:	2100      	movs	r1, #0
 800066c:	e72c      	b.n	80004c8 <__aeabi_fmul+0xa4>
 800066e:	001d      	movs	r5, r3
 8000670:	e78f      	b.n	8000592 <__aeabi_fmul+0x16e>
 8000672:	0189      	lsls	r1, r1, #6
 8000674:	2000      	movs	r0, #0
 8000676:	0a49      	lsrs	r1, r1, #9
 8000678:	e726      	b.n	80004c8 <__aeabi_fmul+0xa4>
 800067a:	2302      	movs	r3, #2
 800067c:	2e0f      	cmp	r6, #15
 800067e:	d10c      	bne.n	800069a <__aeabi_fmul+0x276>
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	464b      	mov	r3, r9
 8000684:	03c9      	lsls	r1, r1, #15
 8000686:	420b      	tst	r3, r1
 8000688:	d00d      	beq.n	80006a6 <__aeabi_fmul+0x282>
 800068a:	420c      	tst	r4, r1
 800068c:	d10b      	bne.n	80006a6 <__aeabi_fmul+0x282>
 800068e:	4321      	orrs	r1, r4
 8000690:	0249      	lsls	r1, r1, #9
 8000692:	003a      	movs	r2, r7
 8000694:	20ff      	movs	r0, #255	; 0xff
 8000696:	0a49      	lsrs	r1, r1, #9
 8000698:	e716      	b.n	80004c8 <__aeabi_fmul+0xa4>
 800069a:	2e0b      	cmp	r6, #11
 800069c:	d000      	beq.n	80006a0 <__aeabi_fmul+0x27c>
 800069e:	e6f7      	b.n	8000490 <__aeabi_fmul+0x6c>
 80006a0:	46a1      	mov	r9, r4
 80006a2:	469a      	mov	sl, r3
 80006a4:	e736      	b.n	8000514 <__aeabi_fmul+0xf0>
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	464b      	mov	r3, r9
 80006aa:	03c9      	lsls	r1, r1, #15
 80006ac:	4319      	orrs	r1, r3
 80006ae:	0249      	lsls	r1, r1, #9
 80006b0:	4642      	mov	r2, r8
 80006b2:	20ff      	movs	r0, #255	; 0xff
 80006b4:	0a49      	lsrs	r1, r1, #9
 80006b6:	e707      	b.n	80004c8 <__aeabi_fmul+0xa4>
 80006b8:	2303      	movs	r3, #3
 80006ba:	e7df      	b.n	800067c <__aeabi_fmul+0x258>
 80006bc:	f7ffffff 	.word	0xf7ffffff

080006c0 <__aeabi_fsub>:
 80006c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c2:	46c6      	mov	lr, r8
 80006c4:	0243      	lsls	r3, r0, #9
 80006c6:	0a5b      	lsrs	r3, r3, #9
 80006c8:	0045      	lsls	r5, r0, #1
 80006ca:	00da      	lsls	r2, r3, #3
 80006cc:	0fc4      	lsrs	r4, r0, #31
 80006ce:	0248      	lsls	r0, r1, #9
 80006d0:	004f      	lsls	r7, r1, #1
 80006d2:	4694      	mov	ip, r2
 80006d4:	0a42      	lsrs	r2, r0, #9
 80006d6:	001e      	movs	r6, r3
 80006d8:	4690      	mov	r8, r2
 80006da:	b500      	push	{lr}
 80006dc:	0e2d      	lsrs	r5, r5, #24
 80006de:	0e3f      	lsrs	r7, r7, #24
 80006e0:	0fc9      	lsrs	r1, r1, #31
 80006e2:	0980      	lsrs	r0, r0, #6
 80006e4:	2fff      	cmp	r7, #255	; 0xff
 80006e6:	d059      	beq.n	800079c <__aeabi_fsub+0xdc>
 80006e8:	2201      	movs	r2, #1
 80006ea:	4051      	eors	r1, r2
 80006ec:	428c      	cmp	r4, r1
 80006ee:	d039      	beq.n	8000764 <__aeabi_fsub+0xa4>
 80006f0:	1bea      	subs	r2, r5, r7
 80006f2:	2a00      	cmp	r2, #0
 80006f4:	dd58      	ble.n	80007a8 <__aeabi_fsub+0xe8>
 80006f6:	2f00      	cmp	r7, #0
 80006f8:	d068      	beq.n	80007cc <__aeabi_fsub+0x10c>
 80006fa:	2dff      	cmp	r5, #255	; 0xff
 80006fc:	d100      	bne.n	8000700 <__aeabi_fsub+0x40>
 80006fe:	e0d1      	b.n	80008a4 <__aeabi_fsub+0x1e4>
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	04db      	lsls	r3, r3, #19
 8000704:	4318      	orrs	r0, r3
 8000706:	2a1b      	cmp	r2, #27
 8000708:	dc00      	bgt.n	800070c <__aeabi_fsub+0x4c>
 800070a:	e0e3      	b.n	80008d4 <__aeabi_fsub+0x214>
 800070c:	2301      	movs	r3, #1
 800070e:	4662      	mov	r2, ip
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	015a      	lsls	r2, r3, #5
 8000714:	d400      	bmi.n	8000718 <__aeabi_fsub+0x58>
 8000716:	e0ac      	b.n	8000872 <__aeabi_fsub+0x1b2>
 8000718:	019b      	lsls	r3, r3, #6
 800071a:	099e      	lsrs	r6, r3, #6
 800071c:	0030      	movs	r0, r6
 800071e:	f001 fc31 	bl	8001f84 <__clzsi2>
 8000722:	0033      	movs	r3, r6
 8000724:	3805      	subs	r0, #5
 8000726:	4083      	lsls	r3, r0
 8000728:	4285      	cmp	r5, r0
 800072a:	dc00      	bgt.n	800072e <__aeabi_fsub+0x6e>
 800072c:	e0c6      	b.n	80008bc <__aeabi_fsub+0x1fc>
 800072e:	4ab2      	ldr	r2, [pc, #712]	; (80009f8 <__aeabi_fsub+0x338>)
 8000730:	1a2d      	subs	r5, r5, r0
 8000732:	4013      	ands	r3, r2
 8000734:	075a      	lsls	r2, r3, #29
 8000736:	d004      	beq.n	8000742 <__aeabi_fsub+0x82>
 8000738:	220f      	movs	r2, #15
 800073a:	401a      	ands	r2, r3
 800073c:	2a04      	cmp	r2, #4
 800073e:	d000      	beq.n	8000742 <__aeabi_fsub+0x82>
 8000740:	3304      	adds	r3, #4
 8000742:	015a      	lsls	r2, r3, #5
 8000744:	d400      	bmi.n	8000748 <__aeabi_fsub+0x88>
 8000746:	e097      	b.n	8000878 <__aeabi_fsub+0x1b8>
 8000748:	1c6a      	adds	r2, r5, #1
 800074a:	2dfe      	cmp	r5, #254	; 0xfe
 800074c:	d100      	bne.n	8000750 <__aeabi_fsub+0x90>
 800074e:	e084      	b.n	800085a <__aeabi_fsub+0x19a>
 8000750:	019b      	lsls	r3, r3, #6
 8000752:	0a5e      	lsrs	r6, r3, #9
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	05d0      	lsls	r0, r2, #23
 8000758:	4330      	orrs	r0, r6
 800075a:	07e4      	lsls	r4, r4, #31
 800075c:	4320      	orrs	r0, r4
 800075e:	bc80      	pop	{r7}
 8000760:	46b8      	mov	r8, r7
 8000762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000764:	1bea      	subs	r2, r5, r7
 8000766:	2a00      	cmp	r2, #0
 8000768:	dd41      	ble.n	80007ee <__aeabi_fsub+0x12e>
 800076a:	2f00      	cmp	r7, #0
 800076c:	d06b      	beq.n	8000846 <__aeabi_fsub+0x186>
 800076e:	2dff      	cmp	r5, #255	; 0xff
 8000770:	d100      	bne.n	8000774 <__aeabi_fsub+0xb4>
 8000772:	e097      	b.n	80008a4 <__aeabi_fsub+0x1e4>
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	04db      	lsls	r3, r3, #19
 8000778:	4318      	orrs	r0, r3
 800077a:	2a1b      	cmp	r2, #27
 800077c:	dc00      	bgt.n	8000780 <__aeabi_fsub+0xc0>
 800077e:	e0cc      	b.n	800091a <__aeabi_fsub+0x25a>
 8000780:	2301      	movs	r3, #1
 8000782:	4463      	add	r3, ip
 8000784:	015a      	lsls	r2, r3, #5
 8000786:	d574      	bpl.n	8000872 <__aeabi_fsub+0x1b2>
 8000788:	3501      	adds	r5, #1
 800078a:	2dff      	cmp	r5, #255	; 0xff
 800078c:	d065      	beq.n	800085a <__aeabi_fsub+0x19a>
 800078e:	2201      	movs	r2, #1
 8000790:	499a      	ldr	r1, [pc, #616]	; (80009fc <__aeabi_fsub+0x33c>)
 8000792:	401a      	ands	r2, r3
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	400b      	ands	r3, r1
 8000798:	4313      	orrs	r3, r2
 800079a:	e7cb      	b.n	8000734 <__aeabi_fsub+0x74>
 800079c:	2800      	cmp	r0, #0
 800079e:	d01f      	beq.n	80007e0 <__aeabi_fsub+0x120>
 80007a0:	428c      	cmp	r4, r1
 80007a2:	d022      	beq.n	80007ea <__aeabi_fsub+0x12a>
 80007a4:	002a      	movs	r2, r5
 80007a6:	3aff      	subs	r2, #255	; 0xff
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	d035      	beq.n	8000818 <__aeabi_fsub+0x158>
 80007ac:	1b7a      	subs	r2, r7, r5
 80007ae:	2d00      	cmp	r5, #0
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fsub+0xf4>
 80007b2:	e099      	b.n	80008e8 <__aeabi_fsub+0x228>
 80007b4:	4663      	mov	r3, ip
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_fsub+0xfc>
 80007ba:	e0dd      	b.n	8000978 <__aeabi_fsub+0x2b8>
 80007bc:	1e53      	subs	r3, r2, #1
 80007be:	2a01      	cmp	r2, #1
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fsub+0x104>
 80007c2:	e105      	b.n	80009d0 <__aeabi_fsub+0x310>
 80007c4:	2aff      	cmp	r2, #255	; 0xff
 80007c6:	d06b      	beq.n	80008a0 <__aeabi_fsub+0x1e0>
 80007c8:	001a      	movs	r2, r3
 80007ca:	e094      	b.n	80008f6 <__aeabi_fsub+0x236>
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d073      	beq.n	80008b8 <__aeabi_fsub+0x1f8>
 80007d0:	1e51      	subs	r1, r2, #1
 80007d2:	2a01      	cmp	r2, #1
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fsub+0x118>
 80007d6:	e0df      	b.n	8000998 <__aeabi_fsub+0x2d8>
 80007d8:	2aff      	cmp	r2, #255	; 0xff
 80007da:	d063      	beq.n	80008a4 <__aeabi_fsub+0x1e4>
 80007dc:	000a      	movs	r2, r1
 80007de:	e792      	b.n	8000706 <__aeabi_fsub+0x46>
 80007e0:	2201      	movs	r2, #1
 80007e2:	4051      	eors	r1, r2
 80007e4:	42a1      	cmp	r1, r4
 80007e6:	d000      	beq.n	80007ea <__aeabi_fsub+0x12a>
 80007e8:	e782      	b.n	80006f0 <__aeabi_fsub+0x30>
 80007ea:	002a      	movs	r2, r5
 80007ec:	3aff      	subs	r2, #255	; 0xff
 80007ee:	2a00      	cmp	r2, #0
 80007f0:	d036      	beq.n	8000860 <__aeabi_fsub+0x1a0>
 80007f2:	1b7a      	subs	r2, r7, r5
 80007f4:	2d00      	cmp	r5, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_fsub+0x13a>
 80007f8:	e0aa      	b.n	8000950 <__aeabi_fsub+0x290>
 80007fa:	2fff      	cmp	r7, #255	; 0xff
 80007fc:	d100      	bne.n	8000800 <__aeabi_fsub+0x140>
 80007fe:	e0da      	b.n	80009b6 <__aeabi_fsub+0x2f6>
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	4661      	mov	r1, ip
 8000804:	04db      	lsls	r3, r3, #19
 8000806:	4319      	orrs	r1, r3
 8000808:	468c      	mov	ip, r1
 800080a:	2a1b      	cmp	r2, #27
 800080c:	dc00      	bgt.n	8000810 <__aeabi_fsub+0x150>
 800080e:	e0d4      	b.n	80009ba <__aeabi_fsub+0x2fa>
 8000810:	2301      	movs	r3, #1
 8000812:	003d      	movs	r5, r7
 8000814:	181b      	adds	r3, r3, r0
 8000816:	e7b5      	b.n	8000784 <__aeabi_fsub+0xc4>
 8000818:	27fe      	movs	r7, #254	; 0xfe
 800081a:	1c6a      	adds	r2, r5, #1
 800081c:	4217      	tst	r7, r2
 800081e:	d171      	bne.n	8000904 <__aeabi_fsub+0x244>
 8000820:	2d00      	cmp	r5, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_fsub+0x166>
 8000824:	e09e      	b.n	8000964 <__aeabi_fsub+0x2a4>
 8000826:	4663      	mov	r3, ip
 8000828:	2b00      	cmp	r3, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fsub+0x16e>
 800082c:	e0d5      	b.n	80009da <__aeabi_fsub+0x31a>
 800082e:	2200      	movs	r2, #0
 8000830:	2800      	cmp	r0, #0
 8000832:	d100      	bne.n	8000836 <__aeabi_fsub+0x176>
 8000834:	e78f      	b.n	8000756 <__aeabi_fsub+0x96>
 8000836:	1a1b      	subs	r3, r3, r0
 8000838:	015e      	lsls	r6, r3, #5
 800083a:	d400      	bmi.n	800083e <__aeabi_fsub+0x17e>
 800083c:	e0d6      	b.n	80009ec <__aeabi_fsub+0x32c>
 800083e:	4663      	mov	r3, ip
 8000840:	000c      	movs	r4, r1
 8000842:	1ac3      	subs	r3, r0, r3
 8000844:	e776      	b.n	8000734 <__aeabi_fsub+0x74>
 8000846:	2800      	cmp	r0, #0
 8000848:	d036      	beq.n	80008b8 <__aeabi_fsub+0x1f8>
 800084a:	1e51      	subs	r1, r2, #1
 800084c:	2a01      	cmp	r2, #1
 800084e:	d100      	bne.n	8000852 <__aeabi_fsub+0x192>
 8000850:	e09a      	b.n	8000988 <__aeabi_fsub+0x2c8>
 8000852:	2aff      	cmp	r2, #255	; 0xff
 8000854:	d026      	beq.n	80008a4 <__aeabi_fsub+0x1e4>
 8000856:	000a      	movs	r2, r1
 8000858:	e78f      	b.n	800077a <__aeabi_fsub+0xba>
 800085a:	22ff      	movs	r2, #255	; 0xff
 800085c:	2600      	movs	r6, #0
 800085e:	e77a      	b.n	8000756 <__aeabi_fsub+0x96>
 8000860:	27fe      	movs	r7, #254	; 0xfe
 8000862:	1c6a      	adds	r2, r5, #1
 8000864:	4217      	tst	r7, r2
 8000866:	d062      	beq.n	800092e <__aeabi_fsub+0x26e>
 8000868:	2aff      	cmp	r2, #255	; 0xff
 800086a:	d0f6      	beq.n	800085a <__aeabi_fsub+0x19a>
 800086c:	0015      	movs	r5, r2
 800086e:	4460      	add	r0, ip
 8000870:	0843      	lsrs	r3, r0, #1
 8000872:	075a      	lsls	r2, r3, #29
 8000874:	d000      	beq.n	8000878 <__aeabi_fsub+0x1b8>
 8000876:	e75f      	b.n	8000738 <__aeabi_fsub+0x78>
 8000878:	08db      	lsrs	r3, r3, #3
 800087a:	2dff      	cmp	r5, #255	; 0xff
 800087c:	d012      	beq.n	80008a4 <__aeabi_fsub+0x1e4>
 800087e:	025b      	lsls	r3, r3, #9
 8000880:	0a5e      	lsrs	r6, r3, #9
 8000882:	b2ea      	uxtb	r2, r5
 8000884:	e767      	b.n	8000756 <__aeabi_fsub+0x96>
 8000886:	4662      	mov	r2, ip
 8000888:	2a00      	cmp	r2, #0
 800088a:	d100      	bne.n	800088e <__aeabi_fsub+0x1ce>
 800088c:	e093      	b.n	80009b6 <__aeabi_fsub+0x2f6>
 800088e:	2800      	cmp	r0, #0
 8000890:	d008      	beq.n	80008a4 <__aeabi_fsub+0x1e4>
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	03d2      	lsls	r2, r2, #15
 8000896:	4213      	tst	r3, r2
 8000898:	d004      	beq.n	80008a4 <__aeabi_fsub+0x1e4>
 800089a:	4640      	mov	r0, r8
 800089c:	4210      	tst	r0, r2
 800089e:	d101      	bne.n	80008a4 <__aeabi_fsub+0x1e4>
 80008a0:	000c      	movs	r4, r1
 80008a2:	4643      	mov	r3, r8
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0d8      	beq.n	800085a <__aeabi_fsub+0x19a>
 80008a8:	2680      	movs	r6, #128	; 0x80
 80008aa:	03f6      	lsls	r6, r6, #15
 80008ac:	431e      	orrs	r6, r3
 80008ae:	0276      	lsls	r6, r6, #9
 80008b0:	22ff      	movs	r2, #255	; 0xff
 80008b2:	0a76      	lsrs	r6, r6, #9
 80008b4:	e74f      	b.n	8000756 <__aeabi_fsub+0x96>
 80008b6:	4643      	mov	r3, r8
 80008b8:	0015      	movs	r5, r2
 80008ba:	e7de      	b.n	800087a <__aeabi_fsub+0x1ba>
 80008bc:	2220      	movs	r2, #32
 80008be:	1b40      	subs	r0, r0, r5
 80008c0:	3001      	adds	r0, #1
 80008c2:	1a12      	subs	r2, r2, r0
 80008c4:	0019      	movs	r1, r3
 80008c6:	4093      	lsls	r3, r2
 80008c8:	40c1      	lsrs	r1, r0
 80008ca:	1e5a      	subs	r2, r3, #1
 80008cc:	4193      	sbcs	r3, r2
 80008ce:	2500      	movs	r5, #0
 80008d0:	430b      	orrs	r3, r1
 80008d2:	e72f      	b.n	8000734 <__aeabi_fsub+0x74>
 80008d4:	2320      	movs	r3, #32
 80008d6:	1a9b      	subs	r3, r3, r2
 80008d8:	0001      	movs	r1, r0
 80008da:	4098      	lsls	r0, r3
 80008dc:	0003      	movs	r3, r0
 80008de:	40d1      	lsrs	r1, r2
 80008e0:	1e5a      	subs	r2, r3, #1
 80008e2:	4193      	sbcs	r3, r2
 80008e4:	430b      	orrs	r3, r1
 80008e6:	e712      	b.n	800070e <__aeabi_fsub+0x4e>
 80008e8:	2fff      	cmp	r7, #255	; 0xff
 80008ea:	d0d9      	beq.n	80008a0 <__aeabi_fsub+0x1e0>
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	4664      	mov	r4, ip
 80008f0:	04db      	lsls	r3, r3, #19
 80008f2:	431c      	orrs	r4, r3
 80008f4:	46a4      	mov	ip, r4
 80008f6:	2a1b      	cmp	r2, #27
 80008f8:	dd52      	ble.n	80009a0 <__aeabi_fsub+0x2e0>
 80008fa:	2301      	movs	r3, #1
 80008fc:	000c      	movs	r4, r1
 80008fe:	003d      	movs	r5, r7
 8000900:	1ac3      	subs	r3, r0, r3
 8000902:	e706      	b.n	8000712 <__aeabi_fsub+0x52>
 8000904:	4663      	mov	r3, ip
 8000906:	1a1e      	subs	r6, r3, r0
 8000908:	0173      	lsls	r3, r6, #5
 800090a:	d439      	bmi.n	8000980 <__aeabi_fsub+0x2c0>
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_fsub+0x252>
 8000910:	e704      	b.n	800071c <__aeabi_fsub+0x5c>
 8000912:	2400      	movs	r4, #0
 8000914:	2200      	movs	r2, #0
 8000916:	2600      	movs	r6, #0
 8000918:	e71d      	b.n	8000756 <__aeabi_fsub+0x96>
 800091a:	2320      	movs	r3, #32
 800091c:	1a9b      	subs	r3, r3, r2
 800091e:	0001      	movs	r1, r0
 8000920:	4098      	lsls	r0, r3
 8000922:	0003      	movs	r3, r0
 8000924:	40d1      	lsrs	r1, r2
 8000926:	1e5a      	subs	r2, r3, #1
 8000928:	4193      	sbcs	r3, r2
 800092a:	430b      	orrs	r3, r1
 800092c:	e729      	b.n	8000782 <__aeabi_fsub+0xc2>
 800092e:	2d00      	cmp	r5, #0
 8000930:	d1a9      	bne.n	8000886 <__aeabi_fsub+0x1c6>
 8000932:	4663      	mov	r3, ip
 8000934:	2b00      	cmp	r3, #0
 8000936:	d056      	beq.n	80009e6 <__aeabi_fsub+0x326>
 8000938:	2200      	movs	r2, #0
 800093a:	2800      	cmp	r0, #0
 800093c:	d100      	bne.n	8000940 <__aeabi_fsub+0x280>
 800093e:	e70a      	b.n	8000756 <__aeabi_fsub+0x96>
 8000940:	0003      	movs	r3, r0
 8000942:	4463      	add	r3, ip
 8000944:	015a      	lsls	r2, r3, #5
 8000946:	d594      	bpl.n	8000872 <__aeabi_fsub+0x1b2>
 8000948:	4a2b      	ldr	r2, [pc, #172]	; (80009f8 <__aeabi_fsub+0x338>)
 800094a:	3501      	adds	r5, #1
 800094c:	4013      	ands	r3, r2
 800094e:	e790      	b.n	8000872 <__aeabi_fsub+0x1b2>
 8000950:	4663      	mov	r3, ip
 8000952:	2b00      	cmp	r3, #0
 8000954:	d0af      	beq.n	80008b6 <__aeabi_fsub+0x1f6>
 8000956:	1e53      	subs	r3, r2, #1
 8000958:	2a01      	cmp	r2, #1
 800095a:	d015      	beq.n	8000988 <__aeabi_fsub+0x2c8>
 800095c:	2aff      	cmp	r2, #255	; 0xff
 800095e:	d02a      	beq.n	80009b6 <__aeabi_fsub+0x2f6>
 8000960:	001a      	movs	r2, r3
 8000962:	e752      	b.n	800080a <__aeabi_fsub+0x14a>
 8000964:	4662      	mov	r2, ip
 8000966:	2a00      	cmp	r2, #0
 8000968:	d191      	bne.n	800088e <__aeabi_fsub+0x1ce>
 800096a:	2800      	cmp	r0, #0
 800096c:	d198      	bne.n	80008a0 <__aeabi_fsub+0x1e0>
 800096e:	2680      	movs	r6, #128	; 0x80
 8000970:	2400      	movs	r4, #0
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	03f6      	lsls	r6, r6, #15
 8000976:	e6ee      	b.n	8000756 <__aeabi_fsub+0x96>
 8000978:	000c      	movs	r4, r1
 800097a:	4643      	mov	r3, r8
 800097c:	0015      	movs	r5, r2
 800097e:	e77c      	b.n	800087a <__aeabi_fsub+0x1ba>
 8000980:	4663      	mov	r3, ip
 8000982:	000c      	movs	r4, r1
 8000984:	1ac6      	subs	r6, r0, r3
 8000986:	e6c9      	b.n	800071c <__aeabi_fsub+0x5c>
 8000988:	0003      	movs	r3, r0
 800098a:	4463      	add	r3, ip
 800098c:	2501      	movs	r5, #1
 800098e:	015a      	lsls	r2, r3, #5
 8000990:	d400      	bmi.n	8000994 <__aeabi_fsub+0x2d4>
 8000992:	e76e      	b.n	8000872 <__aeabi_fsub+0x1b2>
 8000994:	2502      	movs	r5, #2
 8000996:	e6fa      	b.n	800078e <__aeabi_fsub+0xce>
 8000998:	4663      	mov	r3, ip
 800099a:	2501      	movs	r5, #1
 800099c:	1a1b      	subs	r3, r3, r0
 800099e:	e6b8      	b.n	8000712 <__aeabi_fsub+0x52>
 80009a0:	4664      	mov	r4, ip
 80009a2:	2320      	movs	r3, #32
 80009a4:	40d4      	lsrs	r4, r2
 80009a6:	1a9b      	subs	r3, r3, r2
 80009a8:	4662      	mov	r2, ip
 80009aa:	409a      	lsls	r2, r3
 80009ac:	0013      	movs	r3, r2
 80009ae:	1e5a      	subs	r2, r3, #1
 80009b0:	4193      	sbcs	r3, r2
 80009b2:	4323      	orrs	r3, r4
 80009b4:	e7a2      	b.n	80008fc <__aeabi_fsub+0x23c>
 80009b6:	4643      	mov	r3, r8
 80009b8:	e774      	b.n	80008a4 <__aeabi_fsub+0x1e4>
 80009ba:	4661      	mov	r1, ip
 80009bc:	2320      	movs	r3, #32
 80009be:	40d1      	lsrs	r1, r2
 80009c0:	1a9b      	subs	r3, r3, r2
 80009c2:	4662      	mov	r2, ip
 80009c4:	409a      	lsls	r2, r3
 80009c6:	0013      	movs	r3, r2
 80009c8:	1e5a      	subs	r2, r3, #1
 80009ca:	4193      	sbcs	r3, r2
 80009cc:	430b      	orrs	r3, r1
 80009ce:	e720      	b.n	8000812 <__aeabi_fsub+0x152>
 80009d0:	4663      	mov	r3, ip
 80009d2:	000c      	movs	r4, r1
 80009d4:	2501      	movs	r5, #1
 80009d6:	1ac3      	subs	r3, r0, r3
 80009d8:	e69b      	b.n	8000712 <__aeabi_fsub+0x52>
 80009da:	2800      	cmp	r0, #0
 80009dc:	d099      	beq.n	8000912 <__aeabi_fsub+0x252>
 80009de:	000c      	movs	r4, r1
 80009e0:	4646      	mov	r6, r8
 80009e2:	2200      	movs	r2, #0
 80009e4:	e6b7      	b.n	8000756 <__aeabi_fsub+0x96>
 80009e6:	4646      	mov	r6, r8
 80009e8:	2200      	movs	r2, #0
 80009ea:	e6b4      	b.n	8000756 <__aeabi_fsub+0x96>
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d000      	beq.n	80009f2 <__aeabi_fsub+0x332>
 80009f0:	e73f      	b.n	8000872 <__aeabi_fsub+0x1b2>
 80009f2:	2400      	movs	r4, #0
 80009f4:	2600      	movs	r6, #0
 80009f6:	e6ae      	b.n	8000756 <__aeabi_fsub+0x96>
 80009f8:	fbffffff 	.word	0xfbffffff
 80009fc:	7dffffff 	.word	0x7dffffff

08000a00 <__aeabi_f2iz>:
 8000a00:	0241      	lsls	r1, r0, #9
 8000a02:	0042      	lsls	r2, r0, #1
 8000a04:	0fc3      	lsrs	r3, r0, #31
 8000a06:	0a49      	lsrs	r1, r1, #9
 8000a08:	2000      	movs	r0, #0
 8000a0a:	0e12      	lsrs	r2, r2, #24
 8000a0c:	2a7e      	cmp	r2, #126	; 0x7e
 8000a0e:	dd03      	ble.n	8000a18 <__aeabi_f2iz+0x18>
 8000a10:	2a9d      	cmp	r2, #157	; 0x9d
 8000a12:	dd02      	ble.n	8000a1a <__aeabi_f2iz+0x1a>
 8000a14:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <__aeabi_f2iz+0x3c>)
 8000a16:	1898      	adds	r0, r3, r2
 8000a18:	4770      	bx	lr
 8000a1a:	2080      	movs	r0, #128	; 0x80
 8000a1c:	0400      	lsls	r0, r0, #16
 8000a1e:	4301      	orrs	r1, r0
 8000a20:	2a95      	cmp	r2, #149	; 0x95
 8000a22:	dc07      	bgt.n	8000a34 <__aeabi_f2iz+0x34>
 8000a24:	2096      	movs	r0, #150	; 0x96
 8000a26:	1a82      	subs	r2, r0, r2
 8000a28:	40d1      	lsrs	r1, r2
 8000a2a:	4248      	negs	r0, r1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1f3      	bne.n	8000a18 <__aeabi_f2iz+0x18>
 8000a30:	0008      	movs	r0, r1
 8000a32:	e7f1      	b.n	8000a18 <__aeabi_f2iz+0x18>
 8000a34:	3a96      	subs	r2, #150	; 0x96
 8000a36:	4091      	lsls	r1, r2
 8000a38:	e7f7      	b.n	8000a2a <__aeabi_f2iz+0x2a>
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	7fffffff 	.word	0x7fffffff

08000a40 <__aeabi_dadd>:
 8000a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a42:	464f      	mov	r7, r9
 8000a44:	4646      	mov	r6, r8
 8000a46:	46d6      	mov	lr, sl
 8000a48:	0004      	movs	r4, r0
 8000a4a:	b5c0      	push	{r6, r7, lr}
 8000a4c:	001f      	movs	r7, r3
 8000a4e:	030b      	lsls	r3, r1, #12
 8000a50:	0010      	movs	r0, r2
 8000a52:	004e      	lsls	r6, r1, #1
 8000a54:	0a5b      	lsrs	r3, r3, #9
 8000a56:	0fcd      	lsrs	r5, r1, #31
 8000a58:	0f61      	lsrs	r1, r4, #29
 8000a5a:	007a      	lsls	r2, r7, #1
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	00e3      	lsls	r3, r4, #3
 8000a60:	033c      	lsls	r4, r7, #12
 8000a62:	0fff      	lsrs	r7, r7, #31
 8000a64:	46bc      	mov	ip, r7
 8000a66:	0a64      	lsrs	r4, r4, #9
 8000a68:	0f47      	lsrs	r7, r0, #29
 8000a6a:	4327      	orrs	r7, r4
 8000a6c:	0d76      	lsrs	r6, r6, #21
 8000a6e:	0d52      	lsrs	r2, r2, #21
 8000a70:	00c0      	lsls	r0, r0, #3
 8000a72:	46b9      	mov	r9, r7
 8000a74:	4680      	mov	r8, r0
 8000a76:	1ab7      	subs	r7, r6, r2
 8000a78:	4565      	cmp	r5, ip
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_dadd+0x3e>
 8000a7c:	e09b      	b.n	8000bb6 <__aeabi_dadd+0x176>
 8000a7e:	2f00      	cmp	r7, #0
 8000a80:	dc00      	bgt.n	8000a84 <__aeabi_dadd+0x44>
 8000a82:	e084      	b.n	8000b8e <__aeabi_dadd+0x14e>
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_dadd+0x4a>
 8000a88:	e0be      	b.n	8000c08 <__aeabi_dadd+0x1c8>
 8000a8a:	4ac8      	ldr	r2, [pc, #800]	; (8000dac <__aeabi_dadd+0x36c>)
 8000a8c:	4296      	cmp	r6, r2
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x52>
 8000a90:	e124      	b.n	8000cdc <__aeabi_dadd+0x29c>
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	464c      	mov	r4, r9
 8000a96:	0412      	lsls	r2, r2, #16
 8000a98:	4314      	orrs	r4, r2
 8000a9a:	46a1      	mov	r9, r4
 8000a9c:	2f38      	cmp	r7, #56	; 0x38
 8000a9e:	dd00      	ble.n	8000aa2 <__aeabi_dadd+0x62>
 8000aa0:	e167      	b.n	8000d72 <__aeabi_dadd+0x332>
 8000aa2:	2f1f      	cmp	r7, #31
 8000aa4:	dd00      	ble.n	8000aa8 <__aeabi_dadd+0x68>
 8000aa6:	e1d6      	b.n	8000e56 <__aeabi_dadd+0x416>
 8000aa8:	2220      	movs	r2, #32
 8000aaa:	464c      	mov	r4, r9
 8000aac:	1bd2      	subs	r2, r2, r7
 8000aae:	4094      	lsls	r4, r2
 8000ab0:	46a2      	mov	sl, r4
 8000ab2:	4644      	mov	r4, r8
 8000ab4:	40fc      	lsrs	r4, r7
 8000ab6:	0020      	movs	r0, r4
 8000ab8:	4654      	mov	r4, sl
 8000aba:	4304      	orrs	r4, r0
 8000abc:	4640      	mov	r0, r8
 8000abe:	4090      	lsls	r0, r2
 8000ac0:	1e42      	subs	r2, r0, #1
 8000ac2:	4190      	sbcs	r0, r2
 8000ac4:	464a      	mov	r2, r9
 8000ac6:	40fa      	lsrs	r2, r7
 8000ac8:	4304      	orrs	r4, r0
 8000aca:	1a89      	subs	r1, r1, r2
 8000acc:	1b1c      	subs	r4, r3, r4
 8000ace:	42a3      	cmp	r3, r4
 8000ad0:	4192      	sbcs	r2, r2
 8000ad2:	4252      	negs	r2, r2
 8000ad4:	1a8b      	subs	r3, r1, r2
 8000ad6:	469a      	mov	sl, r3
 8000ad8:	4653      	mov	r3, sl
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	d400      	bmi.n	8000ae0 <__aeabi_dadd+0xa0>
 8000ade:	e0d4      	b.n	8000c8a <__aeabi_dadd+0x24a>
 8000ae0:	4653      	mov	r3, sl
 8000ae2:	025a      	lsls	r2, r3, #9
 8000ae4:	0a53      	lsrs	r3, r2, #9
 8000ae6:	469a      	mov	sl, r3
 8000ae8:	4653      	mov	r3, sl
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d100      	bne.n	8000af0 <__aeabi_dadd+0xb0>
 8000aee:	e104      	b.n	8000cfa <__aeabi_dadd+0x2ba>
 8000af0:	4650      	mov	r0, sl
 8000af2:	f001 fa47 	bl	8001f84 <__clzsi2>
 8000af6:	0003      	movs	r3, r0
 8000af8:	3b08      	subs	r3, #8
 8000afa:	2220      	movs	r2, #32
 8000afc:	0020      	movs	r0, r4
 8000afe:	1ad2      	subs	r2, r2, r3
 8000b00:	4651      	mov	r1, sl
 8000b02:	40d0      	lsrs	r0, r2
 8000b04:	4099      	lsls	r1, r3
 8000b06:	0002      	movs	r2, r0
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	42b3      	cmp	r3, r6
 8000b0e:	da00      	bge.n	8000b12 <__aeabi_dadd+0xd2>
 8000b10:	e102      	b.n	8000d18 <__aeabi_dadd+0x2d8>
 8000b12:	1b9b      	subs	r3, r3, r6
 8000b14:	1c59      	adds	r1, r3, #1
 8000b16:	291f      	cmp	r1, #31
 8000b18:	dd00      	ble.n	8000b1c <__aeabi_dadd+0xdc>
 8000b1a:	e0a7      	b.n	8000c6c <__aeabi_dadd+0x22c>
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	0010      	movs	r0, r2
 8000b20:	0026      	movs	r6, r4
 8000b22:	1a5b      	subs	r3, r3, r1
 8000b24:	409c      	lsls	r4, r3
 8000b26:	4098      	lsls	r0, r3
 8000b28:	40ce      	lsrs	r6, r1
 8000b2a:	40ca      	lsrs	r2, r1
 8000b2c:	1e63      	subs	r3, r4, #1
 8000b2e:	419c      	sbcs	r4, r3
 8000b30:	4330      	orrs	r0, r6
 8000b32:	4692      	mov	sl, r2
 8000b34:	2600      	movs	r6, #0
 8000b36:	4304      	orrs	r4, r0
 8000b38:	0763      	lsls	r3, r4, #29
 8000b3a:	d009      	beq.n	8000b50 <__aeabi_dadd+0x110>
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	4023      	ands	r3, r4
 8000b40:	2b04      	cmp	r3, #4
 8000b42:	d005      	beq.n	8000b50 <__aeabi_dadd+0x110>
 8000b44:	1d23      	adds	r3, r4, #4
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	41a4      	sbcs	r4, r4
 8000b4a:	4264      	negs	r4, r4
 8000b4c:	44a2      	add	sl, r4
 8000b4e:	001c      	movs	r4, r3
 8000b50:	4653      	mov	r3, sl
 8000b52:	021b      	lsls	r3, r3, #8
 8000b54:	d400      	bmi.n	8000b58 <__aeabi_dadd+0x118>
 8000b56:	e09b      	b.n	8000c90 <__aeabi_dadd+0x250>
 8000b58:	4b94      	ldr	r3, [pc, #592]	; (8000dac <__aeabi_dadd+0x36c>)
 8000b5a:	3601      	adds	r6, #1
 8000b5c:	429e      	cmp	r6, r3
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_dadd+0x122>
 8000b60:	e0b8      	b.n	8000cd4 <__aeabi_dadd+0x294>
 8000b62:	4653      	mov	r3, sl
 8000b64:	4992      	ldr	r1, [pc, #584]	; (8000db0 <__aeabi_dadd+0x370>)
 8000b66:	08e4      	lsrs	r4, r4, #3
 8000b68:	400b      	ands	r3, r1
 8000b6a:	0019      	movs	r1, r3
 8000b6c:	075b      	lsls	r3, r3, #29
 8000b6e:	4323      	orrs	r3, r4
 8000b70:	0572      	lsls	r2, r6, #21
 8000b72:	024c      	lsls	r4, r1, #9
 8000b74:	0b24      	lsrs	r4, r4, #12
 8000b76:	0d52      	lsrs	r2, r2, #21
 8000b78:	0512      	lsls	r2, r2, #20
 8000b7a:	07ed      	lsls	r5, r5, #31
 8000b7c:	4322      	orrs	r2, r4
 8000b7e:	432a      	orrs	r2, r5
 8000b80:	0018      	movs	r0, r3
 8000b82:	0011      	movs	r1, r2
 8000b84:	bce0      	pop	{r5, r6, r7}
 8000b86:	46ba      	mov	sl, r7
 8000b88:	46b1      	mov	r9, r6
 8000b8a:	46a8      	mov	r8, r5
 8000b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d048      	beq.n	8000c24 <__aeabi_dadd+0x1e4>
 8000b92:	1b97      	subs	r7, r2, r6
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d000      	beq.n	8000b9a <__aeabi_dadd+0x15a>
 8000b98:	e10e      	b.n	8000db8 <__aeabi_dadd+0x378>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	431c      	orrs	r4, r3
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dadd+0x162>
 8000ba0:	e1b7      	b.n	8000f12 <__aeabi_dadd+0x4d2>
 8000ba2:	1e7c      	subs	r4, r7, #1
 8000ba4:	2f01      	cmp	r7, #1
 8000ba6:	d100      	bne.n	8000baa <__aeabi_dadd+0x16a>
 8000ba8:	e226      	b.n	8000ff8 <__aeabi_dadd+0x5b8>
 8000baa:	4d80      	ldr	r5, [pc, #512]	; (8000dac <__aeabi_dadd+0x36c>)
 8000bac:	42af      	cmp	r7, r5
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_dadd+0x172>
 8000bb0:	e1d5      	b.n	8000f5e <__aeabi_dadd+0x51e>
 8000bb2:	0027      	movs	r7, r4
 8000bb4:	e107      	b.n	8000dc6 <__aeabi_dadd+0x386>
 8000bb6:	2f00      	cmp	r7, #0
 8000bb8:	dc00      	bgt.n	8000bbc <__aeabi_dadd+0x17c>
 8000bba:	e0b2      	b.n	8000d22 <__aeabi_dadd+0x2e2>
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	d047      	beq.n	8000c50 <__aeabi_dadd+0x210>
 8000bc0:	4a7a      	ldr	r2, [pc, #488]	; (8000dac <__aeabi_dadd+0x36c>)
 8000bc2:	4296      	cmp	r6, r2
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_dadd+0x188>
 8000bc6:	e089      	b.n	8000cdc <__aeabi_dadd+0x29c>
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	464c      	mov	r4, r9
 8000bcc:	0412      	lsls	r2, r2, #16
 8000bce:	4314      	orrs	r4, r2
 8000bd0:	46a1      	mov	r9, r4
 8000bd2:	2f38      	cmp	r7, #56	; 0x38
 8000bd4:	dc6b      	bgt.n	8000cae <__aeabi_dadd+0x26e>
 8000bd6:	2f1f      	cmp	r7, #31
 8000bd8:	dc00      	bgt.n	8000bdc <__aeabi_dadd+0x19c>
 8000bda:	e16e      	b.n	8000eba <__aeabi_dadd+0x47a>
 8000bdc:	003a      	movs	r2, r7
 8000bde:	4648      	mov	r0, r9
 8000be0:	3a20      	subs	r2, #32
 8000be2:	40d0      	lsrs	r0, r2
 8000be4:	4684      	mov	ip, r0
 8000be6:	2f20      	cmp	r7, #32
 8000be8:	d007      	beq.n	8000bfa <__aeabi_dadd+0x1ba>
 8000bea:	2240      	movs	r2, #64	; 0x40
 8000bec:	4648      	mov	r0, r9
 8000bee:	1bd2      	subs	r2, r2, r7
 8000bf0:	4090      	lsls	r0, r2
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	4640      	mov	r0, r8
 8000bf6:	4310      	orrs	r0, r2
 8000bf8:	4680      	mov	r8, r0
 8000bfa:	4640      	mov	r0, r8
 8000bfc:	1e42      	subs	r2, r0, #1
 8000bfe:	4190      	sbcs	r0, r2
 8000c00:	4662      	mov	r2, ip
 8000c02:	0004      	movs	r4, r0
 8000c04:	4314      	orrs	r4, r2
 8000c06:	e057      	b.n	8000cb8 <__aeabi_dadd+0x278>
 8000c08:	464a      	mov	r2, r9
 8000c0a:	4302      	orrs	r2, r0
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_dadd+0x1d0>
 8000c0e:	e103      	b.n	8000e18 <__aeabi_dadd+0x3d8>
 8000c10:	1e7a      	subs	r2, r7, #1
 8000c12:	2f01      	cmp	r7, #1
 8000c14:	d100      	bne.n	8000c18 <__aeabi_dadd+0x1d8>
 8000c16:	e193      	b.n	8000f40 <__aeabi_dadd+0x500>
 8000c18:	4c64      	ldr	r4, [pc, #400]	; (8000dac <__aeabi_dadd+0x36c>)
 8000c1a:	42a7      	cmp	r7, r4
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x1e0>
 8000c1e:	e18a      	b.n	8000f36 <__aeabi_dadd+0x4f6>
 8000c20:	0017      	movs	r7, r2
 8000c22:	e73b      	b.n	8000a9c <__aeabi_dadd+0x5c>
 8000c24:	4c63      	ldr	r4, [pc, #396]	; (8000db4 <__aeabi_dadd+0x374>)
 8000c26:	1c72      	adds	r2, r6, #1
 8000c28:	4222      	tst	r2, r4
 8000c2a:	d000      	beq.n	8000c2e <__aeabi_dadd+0x1ee>
 8000c2c:	e0e0      	b.n	8000df0 <__aeabi_dadd+0x3b0>
 8000c2e:	000a      	movs	r2, r1
 8000c30:	431a      	orrs	r2, r3
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	d000      	beq.n	8000c38 <__aeabi_dadd+0x1f8>
 8000c36:	e174      	b.n	8000f22 <__aeabi_dadd+0x4e2>
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_dadd+0x1fe>
 8000c3c:	e1d0      	b.n	8000fe0 <__aeabi_dadd+0x5a0>
 8000c3e:	464a      	mov	r2, r9
 8000c40:	4302      	orrs	r2, r0
 8000c42:	d000      	beq.n	8000c46 <__aeabi_dadd+0x206>
 8000c44:	e1e3      	b.n	800100e <__aeabi_dadd+0x5ce>
 8000c46:	074a      	lsls	r2, r1, #29
 8000c48:	08db      	lsrs	r3, r3, #3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	08c9      	lsrs	r1, r1, #3
 8000c4e:	e029      	b.n	8000ca4 <__aeabi_dadd+0x264>
 8000c50:	464a      	mov	r2, r9
 8000c52:	4302      	orrs	r2, r0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_dadd+0x218>
 8000c56:	e17d      	b.n	8000f54 <__aeabi_dadd+0x514>
 8000c58:	1e7a      	subs	r2, r7, #1
 8000c5a:	2f01      	cmp	r7, #1
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_dadd+0x220>
 8000c5e:	e0e0      	b.n	8000e22 <__aeabi_dadd+0x3e2>
 8000c60:	4c52      	ldr	r4, [pc, #328]	; (8000dac <__aeabi_dadd+0x36c>)
 8000c62:	42a7      	cmp	r7, r4
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dadd+0x228>
 8000c66:	e166      	b.n	8000f36 <__aeabi_dadd+0x4f6>
 8000c68:	0017      	movs	r7, r2
 8000c6a:	e7b2      	b.n	8000bd2 <__aeabi_dadd+0x192>
 8000c6c:	0010      	movs	r0, r2
 8000c6e:	3b1f      	subs	r3, #31
 8000c70:	40d8      	lsrs	r0, r3
 8000c72:	2920      	cmp	r1, #32
 8000c74:	d003      	beq.n	8000c7e <__aeabi_dadd+0x23e>
 8000c76:	2340      	movs	r3, #64	; 0x40
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	409a      	lsls	r2, r3
 8000c7c:	4314      	orrs	r4, r2
 8000c7e:	1e63      	subs	r3, r4, #1
 8000c80:	419c      	sbcs	r4, r3
 8000c82:	2300      	movs	r3, #0
 8000c84:	2600      	movs	r6, #0
 8000c86:	469a      	mov	sl, r3
 8000c88:	4304      	orrs	r4, r0
 8000c8a:	0763      	lsls	r3, r4, #29
 8000c8c:	d000      	beq.n	8000c90 <__aeabi_dadd+0x250>
 8000c8e:	e755      	b.n	8000b3c <__aeabi_dadd+0xfc>
 8000c90:	4652      	mov	r2, sl
 8000c92:	08e3      	lsrs	r3, r4, #3
 8000c94:	0752      	lsls	r2, r2, #29
 8000c96:	4313      	orrs	r3, r2
 8000c98:	4652      	mov	r2, sl
 8000c9a:	0037      	movs	r7, r6
 8000c9c:	08d1      	lsrs	r1, r2, #3
 8000c9e:	4a43      	ldr	r2, [pc, #268]	; (8000dac <__aeabi_dadd+0x36c>)
 8000ca0:	4297      	cmp	r7, r2
 8000ca2:	d01f      	beq.n	8000ce4 <__aeabi_dadd+0x2a4>
 8000ca4:	0309      	lsls	r1, r1, #12
 8000ca6:	057a      	lsls	r2, r7, #21
 8000ca8:	0b0c      	lsrs	r4, r1, #12
 8000caa:	0d52      	lsrs	r2, r2, #21
 8000cac:	e764      	b.n	8000b78 <__aeabi_dadd+0x138>
 8000cae:	4642      	mov	r2, r8
 8000cb0:	464c      	mov	r4, r9
 8000cb2:	4314      	orrs	r4, r2
 8000cb4:	1e62      	subs	r2, r4, #1
 8000cb6:	4194      	sbcs	r4, r2
 8000cb8:	18e4      	adds	r4, r4, r3
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	4192      	sbcs	r2, r2
 8000cbe:	4252      	negs	r2, r2
 8000cc0:	4692      	mov	sl, r2
 8000cc2:	448a      	add	sl, r1
 8000cc4:	4653      	mov	r3, sl
 8000cc6:	021b      	lsls	r3, r3, #8
 8000cc8:	d5df      	bpl.n	8000c8a <__aeabi_dadd+0x24a>
 8000cca:	4b38      	ldr	r3, [pc, #224]	; (8000dac <__aeabi_dadd+0x36c>)
 8000ccc:	3601      	adds	r6, #1
 8000cce:	429e      	cmp	r6, r3
 8000cd0:	d000      	beq.n	8000cd4 <__aeabi_dadd+0x294>
 8000cd2:	e0b3      	b.n	8000e3c <__aeabi_dadd+0x3fc>
 8000cd4:	0032      	movs	r2, r6
 8000cd6:	2400      	movs	r4, #0
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e74d      	b.n	8000b78 <__aeabi_dadd+0x138>
 8000cdc:	074a      	lsls	r2, r1, #29
 8000cde:	08db      	lsrs	r3, r3, #3
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	08c9      	lsrs	r1, r1, #3
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dadd+0x2ac>
 8000cea:	e200      	b.n	80010ee <__aeabi_dadd+0x6ae>
 8000cec:	2480      	movs	r4, #128	; 0x80
 8000cee:	0324      	lsls	r4, r4, #12
 8000cf0:	430c      	orrs	r4, r1
 8000cf2:	0324      	lsls	r4, r4, #12
 8000cf4:	4a2d      	ldr	r2, [pc, #180]	; (8000dac <__aeabi_dadd+0x36c>)
 8000cf6:	0b24      	lsrs	r4, r4, #12
 8000cf8:	e73e      	b.n	8000b78 <__aeabi_dadd+0x138>
 8000cfa:	0020      	movs	r0, r4
 8000cfc:	f001 f942 	bl	8001f84 <__clzsi2>
 8000d00:	0003      	movs	r3, r0
 8000d02:	3318      	adds	r3, #24
 8000d04:	2b1f      	cmp	r3, #31
 8000d06:	dc00      	bgt.n	8000d0a <__aeabi_dadd+0x2ca>
 8000d08:	e6f7      	b.n	8000afa <__aeabi_dadd+0xba>
 8000d0a:	0022      	movs	r2, r4
 8000d0c:	3808      	subs	r0, #8
 8000d0e:	4082      	lsls	r2, r0
 8000d10:	2400      	movs	r4, #0
 8000d12:	42b3      	cmp	r3, r6
 8000d14:	db00      	blt.n	8000d18 <__aeabi_dadd+0x2d8>
 8000d16:	e6fc      	b.n	8000b12 <__aeabi_dadd+0xd2>
 8000d18:	1af6      	subs	r6, r6, r3
 8000d1a:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <__aeabi_dadd+0x370>)
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	4692      	mov	sl, r2
 8000d20:	e70a      	b.n	8000b38 <__aeabi_dadd+0xf8>
 8000d22:	2f00      	cmp	r7, #0
 8000d24:	d02b      	beq.n	8000d7e <__aeabi_dadd+0x33e>
 8000d26:	1b97      	subs	r7, r2, r6
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_dadd+0x2ee>
 8000d2c:	e0b8      	b.n	8000ea0 <__aeabi_dadd+0x460>
 8000d2e:	4c1f      	ldr	r4, [pc, #124]	; (8000dac <__aeabi_dadd+0x36c>)
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d100      	bne.n	8000d36 <__aeabi_dadd+0x2f6>
 8000d34:	e11c      	b.n	8000f70 <__aeabi_dadd+0x530>
 8000d36:	2480      	movs	r4, #128	; 0x80
 8000d38:	0424      	lsls	r4, r4, #16
 8000d3a:	4321      	orrs	r1, r4
 8000d3c:	2f38      	cmp	r7, #56	; 0x38
 8000d3e:	dd00      	ble.n	8000d42 <__aeabi_dadd+0x302>
 8000d40:	e11e      	b.n	8000f80 <__aeabi_dadd+0x540>
 8000d42:	2f1f      	cmp	r7, #31
 8000d44:	dd00      	ble.n	8000d48 <__aeabi_dadd+0x308>
 8000d46:	e19e      	b.n	8001086 <__aeabi_dadd+0x646>
 8000d48:	2620      	movs	r6, #32
 8000d4a:	000c      	movs	r4, r1
 8000d4c:	1bf6      	subs	r6, r6, r7
 8000d4e:	0018      	movs	r0, r3
 8000d50:	40b3      	lsls	r3, r6
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	40f8      	lsrs	r0, r7
 8000d56:	1e5e      	subs	r6, r3, #1
 8000d58:	41b3      	sbcs	r3, r6
 8000d5a:	40f9      	lsrs	r1, r7
 8000d5c:	4304      	orrs	r4, r0
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	4489      	add	r9, r1
 8000d62:	4444      	add	r4, r8
 8000d64:	4544      	cmp	r4, r8
 8000d66:	419b      	sbcs	r3, r3
 8000d68:	425b      	negs	r3, r3
 8000d6a:	444b      	add	r3, r9
 8000d6c:	469a      	mov	sl, r3
 8000d6e:	0016      	movs	r6, r2
 8000d70:	e7a8      	b.n	8000cc4 <__aeabi_dadd+0x284>
 8000d72:	4642      	mov	r2, r8
 8000d74:	464c      	mov	r4, r9
 8000d76:	4314      	orrs	r4, r2
 8000d78:	1e62      	subs	r2, r4, #1
 8000d7a:	4194      	sbcs	r4, r2
 8000d7c:	e6a6      	b.n	8000acc <__aeabi_dadd+0x8c>
 8000d7e:	4c0d      	ldr	r4, [pc, #52]	; (8000db4 <__aeabi_dadd+0x374>)
 8000d80:	1c72      	adds	r2, r6, #1
 8000d82:	4222      	tst	r2, r4
 8000d84:	d000      	beq.n	8000d88 <__aeabi_dadd+0x348>
 8000d86:	e0a8      	b.n	8000eda <__aeabi_dadd+0x49a>
 8000d88:	000a      	movs	r2, r1
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d000      	beq.n	8000d92 <__aeabi_dadd+0x352>
 8000d90:	e10a      	b.n	8000fa8 <__aeabi_dadd+0x568>
 8000d92:	2a00      	cmp	r2, #0
 8000d94:	d100      	bne.n	8000d98 <__aeabi_dadd+0x358>
 8000d96:	e15e      	b.n	8001056 <__aeabi_dadd+0x616>
 8000d98:	464a      	mov	r2, r9
 8000d9a:	4302      	orrs	r2, r0
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_dadd+0x360>
 8000d9e:	e161      	b.n	8001064 <__aeabi_dadd+0x624>
 8000da0:	074a      	lsls	r2, r1, #29
 8000da2:	08db      	lsrs	r3, r3, #3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	08c9      	lsrs	r1, r1, #3
 8000da8:	e77c      	b.n	8000ca4 <__aeabi_dadd+0x264>
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	000007ff 	.word	0x000007ff
 8000db0:	ff7fffff 	.word	0xff7fffff
 8000db4:	000007fe 	.word	0x000007fe
 8000db8:	4ccf      	ldr	r4, [pc, #828]	; (80010f8 <__aeabi_dadd+0x6b8>)
 8000dba:	42a2      	cmp	r2, r4
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_dadd+0x380>
 8000dbe:	e0ce      	b.n	8000f5e <__aeabi_dadd+0x51e>
 8000dc0:	2480      	movs	r4, #128	; 0x80
 8000dc2:	0424      	lsls	r4, r4, #16
 8000dc4:	4321      	orrs	r1, r4
 8000dc6:	2f38      	cmp	r7, #56	; 0x38
 8000dc8:	dc5b      	bgt.n	8000e82 <__aeabi_dadd+0x442>
 8000dca:	2f1f      	cmp	r7, #31
 8000dcc:	dd00      	ble.n	8000dd0 <__aeabi_dadd+0x390>
 8000dce:	e0dc      	b.n	8000f8a <__aeabi_dadd+0x54a>
 8000dd0:	2520      	movs	r5, #32
 8000dd2:	000c      	movs	r4, r1
 8000dd4:	1bed      	subs	r5, r5, r7
 8000dd6:	001e      	movs	r6, r3
 8000dd8:	40ab      	lsls	r3, r5
 8000dda:	40ac      	lsls	r4, r5
 8000ddc:	40fe      	lsrs	r6, r7
 8000dde:	1e5d      	subs	r5, r3, #1
 8000de0:	41ab      	sbcs	r3, r5
 8000de2:	4334      	orrs	r4, r6
 8000de4:	40f9      	lsrs	r1, r7
 8000de6:	431c      	orrs	r4, r3
 8000de8:	464b      	mov	r3, r9
 8000dea:	1a5b      	subs	r3, r3, r1
 8000dec:	4699      	mov	r9, r3
 8000dee:	e04c      	b.n	8000e8a <__aeabi_dadd+0x44a>
 8000df0:	464a      	mov	r2, r9
 8000df2:	1a1c      	subs	r4, r3, r0
 8000df4:	1a88      	subs	r0, r1, r2
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	4192      	sbcs	r2, r2
 8000dfa:	4252      	negs	r2, r2
 8000dfc:	4692      	mov	sl, r2
 8000dfe:	0002      	movs	r2, r0
 8000e00:	4650      	mov	r0, sl
 8000e02:	1a12      	subs	r2, r2, r0
 8000e04:	4692      	mov	sl, r2
 8000e06:	0212      	lsls	r2, r2, #8
 8000e08:	d478      	bmi.n	8000efc <__aeabi_dadd+0x4bc>
 8000e0a:	4653      	mov	r3, sl
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	d000      	beq.n	8000e12 <__aeabi_dadd+0x3d2>
 8000e10:	e66a      	b.n	8000ae8 <__aeabi_dadd+0xa8>
 8000e12:	2100      	movs	r1, #0
 8000e14:	2500      	movs	r5, #0
 8000e16:	e745      	b.n	8000ca4 <__aeabi_dadd+0x264>
 8000e18:	074a      	lsls	r2, r1, #29
 8000e1a:	08db      	lsrs	r3, r3, #3
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	08c9      	lsrs	r1, r1, #3
 8000e20:	e73d      	b.n	8000c9e <__aeabi_dadd+0x25e>
 8000e22:	181c      	adds	r4, r3, r0
 8000e24:	429c      	cmp	r4, r3
 8000e26:	419b      	sbcs	r3, r3
 8000e28:	4449      	add	r1, r9
 8000e2a:	468a      	mov	sl, r1
 8000e2c:	425b      	negs	r3, r3
 8000e2e:	449a      	add	sl, r3
 8000e30:	4653      	mov	r3, sl
 8000e32:	2601      	movs	r6, #1
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	d400      	bmi.n	8000e3a <__aeabi_dadd+0x3fa>
 8000e38:	e727      	b.n	8000c8a <__aeabi_dadd+0x24a>
 8000e3a:	2602      	movs	r6, #2
 8000e3c:	4652      	mov	r2, sl
 8000e3e:	4baf      	ldr	r3, [pc, #700]	; (80010fc <__aeabi_dadd+0x6bc>)
 8000e40:	2101      	movs	r1, #1
 8000e42:	401a      	ands	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	4021      	ands	r1, r4
 8000e48:	0862      	lsrs	r2, r4, #1
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	07dc      	lsls	r4, r3, #31
 8000e4e:	085b      	lsrs	r3, r3, #1
 8000e50:	469a      	mov	sl, r3
 8000e52:	4314      	orrs	r4, r2
 8000e54:	e670      	b.n	8000b38 <__aeabi_dadd+0xf8>
 8000e56:	003a      	movs	r2, r7
 8000e58:	464c      	mov	r4, r9
 8000e5a:	3a20      	subs	r2, #32
 8000e5c:	40d4      	lsrs	r4, r2
 8000e5e:	46a4      	mov	ip, r4
 8000e60:	2f20      	cmp	r7, #32
 8000e62:	d007      	beq.n	8000e74 <__aeabi_dadd+0x434>
 8000e64:	2240      	movs	r2, #64	; 0x40
 8000e66:	4648      	mov	r0, r9
 8000e68:	1bd2      	subs	r2, r2, r7
 8000e6a:	4090      	lsls	r0, r2
 8000e6c:	0002      	movs	r2, r0
 8000e6e:	4640      	mov	r0, r8
 8000e70:	4310      	orrs	r0, r2
 8000e72:	4680      	mov	r8, r0
 8000e74:	4640      	mov	r0, r8
 8000e76:	1e42      	subs	r2, r0, #1
 8000e78:	4190      	sbcs	r0, r2
 8000e7a:	4662      	mov	r2, ip
 8000e7c:	0004      	movs	r4, r0
 8000e7e:	4314      	orrs	r4, r2
 8000e80:	e624      	b.n	8000acc <__aeabi_dadd+0x8c>
 8000e82:	4319      	orrs	r1, r3
 8000e84:	000c      	movs	r4, r1
 8000e86:	1e63      	subs	r3, r4, #1
 8000e88:	419c      	sbcs	r4, r3
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	1b1c      	subs	r4, r3, r4
 8000e8e:	45a0      	cmp	r8, r4
 8000e90:	419b      	sbcs	r3, r3
 8000e92:	4649      	mov	r1, r9
 8000e94:	425b      	negs	r3, r3
 8000e96:	1acb      	subs	r3, r1, r3
 8000e98:	469a      	mov	sl, r3
 8000e9a:	4665      	mov	r5, ip
 8000e9c:	0016      	movs	r6, r2
 8000e9e:	e61b      	b.n	8000ad8 <__aeabi_dadd+0x98>
 8000ea0:	000c      	movs	r4, r1
 8000ea2:	431c      	orrs	r4, r3
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_dadd+0x468>
 8000ea6:	e0c7      	b.n	8001038 <__aeabi_dadd+0x5f8>
 8000ea8:	1e7c      	subs	r4, r7, #1
 8000eaa:	2f01      	cmp	r7, #1
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_dadd+0x470>
 8000eae:	e0f9      	b.n	80010a4 <__aeabi_dadd+0x664>
 8000eb0:	4e91      	ldr	r6, [pc, #580]	; (80010f8 <__aeabi_dadd+0x6b8>)
 8000eb2:	42b7      	cmp	r7, r6
 8000eb4:	d05c      	beq.n	8000f70 <__aeabi_dadd+0x530>
 8000eb6:	0027      	movs	r7, r4
 8000eb8:	e740      	b.n	8000d3c <__aeabi_dadd+0x2fc>
 8000eba:	2220      	movs	r2, #32
 8000ebc:	464c      	mov	r4, r9
 8000ebe:	4640      	mov	r0, r8
 8000ec0:	1bd2      	subs	r2, r2, r7
 8000ec2:	4094      	lsls	r4, r2
 8000ec4:	40f8      	lsrs	r0, r7
 8000ec6:	4304      	orrs	r4, r0
 8000ec8:	4640      	mov	r0, r8
 8000eca:	4090      	lsls	r0, r2
 8000ecc:	1e42      	subs	r2, r0, #1
 8000ece:	4190      	sbcs	r0, r2
 8000ed0:	464a      	mov	r2, r9
 8000ed2:	40fa      	lsrs	r2, r7
 8000ed4:	4304      	orrs	r4, r0
 8000ed6:	1889      	adds	r1, r1, r2
 8000ed8:	e6ee      	b.n	8000cb8 <__aeabi_dadd+0x278>
 8000eda:	4c87      	ldr	r4, [pc, #540]	; (80010f8 <__aeabi_dadd+0x6b8>)
 8000edc:	42a2      	cmp	r2, r4
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dadd+0x4a2>
 8000ee0:	e6f9      	b.n	8000cd6 <__aeabi_dadd+0x296>
 8000ee2:	1818      	adds	r0, r3, r0
 8000ee4:	4298      	cmp	r0, r3
 8000ee6:	419b      	sbcs	r3, r3
 8000ee8:	4449      	add	r1, r9
 8000eea:	425b      	negs	r3, r3
 8000eec:	18cb      	adds	r3, r1, r3
 8000eee:	07dc      	lsls	r4, r3, #31
 8000ef0:	0840      	lsrs	r0, r0, #1
 8000ef2:	085b      	lsrs	r3, r3, #1
 8000ef4:	469a      	mov	sl, r3
 8000ef6:	0016      	movs	r6, r2
 8000ef8:	4304      	orrs	r4, r0
 8000efa:	e6c6      	b.n	8000c8a <__aeabi_dadd+0x24a>
 8000efc:	4642      	mov	r2, r8
 8000efe:	1ad4      	subs	r4, r2, r3
 8000f00:	45a0      	cmp	r8, r4
 8000f02:	4180      	sbcs	r0, r0
 8000f04:	464b      	mov	r3, r9
 8000f06:	4240      	negs	r0, r0
 8000f08:	1a59      	subs	r1, r3, r1
 8000f0a:	1a0b      	subs	r3, r1, r0
 8000f0c:	469a      	mov	sl, r3
 8000f0e:	4665      	mov	r5, ip
 8000f10:	e5ea      	b.n	8000ae8 <__aeabi_dadd+0xa8>
 8000f12:	464b      	mov	r3, r9
 8000f14:	464a      	mov	r2, r9
 8000f16:	08c0      	lsrs	r0, r0, #3
 8000f18:	075b      	lsls	r3, r3, #29
 8000f1a:	4665      	mov	r5, ip
 8000f1c:	4303      	orrs	r3, r0
 8000f1e:	08d1      	lsrs	r1, r2, #3
 8000f20:	e6bd      	b.n	8000c9e <__aeabi_dadd+0x25e>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d000      	beq.n	8000f28 <__aeabi_dadd+0x4e8>
 8000f26:	e08e      	b.n	8001046 <__aeabi_dadd+0x606>
 8000f28:	464b      	mov	r3, r9
 8000f2a:	4303      	orrs	r3, r0
 8000f2c:	d117      	bne.n	8000f5e <__aeabi_dadd+0x51e>
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	2500      	movs	r5, #0
 8000f32:	0309      	lsls	r1, r1, #12
 8000f34:	e6da      	b.n	8000cec <__aeabi_dadd+0x2ac>
 8000f36:	074a      	lsls	r2, r1, #29
 8000f38:	08db      	lsrs	r3, r3, #3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	08c9      	lsrs	r1, r1, #3
 8000f3e:	e6d1      	b.n	8000ce4 <__aeabi_dadd+0x2a4>
 8000f40:	1a1c      	subs	r4, r3, r0
 8000f42:	464a      	mov	r2, r9
 8000f44:	42a3      	cmp	r3, r4
 8000f46:	419b      	sbcs	r3, r3
 8000f48:	1a89      	subs	r1, r1, r2
 8000f4a:	425b      	negs	r3, r3
 8000f4c:	1acb      	subs	r3, r1, r3
 8000f4e:	469a      	mov	sl, r3
 8000f50:	2601      	movs	r6, #1
 8000f52:	e5c1      	b.n	8000ad8 <__aeabi_dadd+0x98>
 8000f54:	074a      	lsls	r2, r1, #29
 8000f56:	08db      	lsrs	r3, r3, #3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	08c9      	lsrs	r1, r1, #3
 8000f5c:	e69f      	b.n	8000c9e <__aeabi_dadd+0x25e>
 8000f5e:	4643      	mov	r3, r8
 8000f60:	08d8      	lsrs	r0, r3, #3
 8000f62:	464b      	mov	r3, r9
 8000f64:	464a      	mov	r2, r9
 8000f66:	075b      	lsls	r3, r3, #29
 8000f68:	4665      	mov	r5, ip
 8000f6a:	4303      	orrs	r3, r0
 8000f6c:	08d1      	lsrs	r1, r2, #3
 8000f6e:	e6b9      	b.n	8000ce4 <__aeabi_dadd+0x2a4>
 8000f70:	4643      	mov	r3, r8
 8000f72:	08d8      	lsrs	r0, r3, #3
 8000f74:	464b      	mov	r3, r9
 8000f76:	464a      	mov	r2, r9
 8000f78:	075b      	lsls	r3, r3, #29
 8000f7a:	4303      	orrs	r3, r0
 8000f7c:	08d1      	lsrs	r1, r2, #3
 8000f7e:	e6b1      	b.n	8000ce4 <__aeabi_dadd+0x2a4>
 8000f80:	4319      	orrs	r1, r3
 8000f82:	000c      	movs	r4, r1
 8000f84:	1e63      	subs	r3, r4, #1
 8000f86:	419c      	sbcs	r4, r3
 8000f88:	e6eb      	b.n	8000d62 <__aeabi_dadd+0x322>
 8000f8a:	003c      	movs	r4, r7
 8000f8c:	000d      	movs	r5, r1
 8000f8e:	3c20      	subs	r4, #32
 8000f90:	40e5      	lsrs	r5, r4
 8000f92:	2f20      	cmp	r7, #32
 8000f94:	d003      	beq.n	8000f9e <__aeabi_dadd+0x55e>
 8000f96:	2440      	movs	r4, #64	; 0x40
 8000f98:	1be4      	subs	r4, r4, r7
 8000f9a:	40a1      	lsls	r1, r4
 8000f9c:	430b      	orrs	r3, r1
 8000f9e:	001c      	movs	r4, r3
 8000fa0:	1e63      	subs	r3, r4, #1
 8000fa2:	419c      	sbcs	r4, r3
 8000fa4:	432c      	orrs	r4, r5
 8000fa6:	e770      	b.n	8000e8a <__aeabi_dadd+0x44a>
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d0e1      	beq.n	8000f70 <__aeabi_dadd+0x530>
 8000fac:	464a      	mov	r2, r9
 8000fae:	4302      	orrs	r2, r0
 8000fb0:	d0c1      	beq.n	8000f36 <__aeabi_dadd+0x4f6>
 8000fb2:	074a      	lsls	r2, r1, #29
 8000fb4:	08db      	lsrs	r3, r3, #3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	2280      	movs	r2, #128	; 0x80
 8000fba:	08c9      	lsrs	r1, r1, #3
 8000fbc:	0312      	lsls	r2, r2, #12
 8000fbe:	4211      	tst	r1, r2
 8000fc0:	d008      	beq.n	8000fd4 <__aeabi_dadd+0x594>
 8000fc2:	4648      	mov	r0, r9
 8000fc4:	08c4      	lsrs	r4, r0, #3
 8000fc6:	4214      	tst	r4, r2
 8000fc8:	d104      	bne.n	8000fd4 <__aeabi_dadd+0x594>
 8000fca:	4643      	mov	r3, r8
 8000fcc:	0021      	movs	r1, r4
 8000fce:	08db      	lsrs	r3, r3, #3
 8000fd0:	0742      	lsls	r2, r0, #29
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	0f5a      	lsrs	r2, r3, #29
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	0752      	lsls	r2, r2, #29
 8000fda:	08db      	lsrs	r3, r3, #3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	e681      	b.n	8000ce4 <__aeabi_dadd+0x2a4>
 8000fe0:	464b      	mov	r3, r9
 8000fe2:	4303      	orrs	r3, r0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dadd+0x5a8>
 8000fe6:	e714      	b.n	8000e12 <__aeabi_dadd+0x3d2>
 8000fe8:	464b      	mov	r3, r9
 8000fea:	464a      	mov	r2, r9
 8000fec:	08c0      	lsrs	r0, r0, #3
 8000fee:	075b      	lsls	r3, r3, #29
 8000ff0:	4665      	mov	r5, ip
 8000ff2:	4303      	orrs	r3, r0
 8000ff4:	08d1      	lsrs	r1, r2, #3
 8000ff6:	e655      	b.n	8000ca4 <__aeabi_dadd+0x264>
 8000ff8:	1ac4      	subs	r4, r0, r3
 8000ffa:	45a0      	cmp	r8, r4
 8000ffc:	4180      	sbcs	r0, r0
 8000ffe:	464b      	mov	r3, r9
 8001000:	4240      	negs	r0, r0
 8001002:	1a59      	subs	r1, r3, r1
 8001004:	1a0b      	subs	r3, r1, r0
 8001006:	469a      	mov	sl, r3
 8001008:	4665      	mov	r5, ip
 800100a:	2601      	movs	r6, #1
 800100c:	e564      	b.n	8000ad8 <__aeabi_dadd+0x98>
 800100e:	1a1c      	subs	r4, r3, r0
 8001010:	464a      	mov	r2, r9
 8001012:	42a3      	cmp	r3, r4
 8001014:	4180      	sbcs	r0, r0
 8001016:	1a8a      	subs	r2, r1, r2
 8001018:	4240      	negs	r0, r0
 800101a:	1a12      	subs	r2, r2, r0
 800101c:	4692      	mov	sl, r2
 800101e:	0212      	lsls	r2, r2, #8
 8001020:	d549      	bpl.n	80010b6 <__aeabi_dadd+0x676>
 8001022:	4642      	mov	r2, r8
 8001024:	1ad4      	subs	r4, r2, r3
 8001026:	45a0      	cmp	r8, r4
 8001028:	4180      	sbcs	r0, r0
 800102a:	464b      	mov	r3, r9
 800102c:	4240      	negs	r0, r0
 800102e:	1a59      	subs	r1, r3, r1
 8001030:	1a0b      	subs	r3, r1, r0
 8001032:	469a      	mov	sl, r3
 8001034:	4665      	mov	r5, ip
 8001036:	e57f      	b.n	8000b38 <__aeabi_dadd+0xf8>
 8001038:	464b      	mov	r3, r9
 800103a:	464a      	mov	r2, r9
 800103c:	08c0      	lsrs	r0, r0, #3
 800103e:	075b      	lsls	r3, r3, #29
 8001040:	4303      	orrs	r3, r0
 8001042:	08d1      	lsrs	r1, r2, #3
 8001044:	e62b      	b.n	8000c9e <__aeabi_dadd+0x25e>
 8001046:	464a      	mov	r2, r9
 8001048:	08db      	lsrs	r3, r3, #3
 800104a:	4302      	orrs	r2, r0
 800104c:	d138      	bne.n	80010c0 <__aeabi_dadd+0x680>
 800104e:	074a      	lsls	r2, r1, #29
 8001050:	4313      	orrs	r3, r2
 8001052:	08c9      	lsrs	r1, r1, #3
 8001054:	e646      	b.n	8000ce4 <__aeabi_dadd+0x2a4>
 8001056:	464b      	mov	r3, r9
 8001058:	464a      	mov	r2, r9
 800105a:	08c0      	lsrs	r0, r0, #3
 800105c:	075b      	lsls	r3, r3, #29
 800105e:	4303      	orrs	r3, r0
 8001060:	08d1      	lsrs	r1, r2, #3
 8001062:	e61f      	b.n	8000ca4 <__aeabi_dadd+0x264>
 8001064:	181c      	adds	r4, r3, r0
 8001066:	429c      	cmp	r4, r3
 8001068:	419b      	sbcs	r3, r3
 800106a:	4449      	add	r1, r9
 800106c:	468a      	mov	sl, r1
 800106e:	425b      	negs	r3, r3
 8001070:	449a      	add	sl, r3
 8001072:	4653      	mov	r3, sl
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	d400      	bmi.n	800107a <__aeabi_dadd+0x63a>
 8001078:	e607      	b.n	8000c8a <__aeabi_dadd+0x24a>
 800107a:	4652      	mov	r2, sl
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <__aeabi_dadd+0x6bc>)
 800107e:	2601      	movs	r6, #1
 8001080:	401a      	ands	r2, r3
 8001082:	4692      	mov	sl, r2
 8001084:	e601      	b.n	8000c8a <__aeabi_dadd+0x24a>
 8001086:	003c      	movs	r4, r7
 8001088:	000e      	movs	r6, r1
 800108a:	3c20      	subs	r4, #32
 800108c:	40e6      	lsrs	r6, r4
 800108e:	2f20      	cmp	r7, #32
 8001090:	d003      	beq.n	800109a <__aeabi_dadd+0x65a>
 8001092:	2440      	movs	r4, #64	; 0x40
 8001094:	1be4      	subs	r4, r4, r7
 8001096:	40a1      	lsls	r1, r4
 8001098:	430b      	orrs	r3, r1
 800109a:	001c      	movs	r4, r3
 800109c:	1e63      	subs	r3, r4, #1
 800109e:	419c      	sbcs	r4, r3
 80010a0:	4334      	orrs	r4, r6
 80010a2:	e65e      	b.n	8000d62 <__aeabi_dadd+0x322>
 80010a4:	4443      	add	r3, r8
 80010a6:	4283      	cmp	r3, r0
 80010a8:	4180      	sbcs	r0, r0
 80010aa:	4449      	add	r1, r9
 80010ac:	468a      	mov	sl, r1
 80010ae:	4240      	negs	r0, r0
 80010b0:	001c      	movs	r4, r3
 80010b2:	4482      	add	sl, r0
 80010b4:	e6bc      	b.n	8000e30 <__aeabi_dadd+0x3f0>
 80010b6:	4653      	mov	r3, sl
 80010b8:	4323      	orrs	r3, r4
 80010ba:	d100      	bne.n	80010be <__aeabi_dadd+0x67e>
 80010bc:	e6a9      	b.n	8000e12 <__aeabi_dadd+0x3d2>
 80010be:	e5e4      	b.n	8000c8a <__aeabi_dadd+0x24a>
 80010c0:	074a      	lsls	r2, r1, #29
 80010c2:	4313      	orrs	r3, r2
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	08c9      	lsrs	r1, r1, #3
 80010c8:	0312      	lsls	r2, r2, #12
 80010ca:	4211      	tst	r1, r2
 80010cc:	d009      	beq.n	80010e2 <__aeabi_dadd+0x6a2>
 80010ce:	4648      	mov	r0, r9
 80010d0:	08c4      	lsrs	r4, r0, #3
 80010d2:	4214      	tst	r4, r2
 80010d4:	d105      	bne.n	80010e2 <__aeabi_dadd+0x6a2>
 80010d6:	4643      	mov	r3, r8
 80010d8:	4665      	mov	r5, ip
 80010da:	0021      	movs	r1, r4
 80010dc:	08db      	lsrs	r3, r3, #3
 80010de:	0742      	lsls	r2, r0, #29
 80010e0:	4313      	orrs	r3, r2
 80010e2:	0f5a      	lsrs	r2, r3, #29
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	08db      	lsrs	r3, r3, #3
 80010e8:	0752      	lsls	r2, r2, #29
 80010ea:	4313      	orrs	r3, r2
 80010ec:	e5fa      	b.n	8000ce4 <__aeabi_dadd+0x2a4>
 80010ee:	2300      	movs	r3, #0
 80010f0:	4a01      	ldr	r2, [pc, #4]	; (80010f8 <__aeabi_dadd+0x6b8>)
 80010f2:	001c      	movs	r4, r3
 80010f4:	e540      	b.n	8000b78 <__aeabi_dadd+0x138>
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	000007ff 	.word	0x000007ff
 80010fc:	ff7fffff 	.word	0xff7fffff

08001100 <__aeabi_dmul>:
 8001100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001102:	4645      	mov	r5, r8
 8001104:	46de      	mov	lr, fp
 8001106:	4657      	mov	r7, sl
 8001108:	464e      	mov	r6, r9
 800110a:	b5e0      	push	{r5, r6, r7, lr}
 800110c:	001f      	movs	r7, r3
 800110e:	030b      	lsls	r3, r1, #12
 8001110:	0b1b      	lsrs	r3, r3, #12
 8001112:	469b      	mov	fp, r3
 8001114:	004d      	lsls	r5, r1, #1
 8001116:	0fcb      	lsrs	r3, r1, #31
 8001118:	0004      	movs	r4, r0
 800111a:	4691      	mov	r9, r2
 800111c:	4698      	mov	r8, r3
 800111e:	b087      	sub	sp, #28
 8001120:	0d6d      	lsrs	r5, r5, #21
 8001122:	d100      	bne.n	8001126 <__aeabi_dmul+0x26>
 8001124:	e1cd      	b.n	80014c2 <__aeabi_dmul+0x3c2>
 8001126:	4bce      	ldr	r3, [pc, #824]	; (8001460 <__aeabi_dmul+0x360>)
 8001128:	429d      	cmp	r5, r3
 800112a:	d100      	bne.n	800112e <__aeabi_dmul+0x2e>
 800112c:	e1e9      	b.n	8001502 <__aeabi_dmul+0x402>
 800112e:	465a      	mov	r2, fp
 8001130:	0f43      	lsrs	r3, r0, #29
 8001132:	00d2      	lsls	r2, r2, #3
 8001134:	4313      	orrs	r3, r2
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	0412      	lsls	r2, r2, #16
 800113a:	431a      	orrs	r2, r3
 800113c:	00c3      	lsls	r3, r0, #3
 800113e:	469a      	mov	sl, r3
 8001140:	4bc8      	ldr	r3, [pc, #800]	; (8001464 <__aeabi_dmul+0x364>)
 8001142:	4693      	mov	fp, r2
 8001144:	469c      	mov	ip, r3
 8001146:	2300      	movs	r3, #0
 8001148:	2600      	movs	r6, #0
 800114a:	4465      	add	r5, ip
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	033c      	lsls	r4, r7, #12
 8001150:	007b      	lsls	r3, r7, #1
 8001152:	4648      	mov	r0, r9
 8001154:	0b24      	lsrs	r4, r4, #12
 8001156:	0d5b      	lsrs	r3, r3, #21
 8001158:	0fff      	lsrs	r7, r7, #31
 800115a:	2b00      	cmp	r3, #0
 800115c:	d100      	bne.n	8001160 <__aeabi_dmul+0x60>
 800115e:	e189      	b.n	8001474 <__aeabi_dmul+0x374>
 8001160:	4abf      	ldr	r2, [pc, #764]	; (8001460 <__aeabi_dmul+0x360>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d019      	beq.n	800119a <__aeabi_dmul+0x9a>
 8001166:	0f42      	lsrs	r2, r0, #29
 8001168:	00e4      	lsls	r4, r4, #3
 800116a:	4322      	orrs	r2, r4
 800116c:	2480      	movs	r4, #128	; 0x80
 800116e:	0424      	lsls	r4, r4, #16
 8001170:	4314      	orrs	r4, r2
 8001172:	4abc      	ldr	r2, [pc, #752]	; (8001464 <__aeabi_dmul+0x364>)
 8001174:	2100      	movs	r1, #0
 8001176:	4694      	mov	ip, r2
 8001178:	4642      	mov	r2, r8
 800117a:	4463      	add	r3, ip
 800117c:	195b      	adds	r3, r3, r5
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	9b01      	ldr	r3, [sp, #4]
 8001182:	407a      	eors	r2, r7
 8001184:	3301      	adds	r3, #1
 8001186:	00c0      	lsls	r0, r0, #3
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2e0a      	cmp	r6, #10
 800118e:	dd1c      	ble.n	80011ca <__aeabi_dmul+0xca>
 8001190:	003a      	movs	r2, r7
 8001192:	2e0b      	cmp	r6, #11
 8001194:	d05e      	beq.n	8001254 <__aeabi_dmul+0x154>
 8001196:	4647      	mov	r7, r8
 8001198:	e056      	b.n	8001248 <__aeabi_dmul+0x148>
 800119a:	4649      	mov	r1, r9
 800119c:	4bb0      	ldr	r3, [pc, #704]	; (8001460 <__aeabi_dmul+0x360>)
 800119e:	4321      	orrs	r1, r4
 80011a0:	18eb      	adds	r3, r5, r3
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	2900      	cmp	r1, #0
 80011a6:	d12a      	bne.n	80011fe <__aeabi_dmul+0xfe>
 80011a8:	2080      	movs	r0, #128	; 0x80
 80011aa:	2202      	movs	r2, #2
 80011ac:	0100      	lsls	r0, r0, #4
 80011ae:	002b      	movs	r3, r5
 80011b0:	4684      	mov	ip, r0
 80011b2:	4316      	orrs	r6, r2
 80011b4:	4642      	mov	r2, r8
 80011b6:	4463      	add	r3, ip
 80011b8:	407a      	eors	r2, r7
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	2e0a      	cmp	r6, #10
 80011c0:	dd00      	ble.n	80011c4 <__aeabi_dmul+0xc4>
 80011c2:	e231      	b.n	8001628 <__aeabi_dmul+0x528>
 80011c4:	2000      	movs	r0, #0
 80011c6:	2400      	movs	r4, #0
 80011c8:	2102      	movs	r1, #2
 80011ca:	2e02      	cmp	r6, #2
 80011cc:	dc26      	bgt.n	800121c <__aeabi_dmul+0x11c>
 80011ce:	3e01      	subs	r6, #1
 80011d0:	2e01      	cmp	r6, #1
 80011d2:	d852      	bhi.n	800127a <__aeabi_dmul+0x17a>
 80011d4:	2902      	cmp	r1, #2
 80011d6:	d04c      	beq.n	8001272 <__aeabi_dmul+0x172>
 80011d8:	2901      	cmp	r1, #1
 80011da:	d000      	beq.n	80011de <__aeabi_dmul+0xde>
 80011dc:	e118      	b.n	8001410 <__aeabi_dmul+0x310>
 80011de:	2300      	movs	r3, #0
 80011e0:	2400      	movs	r4, #0
 80011e2:	2500      	movs	r5, #0
 80011e4:	051b      	lsls	r3, r3, #20
 80011e6:	4323      	orrs	r3, r4
 80011e8:	07d2      	lsls	r2, r2, #31
 80011ea:	4313      	orrs	r3, r2
 80011ec:	0028      	movs	r0, r5
 80011ee:	0019      	movs	r1, r3
 80011f0:	b007      	add	sp, #28
 80011f2:	bcf0      	pop	{r4, r5, r6, r7}
 80011f4:	46bb      	mov	fp, r7
 80011f6:	46b2      	mov	sl, r6
 80011f8:	46a9      	mov	r9, r5
 80011fa:	46a0      	mov	r8, r4
 80011fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011fe:	2180      	movs	r1, #128	; 0x80
 8001200:	2203      	movs	r2, #3
 8001202:	0109      	lsls	r1, r1, #4
 8001204:	002b      	movs	r3, r5
 8001206:	468c      	mov	ip, r1
 8001208:	4316      	orrs	r6, r2
 800120a:	4642      	mov	r2, r8
 800120c:	4463      	add	r3, ip
 800120e:	407a      	eors	r2, r7
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	2e0a      	cmp	r6, #10
 8001216:	dd00      	ble.n	800121a <__aeabi_dmul+0x11a>
 8001218:	e228      	b.n	800166c <__aeabi_dmul+0x56c>
 800121a:	2103      	movs	r1, #3
 800121c:	2501      	movs	r5, #1
 800121e:	40b5      	lsls	r5, r6
 8001220:	46ac      	mov	ip, r5
 8001222:	26a6      	movs	r6, #166	; 0xa6
 8001224:	4663      	mov	r3, ip
 8001226:	00f6      	lsls	r6, r6, #3
 8001228:	4035      	ands	r5, r6
 800122a:	4233      	tst	r3, r6
 800122c:	d10b      	bne.n	8001246 <__aeabi_dmul+0x146>
 800122e:	2690      	movs	r6, #144	; 0x90
 8001230:	00b6      	lsls	r6, r6, #2
 8001232:	4233      	tst	r3, r6
 8001234:	d118      	bne.n	8001268 <__aeabi_dmul+0x168>
 8001236:	3eb9      	subs	r6, #185	; 0xb9
 8001238:	3eff      	subs	r6, #255	; 0xff
 800123a:	421e      	tst	r6, r3
 800123c:	d01d      	beq.n	800127a <__aeabi_dmul+0x17a>
 800123e:	46a3      	mov	fp, r4
 8001240:	4682      	mov	sl, r0
 8001242:	9100      	str	r1, [sp, #0]
 8001244:	e000      	b.n	8001248 <__aeabi_dmul+0x148>
 8001246:	0017      	movs	r7, r2
 8001248:	9900      	ldr	r1, [sp, #0]
 800124a:	003a      	movs	r2, r7
 800124c:	2902      	cmp	r1, #2
 800124e:	d010      	beq.n	8001272 <__aeabi_dmul+0x172>
 8001250:	465c      	mov	r4, fp
 8001252:	4650      	mov	r0, sl
 8001254:	2903      	cmp	r1, #3
 8001256:	d1bf      	bne.n	80011d8 <__aeabi_dmul+0xd8>
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	031b      	lsls	r3, r3, #12
 800125c:	431c      	orrs	r4, r3
 800125e:	0324      	lsls	r4, r4, #12
 8001260:	0005      	movs	r5, r0
 8001262:	4b7f      	ldr	r3, [pc, #508]	; (8001460 <__aeabi_dmul+0x360>)
 8001264:	0b24      	lsrs	r4, r4, #12
 8001266:	e7bd      	b.n	80011e4 <__aeabi_dmul+0xe4>
 8001268:	2480      	movs	r4, #128	; 0x80
 800126a:	2200      	movs	r2, #0
 800126c:	4b7c      	ldr	r3, [pc, #496]	; (8001460 <__aeabi_dmul+0x360>)
 800126e:	0324      	lsls	r4, r4, #12
 8001270:	e7b8      	b.n	80011e4 <__aeabi_dmul+0xe4>
 8001272:	2400      	movs	r4, #0
 8001274:	2500      	movs	r5, #0
 8001276:	4b7a      	ldr	r3, [pc, #488]	; (8001460 <__aeabi_dmul+0x360>)
 8001278:	e7b4      	b.n	80011e4 <__aeabi_dmul+0xe4>
 800127a:	4653      	mov	r3, sl
 800127c:	041e      	lsls	r6, r3, #16
 800127e:	0c36      	lsrs	r6, r6, #16
 8001280:	0c1f      	lsrs	r7, r3, #16
 8001282:	0033      	movs	r3, r6
 8001284:	0c01      	lsrs	r1, r0, #16
 8001286:	0400      	lsls	r0, r0, #16
 8001288:	0c00      	lsrs	r0, r0, #16
 800128a:	4343      	muls	r3, r0
 800128c:	4698      	mov	r8, r3
 800128e:	0003      	movs	r3, r0
 8001290:	437b      	muls	r3, r7
 8001292:	4699      	mov	r9, r3
 8001294:	0033      	movs	r3, r6
 8001296:	434b      	muls	r3, r1
 8001298:	469c      	mov	ip, r3
 800129a:	4643      	mov	r3, r8
 800129c:	000d      	movs	r5, r1
 800129e:	0c1b      	lsrs	r3, r3, #16
 80012a0:	469a      	mov	sl, r3
 80012a2:	437d      	muls	r5, r7
 80012a4:	44cc      	add	ip, r9
 80012a6:	44d4      	add	ip, sl
 80012a8:	9500      	str	r5, [sp, #0]
 80012aa:	45e1      	cmp	r9, ip
 80012ac:	d904      	bls.n	80012b8 <__aeabi_dmul+0x1b8>
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	025b      	lsls	r3, r3, #9
 80012b2:	4699      	mov	r9, r3
 80012b4:	444d      	add	r5, r9
 80012b6:	9500      	str	r5, [sp, #0]
 80012b8:	4663      	mov	r3, ip
 80012ba:	0c1b      	lsrs	r3, r3, #16
 80012bc:	001d      	movs	r5, r3
 80012be:	4663      	mov	r3, ip
 80012c0:	041b      	lsls	r3, r3, #16
 80012c2:	469c      	mov	ip, r3
 80012c4:	4643      	mov	r3, r8
 80012c6:	041b      	lsls	r3, r3, #16
 80012c8:	0c1b      	lsrs	r3, r3, #16
 80012ca:	4698      	mov	r8, r3
 80012cc:	4663      	mov	r3, ip
 80012ce:	4443      	add	r3, r8
 80012d0:	9303      	str	r3, [sp, #12]
 80012d2:	0c23      	lsrs	r3, r4, #16
 80012d4:	4698      	mov	r8, r3
 80012d6:	0033      	movs	r3, r6
 80012d8:	0424      	lsls	r4, r4, #16
 80012da:	0c24      	lsrs	r4, r4, #16
 80012dc:	4363      	muls	r3, r4
 80012de:	469c      	mov	ip, r3
 80012e0:	0023      	movs	r3, r4
 80012e2:	437b      	muls	r3, r7
 80012e4:	4699      	mov	r9, r3
 80012e6:	4643      	mov	r3, r8
 80012e8:	435e      	muls	r6, r3
 80012ea:	435f      	muls	r7, r3
 80012ec:	444e      	add	r6, r9
 80012ee:	4663      	mov	r3, ip
 80012f0:	46b2      	mov	sl, r6
 80012f2:	0c1e      	lsrs	r6, r3, #16
 80012f4:	4456      	add	r6, sl
 80012f6:	45b1      	cmp	r9, r6
 80012f8:	d903      	bls.n	8001302 <__aeabi_dmul+0x202>
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	025b      	lsls	r3, r3, #9
 80012fe:	4699      	mov	r9, r3
 8001300:	444f      	add	r7, r9
 8001302:	0c33      	lsrs	r3, r6, #16
 8001304:	4699      	mov	r9, r3
 8001306:	003b      	movs	r3, r7
 8001308:	444b      	add	r3, r9
 800130a:	9305      	str	r3, [sp, #20]
 800130c:	4663      	mov	r3, ip
 800130e:	46ac      	mov	ip, r5
 8001310:	041f      	lsls	r7, r3, #16
 8001312:	0c3f      	lsrs	r7, r7, #16
 8001314:	0436      	lsls	r6, r6, #16
 8001316:	19f6      	adds	r6, r6, r7
 8001318:	44b4      	add	ip, r6
 800131a:	4663      	mov	r3, ip
 800131c:	9304      	str	r3, [sp, #16]
 800131e:	465b      	mov	r3, fp
 8001320:	0c1b      	lsrs	r3, r3, #16
 8001322:	469c      	mov	ip, r3
 8001324:	465b      	mov	r3, fp
 8001326:	041f      	lsls	r7, r3, #16
 8001328:	0c3f      	lsrs	r7, r7, #16
 800132a:	003b      	movs	r3, r7
 800132c:	4343      	muls	r3, r0
 800132e:	4699      	mov	r9, r3
 8001330:	4663      	mov	r3, ip
 8001332:	4343      	muls	r3, r0
 8001334:	469a      	mov	sl, r3
 8001336:	464b      	mov	r3, r9
 8001338:	4660      	mov	r0, ip
 800133a:	0c1b      	lsrs	r3, r3, #16
 800133c:	469b      	mov	fp, r3
 800133e:	4348      	muls	r0, r1
 8001340:	4379      	muls	r1, r7
 8001342:	4451      	add	r1, sl
 8001344:	4459      	add	r1, fp
 8001346:	458a      	cmp	sl, r1
 8001348:	d903      	bls.n	8001352 <__aeabi_dmul+0x252>
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	025b      	lsls	r3, r3, #9
 800134e:	469a      	mov	sl, r3
 8001350:	4450      	add	r0, sl
 8001352:	0c0b      	lsrs	r3, r1, #16
 8001354:	469a      	mov	sl, r3
 8001356:	464b      	mov	r3, r9
 8001358:	041b      	lsls	r3, r3, #16
 800135a:	0c1b      	lsrs	r3, r3, #16
 800135c:	4699      	mov	r9, r3
 800135e:	003b      	movs	r3, r7
 8001360:	4363      	muls	r3, r4
 8001362:	0409      	lsls	r1, r1, #16
 8001364:	4645      	mov	r5, r8
 8001366:	4449      	add	r1, r9
 8001368:	4699      	mov	r9, r3
 800136a:	4663      	mov	r3, ip
 800136c:	435c      	muls	r4, r3
 800136e:	436b      	muls	r3, r5
 8001370:	469c      	mov	ip, r3
 8001372:	464b      	mov	r3, r9
 8001374:	0c1b      	lsrs	r3, r3, #16
 8001376:	4698      	mov	r8, r3
 8001378:	436f      	muls	r7, r5
 800137a:	193f      	adds	r7, r7, r4
 800137c:	4447      	add	r7, r8
 800137e:	4450      	add	r0, sl
 8001380:	42bc      	cmp	r4, r7
 8001382:	d903      	bls.n	800138c <__aeabi_dmul+0x28c>
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	025b      	lsls	r3, r3, #9
 8001388:	4698      	mov	r8, r3
 800138a:	44c4      	add	ip, r8
 800138c:	9b04      	ldr	r3, [sp, #16]
 800138e:	9d00      	ldr	r5, [sp, #0]
 8001390:	4698      	mov	r8, r3
 8001392:	4445      	add	r5, r8
 8001394:	42b5      	cmp	r5, r6
 8001396:	41b6      	sbcs	r6, r6
 8001398:	4273      	negs	r3, r6
 800139a:	4698      	mov	r8, r3
 800139c:	464b      	mov	r3, r9
 800139e:	041e      	lsls	r6, r3, #16
 80013a0:	9b05      	ldr	r3, [sp, #20]
 80013a2:	043c      	lsls	r4, r7, #16
 80013a4:	4699      	mov	r9, r3
 80013a6:	0c36      	lsrs	r6, r6, #16
 80013a8:	19a4      	adds	r4, r4, r6
 80013aa:	444c      	add	r4, r9
 80013ac:	46a1      	mov	r9, r4
 80013ae:	4683      	mov	fp, r0
 80013b0:	186e      	adds	r6, r5, r1
 80013b2:	44c1      	add	r9, r8
 80013b4:	428e      	cmp	r6, r1
 80013b6:	4189      	sbcs	r1, r1
 80013b8:	44cb      	add	fp, r9
 80013ba:	465d      	mov	r5, fp
 80013bc:	4249      	negs	r1, r1
 80013be:	186d      	adds	r5, r5, r1
 80013c0:	429c      	cmp	r4, r3
 80013c2:	41a4      	sbcs	r4, r4
 80013c4:	45c1      	cmp	r9, r8
 80013c6:	419b      	sbcs	r3, r3
 80013c8:	4583      	cmp	fp, r0
 80013ca:	4180      	sbcs	r0, r0
 80013cc:	428d      	cmp	r5, r1
 80013ce:	4189      	sbcs	r1, r1
 80013d0:	425b      	negs	r3, r3
 80013d2:	4264      	negs	r4, r4
 80013d4:	431c      	orrs	r4, r3
 80013d6:	4240      	negs	r0, r0
 80013d8:	9b03      	ldr	r3, [sp, #12]
 80013da:	4249      	negs	r1, r1
 80013dc:	4301      	orrs	r1, r0
 80013de:	0270      	lsls	r0, r6, #9
 80013e0:	0c3f      	lsrs	r7, r7, #16
 80013e2:	4318      	orrs	r0, r3
 80013e4:	19e4      	adds	r4, r4, r7
 80013e6:	1e47      	subs	r7, r0, #1
 80013e8:	41b8      	sbcs	r0, r7
 80013ea:	1864      	adds	r4, r4, r1
 80013ec:	4464      	add	r4, ip
 80013ee:	0df6      	lsrs	r6, r6, #23
 80013f0:	0261      	lsls	r1, r4, #9
 80013f2:	4330      	orrs	r0, r6
 80013f4:	0dec      	lsrs	r4, r5, #23
 80013f6:	026e      	lsls	r6, r5, #9
 80013f8:	430c      	orrs	r4, r1
 80013fa:	4330      	orrs	r0, r6
 80013fc:	01c9      	lsls	r1, r1, #7
 80013fe:	d400      	bmi.n	8001402 <__aeabi_dmul+0x302>
 8001400:	e0f1      	b.n	80015e6 <__aeabi_dmul+0x4e6>
 8001402:	2101      	movs	r1, #1
 8001404:	0843      	lsrs	r3, r0, #1
 8001406:	4001      	ands	r1, r0
 8001408:	430b      	orrs	r3, r1
 800140a:	07e0      	lsls	r0, r4, #31
 800140c:	4318      	orrs	r0, r3
 800140e:	0864      	lsrs	r4, r4, #1
 8001410:	4915      	ldr	r1, [pc, #84]	; (8001468 <__aeabi_dmul+0x368>)
 8001412:	9b02      	ldr	r3, [sp, #8]
 8001414:	468c      	mov	ip, r1
 8001416:	4463      	add	r3, ip
 8001418:	2b00      	cmp	r3, #0
 800141a:	dc00      	bgt.n	800141e <__aeabi_dmul+0x31e>
 800141c:	e097      	b.n	800154e <__aeabi_dmul+0x44e>
 800141e:	0741      	lsls	r1, r0, #29
 8001420:	d009      	beq.n	8001436 <__aeabi_dmul+0x336>
 8001422:	210f      	movs	r1, #15
 8001424:	4001      	ands	r1, r0
 8001426:	2904      	cmp	r1, #4
 8001428:	d005      	beq.n	8001436 <__aeabi_dmul+0x336>
 800142a:	1d01      	adds	r1, r0, #4
 800142c:	4281      	cmp	r1, r0
 800142e:	4180      	sbcs	r0, r0
 8001430:	4240      	negs	r0, r0
 8001432:	1824      	adds	r4, r4, r0
 8001434:	0008      	movs	r0, r1
 8001436:	01e1      	lsls	r1, r4, #7
 8001438:	d506      	bpl.n	8001448 <__aeabi_dmul+0x348>
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	00c9      	lsls	r1, r1, #3
 800143e:	468c      	mov	ip, r1
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <__aeabi_dmul+0x36c>)
 8001442:	401c      	ands	r4, r3
 8001444:	9b02      	ldr	r3, [sp, #8]
 8001446:	4463      	add	r3, ip
 8001448:	4909      	ldr	r1, [pc, #36]	; (8001470 <__aeabi_dmul+0x370>)
 800144a:	428b      	cmp	r3, r1
 800144c:	dd00      	ble.n	8001450 <__aeabi_dmul+0x350>
 800144e:	e710      	b.n	8001272 <__aeabi_dmul+0x172>
 8001450:	0761      	lsls	r1, r4, #29
 8001452:	08c5      	lsrs	r5, r0, #3
 8001454:	0264      	lsls	r4, r4, #9
 8001456:	055b      	lsls	r3, r3, #21
 8001458:	430d      	orrs	r5, r1
 800145a:	0b24      	lsrs	r4, r4, #12
 800145c:	0d5b      	lsrs	r3, r3, #21
 800145e:	e6c1      	b.n	80011e4 <__aeabi_dmul+0xe4>
 8001460:	000007ff 	.word	0x000007ff
 8001464:	fffffc01 	.word	0xfffffc01
 8001468:	000003ff 	.word	0x000003ff
 800146c:	feffffff 	.word	0xfeffffff
 8001470:	000007fe 	.word	0x000007fe
 8001474:	464b      	mov	r3, r9
 8001476:	4323      	orrs	r3, r4
 8001478:	d059      	beq.n	800152e <__aeabi_dmul+0x42e>
 800147a:	2c00      	cmp	r4, #0
 800147c:	d100      	bne.n	8001480 <__aeabi_dmul+0x380>
 800147e:	e0a3      	b.n	80015c8 <__aeabi_dmul+0x4c8>
 8001480:	0020      	movs	r0, r4
 8001482:	f000 fd7f 	bl	8001f84 <__clzsi2>
 8001486:	0001      	movs	r1, r0
 8001488:	0003      	movs	r3, r0
 800148a:	390b      	subs	r1, #11
 800148c:	221d      	movs	r2, #29
 800148e:	1a52      	subs	r2, r2, r1
 8001490:	4649      	mov	r1, r9
 8001492:	0018      	movs	r0, r3
 8001494:	40d1      	lsrs	r1, r2
 8001496:	464a      	mov	r2, r9
 8001498:	3808      	subs	r0, #8
 800149a:	4082      	lsls	r2, r0
 800149c:	4084      	lsls	r4, r0
 800149e:	0010      	movs	r0, r2
 80014a0:	430c      	orrs	r4, r1
 80014a2:	4a74      	ldr	r2, [pc, #464]	; (8001674 <__aeabi_dmul+0x574>)
 80014a4:	1aeb      	subs	r3, r5, r3
 80014a6:	4694      	mov	ip, r2
 80014a8:	4642      	mov	r2, r8
 80014aa:	4463      	add	r3, ip
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	9b01      	ldr	r3, [sp, #4]
 80014b0:	407a      	eors	r2, r7
 80014b2:	3301      	adds	r3, #1
 80014b4:	2100      	movs	r1, #0
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	2e0a      	cmp	r6, #10
 80014bc:	dd00      	ble.n	80014c0 <__aeabi_dmul+0x3c0>
 80014be:	e667      	b.n	8001190 <__aeabi_dmul+0x90>
 80014c0:	e683      	b.n	80011ca <__aeabi_dmul+0xca>
 80014c2:	465b      	mov	r3, fp
 80014c4:	4303      	orrs	r3, r0
 80014c6:	469a      	mov	sl, r3
 80014c8:	d02a      	beq.n	8001520 <__aeabi_dmul+0x420>
 80014ca:	465b      	mov	r3, fp
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d06d      	beq.n	80015ac <__aeabi_dmul+0x4ac>
 80014d0:	4658      	mov	r0, fp
 80014d2:	f000 fd57 	bl	8001f84 <__clzsi2>
 80014d6:	0001      	movs	r1, r0
 80014d8:	0003      	movs	r3, r0
 80014da:	390b      	subs	r1, #11
 80014dc:	221d      	movs	r2, #29
 80014de:	1a52      	subs	r2, r2, r1
 80014e0:	0021      	movs	r1, r4
 80014e2:	0018      	movs	r0, r3
 80014e4:	465d      	mov	r5, fp
 80014e6:	40d1      	lsrs	r1, r2
 80014e8:	3808      	subs	r0, #8
 80014ea:	4085      	lsls	r5, r0
 80014ec:	000a      	movs	r2, r1
 80014ee:	4084      	lsls	r4, r0
 80014f0:	432a      	orrs	r2, r5
 80014f2:	4693      	mov	fp, r2
 80014f4:	46a2      	mov	sl, r4
 80014f6:	4d5f      	ldr	r5, [pc, #380]	; (8001674 <__aeabi_dmul+0x574>)
 80014f8:	2600      	movs	r6, #0
 80014fa:	1aed      	subs	r5, r5, r3
 80014fc:	2300      	movs	r3, #0
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	e625      	b.n	800114e <__aeabi_dmul+0x4e>
 8001502:	465b      	mov	r3, fp
 8001504:	4303      	orrs	r3, r0
 8001506:	469a      	mov	sl, r3
 8001508:	d105      	bne.n	8001516 <__aeabi_dmul+0x416>
 800150a:	2300      	movs	r3, #0
 800150c:	469b      	mov	fp, r3
 800150e:	3302      	adds	r3, #2
 8001510:	2608      	movs	r6, #8
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	e61b      	b.n	800114e <__aeabi_dmul+0x4e>
 8001516:	2303      	movs	r3, #3
 8001518:	4682      	mov	sl, r0
 800151a:	260c      	movs	r6, #12
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	e616      	b.n	800114e <__aeabi_dmul+0x4e>
 8001520:	2300      	movs	r3, #0
 8001522:	469b      	mov	fp, r3
 8001524:	3301      	adds	r3, #1
 8001526:	2604      	movs	r6, #4
 8001528:	2500      	movs	r5, #0
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	e60f      	b.n	800114e <__aeabi_dmul+0x4e>
 800152e:	4642      	mov	r2, r8
 8001530:	3301      	adds	r3, #1
 8001532:	9501      	str	r5, [sp, #4]
 8001534:	431e      	orrs	r6, r3
 8001536:	9b01      	ldr	r3, [sp, #4]
 8001538:	407a      	eors	r2, r7
 800153a:	3301      	adds	r3, #1
 800153c:	2400      	movs	r4, #0
 800153e:	2000      	movs	r0, #0
 8001540:	2101      	movs	r1, #1
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	2e0a      	cmp	r6, #10
 8001548:	dd00      	ble.n	800154c <__aeabi_dmul+0x44c>
 800154a:	e621      	b.n	8001190 <__aeabi_dmul+0x90>
 800154c:	e63d      	b.n	80011ca <__aeabi_dmul+0xca>
 800154e:	2101      	movs	r1, #1
 8001550:	1ac9      	subs	r1, r1, r3
 8001552:	2938      	cmp	r1, #56	; 0x38
 8001554:	dd00      	ble.n	8001558 <__aeabi_dmul+0x458>
 8001556:	e642      	b.n	80011de <__aeabi_dmul+0xde>
 8001558:	291f      	cmp	r1, #31
 800155a:	dd47      	ble.n	80015ec <__aeabi_dmul+0x4ec>
 800155c:	261f      	movs	r6, #31
 800155e:	0025      	movs	r5, r4
 8001560:	4276      	negs	r6, r6
 8001562:	1af3      	subs	r3, r6, r3
 8001564:	40dd      	lsrs	r5, r3
 8001566:	002b      	movs	r3, r5
 8001568:	2920      	cmp	r1, #32
 800156a:	d005      	beq.n	8001578 <__aeabi_dmul+0x478>
 800156c:	4942      	ldr	r1, [pc, #264]	; (8001678 <__aeabi_dmul+0x578>)
 800156e:	9d02      	ldr	r5, [sp, #8]
 8001570:	468c      	mov	ip, r1
 8001572:	4465      	add	r5, ip
 8001574:	40ac      	lsls	r4, r5
 8001576:	4320      	orrs	r0, r4
 8001578:	1e41      	subs	r1, r0, #1
 800157a:	4188      	sbcs	r0, r1
 800157c:	4318      	orrs	r0, r3
 800157e:	2307      	movs	r3, #7
 8001580:	001d      	movs	r5, r3
 8001582:	2400      	movs	r4, #0
 8001584:	4005      	ands	r5, r0
 8001586:	4203      	tst	r3, r0
 8001588:	d04a      	beq.n	8001620 <__aeabi_dmul+0x520>
 800158a:	230f      	movs	r3, #15
 800158c:	2400      	movs	r4, #0
 800158e:	4003      	ands	r3, r0
 8001590:	2b04      	cmp	r3, #4
 8001592:	d042      	beq.n	800161a <__aeabi_dmul+0x51a>
 8001594:	1d03      	adds	r3, r0, #4
 8001596:	4283      	cmp	r3, r0
 8001598:	4180      	sbcs	r0, r0
 800159a:	4240      	negs	r0, r0
 800159c:	1824      	adds	r4, r4, r0
 800159e:	0018      	movs	r0, r3
 80015a0:	0223      	lsls	r3, r4, #8
 80015a2:	d53a      	bpl.n	800161a <__aeabi_dmul+0x51a>
 80015a4:	2301      	movs	r3, #1
 80015a6:	2400      	movs	r4, #0
 80015a8:	2500      	movs	r5, #0
 80015aa:	e61b      	b.n	80011e4 <__aeabi_dmul+0xe4>
 80015ac:	f000 fcea 	bl	8001f84 <__clzsi2>
 80015b0:	0001      	movs	r1, r0
 80015b2:	0003      	movs	r3, r0
 80015b4:	3115      	adds	r1, #21
 80015b6:	3320      	adds	r3, #32
 80015b8:	291c      	cmp	r1, #28
 80015ba:	dd8f      	ble.n	80014dc <__aeabi_dmul+0x3dc>
 80015bc:	3808      	subs	r0, #8
 80015be:	2200      	movs	r2, #0
 80015c0:	4084      	lsls	r4, r0
 80015c2:	4692      	mov	sl, r2
 80015c4:	46a3      	mov	fp, r4
 80015c6:	e796      	b.n	80014f6 <__aeabi_dmul+0x3f6>
 80015c8:	f000 fcdc 	bl	8001f84 <__clzsi2>
 80015cc:	0001      	movs	r1, r0
 80015ce:	0003      	movs	r3, r0
 80015d0:	3115      	adds	r1, #21
 80015d2:	3320      	adds	r3, #32
 80015d4:	291c      	cmp	r1, #28
 80015d6:	dc00      	bgt.n	80015da <__aeabi_dmul+0x4da>
 80015d8:	e758      	b.n	800148c <__aeabi_dmul+0x38c>
 80015da:	0002      	movs	r2, r0
 80015dc:	464c      	mov	r4, r9
 80015de:	3a08      	subs	r2, #8
 80015e0:	2000      	movs	r0, #0
 80015e2:	4094      	lsls	r4, r2
 80015e4:	e75d      	b.n	80014a2 <__aeabi_dmul+0x3a2>
 80015e6:	9b01      	ldr	r3, [sp, #4]
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	e711      	b.n	8001410 <__aeabi_dmul+0x310>
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <__aeabi_dmul+0x57c>)
 80015ee:	0026      	movs	r6, r4
 80015f0:	469c      	mov	ip, r3
 80015f2:	0003      	movs	r3, r0
 80015f4:	9d02      	ldr	r5, [sp, #8]
 80015f6:	40cb      	lsrs	r3, r1
 80015f8:	4465      	add	r5, ip
 80015fa:	40ae      	lsls	r6, r5
 80015fc:	431e      	orrs	r6, r3
 80015fe:	0003      	movs	r3, r0
 8001600:	40ab      	lsls	r3, r5
 8001602:	1e58      	subs	r0, r3, #1
 8001604:	4183      	sbcs	r3, r0
 8001606:	0030      	movs	r0, r6
 8001608:	4318      	orrs	r0, r3
 800160a:	40cc      	lsrs	r4, r1
 800160c:	0743      	lsls	r3, r0, #29
 800160e:	d0c7      	beq.n	80015a0 <__aeabi_dmul+0x4a0>
 8001610:	230f      	movs	r3, #15
 8001612:	4003      	ands	r3, r0
 8001614:	2b04      	cmp	r3, #4
 8001616:	d1bd      	bne.n	8001594 <__aeabi_dmul+0x494>
 8001618:	e7c2      	b.n	80015a0 <__aeabi_dmul+0x4a0>
 800161a:	0765      	lsls	r5, r4, #29
 800161c:	0264      	lsls	r4, r4, #9
 800161e:	0b24      	lsrs	r4, r4, #12
 8001620:	08c0      	lsrs	r0, r0, #3
 8001622:	2300      	movs	r3, #0
 8001624:	4305      	orrs	r5, r0
 8001626:	e5dd      	b.n	80011e4 <__aeabi_dmul+0xe4>
 8001628:	2500      	movs	r5, #0
 800162a:	2302      	movs	r3, #2
 800162c:	2e0f      	cmp	r6, #15
 800162e:	d10c      	bne.n	800164a <__aeabi_dmul+0x54a>
 8001630:	2480      	movs	r4, #128	; 0x80
 8001632:	465b      	mov	r3, fp
 8001634:	0324      	lsls	r4, r4, #12
 8001636:	4223      	tst	r3, r4
 8001638:	d00e      	beq.n	8001658 <__aeabi_dmul+0x558>
 800163a:	4221      	tst	r1, r4
 800163c:	d10c      	bne.n	8001658 <__aeabi_dmul+0x558>
 800163e:	430c      	orrs	r4, r1
 8001640:	0324      	lsls	r4, r4, #12
 8001642:	003a      	movs	r2, r7
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <__aeabi_dmul+0x580>)
 8001646:	0b24      	lsrs	r4, r4, #12
 8001648:	e5cc      	b.n	80011e4 <__aeabi_dmul+0xe4>
 800164a:	2e0b      	cmp	r6, #11
 800164c:	d000      	beq.n	8001650 <__aeabi_dmul+0x550>
 800164e:	e5a2      	b.n	8001196 <__aeabi_dmul+0x96>
 8001650:	468b      	mov	fp, r1
 8001652:	46aa      	mov	sl, r5
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	e5f7      	b.n	8001248 <__aeabi_dmul+0x148>
 8001658:	2480      	movs	r4, #128	; 0x80
 800165a:	465b      	mov	r3, fp
 800165c:	0324      	lsls	r4, r4, #12
 800165e:	431c      	orrs	r4, r3
 8001660:	0324      	lsls	r4, r4, #12
 8001662:	4642      	mov	r2, r8
 8001664:	4655      	mov	r5, sl
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <__aeabi_dmul+0x580>)
 8001668:	0b24      	lsrs	r4, r4, #12
 800166a:	e5bb      	b.n	80011e4 <__aeabi_dmul+0xe4>
 800166c:	464d      	mov	r5, r9
 800166e:	0021      	movs	r1, r4
 8001670:	2303      	movs	r3, #3
 8001672:	e7db      	b.n	800162c <__aeabi_dmul+0x52c>
 8001674:	fffffc0d 	.word	0xfffffc0d
 8001678:	0000043e 	.word	0x0000043e
 800167c:	0000041e 	.word	0x0000041e
 8001680:	000007ff 	.word	0x000007ff

08001684 <__aeabi_dsub>:
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001686:	4657      	mov	r7, sl
 8001688:	464e      	mov	r6, r9
 800168a:	4645      	mov	r5, r8
 800168c:	46de      	mov	lr, fp
 800168e:	b5e0      	push	{r5, r6, r7, lr}
 8001690:	000d      	movs	r5, r1
 8001692:	0004      	movs	r4, r0
 8001694:	0019      	movs	r1, r3
 8001696:	0010      	movs	r0, r2
 8001698:	032b      	lsls	r3, r5, #12
 800169a:	0a5b      	lsrs	r3, r3, #9
 800169c:	0f62      	lsrs	r2, r4, #29
 800169e:	431a      	orrs	r2, r3
 80016a0:	00e3      	lsls	r3, r4, #3
 80016a2:	030c      	lsls	r4, r1, #12
 80016a4:	0a64      	lsrs	r4, r4, #9
 80016a6:	0f47      	lsrs	r7, r0, #29
 80016a8:	4327      	orrs	r7, r4
 80016aa:	4cd0      	ldr	r4, [pc, #832]	; (80019ec <__aeabi_dsub+0x368>)
 80016ac:	006e      	lsls	r6, r5, #1
 80016ae:	4691      	mov	r9, r2
 80016b0:	b083      	sub	sp, #12
 80016b2:	004a      	lsls	r2, r1, #1
 80016b4:	00c0      	lsls	r0, r0, #3
 80016b6:	4698      	mov	r8, r3
 80016b8:	46a2      	mov	sl, r4
 80016ba:	0d76      	lsrs	r6, r6, #21
 80016bc:	0fed      	lsrs	r5, r5, #31
 80016be:	0d52      	lsrs	r2, r2, #21
 80016c0:	0fc9      	lsrs	r1, r1, #31
 80016c2:	9001      	str	r0, [sp, #4]
 80016c4:	42a2      	cmp	r2, r4
 80016c6:	d100      	bne.n	80016ca <__aeabi_dsub+0x46>
 80016c8:	e0b9      	b.n	800183e <__aeabi_dsub+0x1ba>
 80016ca:	2401      	movs	r4, #1
 80016cc:	4061      	eors	r1, r4
 80016ce:	468b      	mov	fp, r1
 80016d0:	428d      	cmp	r5, r1
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dsub+0x52>
 80016d4:	e08d      	b.n	80017f2 <__aeabi_dsub+0x16e>
 80016d6:	1ab4      	subs	r4, r6, r2
 80016d8:	46a4      	mov	ip, r4
 80016da:	2c00      	cmp	r4, #0
 80016dc:	dc00      	bgt.n	80016e0 <__aeabi_dsub+0x5c>
 80016de:	e0b7      	b.n	8001850 <__aeabi_dsub+0x1cc>
 80016e0:	2a00      	cmp	r2, #0
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dsub+0x62>
 80016e4:	e0cb      	b.n	800187e <__aeabi_dsub+0x1fa>
 80016e6:	4ac1      	ldr	r2, [pc, #772]	; (80019ec <__aeabi_dsub+0x368>)
 80016e8:	4296      	cmp	r6, r2
 80016ea:	d100      	bne.n	80016ee <__aeabi_dsub+0x6a>
 80016ec:	e186      	b.n	80019fc <__aeabi_dsub+0x378>
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	0412      	lsls	r2, r2, #16
 80016f2:	4317      	orrs	r7, r2
 80016f4:	4662      	mov	r2, ip
 80016f6:	2a38      	cmp	r2, #56	; 0x38
 80016f8:	dd00      	ble.n	80016fc <__aeabi_dsub+0x78>
 80016fa:	e1a4      	b.n	8001a46 <__aeabi_dsub+0x3c2>
 80016fc:	2a1f      	cmp	r2, #31
 80016fe:	dd00      	ble.n	8001702 <__aeabi_dsub+0x7e>
 8001700:	e21d      	b.n	8001b3e <__aeabi_dsub+0x4ba>
 8001702:	4661      	mov	r1, ip
 8001704:	2220      	movs	r2, #32
 8001706:	003c      	movs	r4, r7
 8001708:	1a52      	subs	r2, r2, r1
 800170a:	0001      	movs	r1, r0
 800170c:	4090      	lsls	r0, r2
 800170e:	4094      	lsls	r4, r2
 8001710:	1e42      	subs	r2, r0, #1
 8001712:	4190      	sbcs	r0, r2
 8001714:	4662      	mov	r2, ip
 8001716:	46a0      	mov	r8, r4
 8001718:	4664      	mov	r4, ip
 800171a:	40d7      	lsrs	r7, r2
 800171c:	464a      	mov	r2, r9
 800171e:	40e1      	lsrs	r1, r4
 8001720:	4644      	mov	r4, r8
 8001722:	1bd2      	subs	r2, r2, r7
 8001724:	4691      	mov	r9, r2
 8001726:	430c      	orrs	r4, r1
 8001728:	4304      	orrs	r4, r0
 800172a:	1b1c      	subs	r4, r3, r4
 800172c:	42a3      	cmp	r3, r4
 800172e:	4192      	sbcs	r2, r2
 8001730:	464b      	mov	r3, r9
 8001732:	4252      	negs	r2, r2
 8001734:	1a9b      	subs	r3, r3, r2
 8001736:	469a      	mov	sl, r3
 8001738:	4653      	mov	r3, sl
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	d400      	bmi.n	8001740 <__aeabi_dsub+0xbc>
 800173e:	e12b      	b.n	8001998 <__aeabi_dsub+0x314>
 8001740:	4653      	mov	r3, sl
 8001742:	025a      	lsls	r2, r3, #9
 8001744:	0a53      	lsrs	r3, r2, #9
 8001746:	469a      	mov	sl, r3
 8001748:	4653      	mov	r3, sl
 800174a:	2b00      	cmp	r3, #0
 800174c:	d100      	bne.n	8001750 <__aeabi_dsub+0xcc>
 800174e:	e166      	b.n	8001a1e <__aeabi_dsub+0x39a>
 8001750:	4650      	mov	r0, sl
 8001752:	f000 fc17 	bl	8001f84 <__clzsi2>
 8001756:	0003      	movs	r3, r0
 8001758:	3b08      	subs	r3, #8
 800175a:	2220      	movs	r2, #32
 800175c:	0020      	movs	r0, r4
 800175e:	1ad2      	subs	r2, r2, r3
 8001760:	4651      	mov	r1, sl
 8001762:	40d0      	lsrs	r0, r2
 8001764:	4099      	lsls	r1, r3
 8001766:	0002      	movs	r2, r0
 8001768:	409c      	lsls	r4, r3
 800176a:	430a      	orrs	r2, r1
 800176c:	429e      	cmp	r6, r3
 800176e:	dd00      	ble.n	8001772 <__aeabi_dsub+0xee>
 8001770:	e164      	b.n	8001a3c <__aeabi_dsub+0x3b8>
 8001772:	1b9b      	subs	r3, r3, r6
 8001774:	1c59      	adds	r1, r3, #1
 8001776:	291f      	cmp	r1, #31
 8001778:	dd00      	ble.n	800177c <__aeabi_dsub+0xf8>
 800177a:	e0fe      	b.n	800197a <__aeabi_dsub+0x2f6>
 800177c:	2320      	movs	r3, #32
 800177e:	0010      	movs	r0, r2
 8001780:	0026      	movs	r6, r4
 8001782:	1a5b      	subs	r3, r3, r1
 8001784:	409c      	lsls	r4, r3
 8001786:	4098      	lsls	r0, r3
 8001788:	40ce      	lsrs	r6, r1
 800178a:	40ca      	lsrs	r2, r1
 800178c:	1e63      	subs	r3, r4, #1
 800178e:	419c      	sbcs	r4, r3
 8001790:	4330      	orrs	r0, r6
 8001792:	4692      	mov	sl, r2
 8001794:	2600      	movs	r6, #0
 8001796:	4304      	orrs	r4, r0
 8001798:	0763      	lsls	r3, r4, #29
 800179a:	d009      	beq.n	80017b0 <__aeabi_dsub+0x12c>
 800179c:	230f      	movs	r3, #15
 800179e:	4023      	ands	r3, r4
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d005      	beq.n	80017b0 <__aeabi_dsub+0x12c>
 80017a4:	1d23      	adds	r3, r4, #4
 80017a6:	42a3      	cmp	r3, r4
 80017a8:	41a4      	sbcs	r4, r4
 80017aa:	4264      	negs	r4, r4
 80017ac:	44a2      	add	sl, r4
 80017ae:	001c      	movs	r4, r3
 80017b0:	4653      	mov	r3, sl
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	d400      	bmi.n	80017b8 <__aeabi_dsub+0x134>
 80017b6:	e0f2      	b.n	800199e <__aeabi_dsub+0x31a>
 80017b8:	4b8c      	ldr	r3, [pc, #560]	; (80019ec <__aeabi_dsub+0x368>)
 80017ba:	3601      	adds	r6, #1
 80017bc:	429e      	cmp	r6, r3
 80017be:	d100      	bne.n	80017c2 <__aeabi_dsub+0x13e>
 80017c0:	e10f      	b.n	80019e2 <__aeabi_dsub+0x35e>
 80017c2:	4653      	mov	r3, sl
 80017c4:	498a      	ldr	r1, [pc, #552]	; (80019f0 <__aeabi_dsub+0x36c>)
 80017c6:	08e4      	lsrs	r4, r4, #3
 80017c8:	400b      	ands	r3, r1
 80017ca:	0019      	movs	r1, r3
 80017cc:	075b      	lsls	r3, r3, #29
 80017ce:	4323      	orrs	r3, r4
 80017d0:	0572      	lsls	r2, r6, #21
 80017d2:	024c      	lsls	r4, r1, #9
 80017d4:	0b24      	lsrs	r4, r4, #12
 80017d6:	0d52      	lsrs	r2, r2, #21
 80017d8:	0512      	lsls	r2, r2, #20
 80017da:	4322      	orrs	r2, r4
 80017dc:	07ed      	lsls	r5, r5, #31
 80017de:	432a      	orrs	r2, r5
 80017e0:	0018      	movs	r0, r3
 80017e2:	0011      	movs	r1, r2
 80017e4:	b003      	add	sp, #12
 80017e6:	bcf0      	pop	{r4, r5, r6, r7}
 80017e8:	46bb      	mov	fp, r7
 80017ea:	46b2      	mov	sl, r6
 80017ec:	46a9      	mov	r9, r5
 80017ee:	46a0      	mov	r8, r4
 80017f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f2:	1ab4      	subs	r4, r6, r2
 80017f4:	46a4      	mov	ip, r4
 80017f6:	2c00      	cmp	r4, #0
 80017f8:	dd59      	ble.n	80018ae <__aeabi_dsub+0x22a>
 80017fa:	2a00      	cmp	r2, #0
 80017fc:	d100      	bne.n	8001800 <__aeabi_dsub+0x17c>
 80017fe:	e0b0      	b.n	8001962 <__aeabi_dsub+0x2de>
 8001800:	4556      	cmp	r6, sl
 8001802:	d100      	bne.n	8001806 <__aeabi_dsub+0x182>
 8001804:	e0fa      	b.n	80019fc <__aeabi_dsub+0x378>
 8001806:	2280      	movs	r2, #128	; 0x80
 8001808:	0412      	lsls	r2, r2, #16
 800180a:	4317      	orrs	r7, r2
 800180c:	4662      	mov	r2, ip
 800180e:	2a38      	cmp	r2, #56	; 0x38
 8001810:	dd00      	ble.n	8001814 <__aeabi_dsub+0x190>
 8001812:	e0d4      	b.n	80019be <__aeabi_dsub+0x33a>
 8001814:	2a1f      	cmp	r2, #31
 8001816:	dc00      	bgt.n	800181a <__aeabi_dsub+0x196>
 8001818:	e1c0      	b.n	8001b9c <__aeabi_dsub+0x518>
 800181a:	0039      	movs	r1, r7
 800181c:	3a20      	subs	r2, #32
 800181e:	40d1      	lsrs	r1, r2
 8001820:	4662      	mov	r2, ip
 8001822:	2a20      	cmp	r2, #32
 8001824:	d006      	beq.n	8001834 <__aeabi_dsub+0x1b0>
 8001826:	4664      	mov	r4, ip
 8001828:	2240      	movs	r2, #64	; 0x40
 800182a:	1b12      	subs	r2, r2, r4
 800182c:	003c      	movs	r4, r7
 800182e:	4094      	lsls	r4, r2
 8001830:	4304      	orrs	r4, r0
 8001832:	9401      	str	r4, [sp, #4]
 8001834:	9c01      	ldr	r4, [sp, #4]
 8001836:	1e62      	subs	r2, r4, #1
 8001838:	4194      	sbcs	r4, r2
 800183a:	430c      	orrs	r4, r1
 800183c:	e0c3      	b.n	80019c6 <__aeabi_dsub+0x342>
 800183e:	003c      	movs	r4, r7
 8001840:	4304      	orrs	r4, r0
 8001842:	d02b      	beq.n	800189c <__aeabi_dsub+0x218>
 8001844:	468b      	mov	fp, r1
 8001846:	428d      	cmp	r5, r1
 8001848:	d02e      	beq.n	80018a8 <__aeabi_dsub+0x224>
 800184a:	4c6a      	ldr	r4, [pc, #424]	; (80019f4 <__aeabi_dsub+0x370>)
 800184c:	46a4      	mov	ip, r4
 800184e:	44b4      	add	ip, r6
 8001850:	4664      	mov	r4, ip
 8001852:	2c00      	cmp	r4, #0
 8001854:	d05f      	beq.n	8001916 <__aeabi_dsub+0x292>
 8001856:	1b94      	subs	r4, r2, r6
 8001858:	46a4      	mov	ip, r4
 800185a:	2e00      	cmp	r6, #0
 800185c:	d000      	beq.n	8001860 <__aeabi_dsub+0x1dc>
 800185e:	e120      	b.n	8001aa2 <__aeabi_dsub+0x41e>
 8001860:	464c      	mov	r4, r9
 8001862:	431c      	orrs	r4, r3
 8001864:	d100      	bne.n	8001868 <__aeabi_dsub+0x1e4>
 8001866:	e1c7      	b.n	8001bf8 <__aeabi_dsub+0x574>
 8001868:	4661      	mov	r1, ip
 800186a:	1e4c      	subs	r4, r1, #1
 800186c:	2901      	cmp	r1, #1
 800186e:	d100      	bne.n	8001872 <__aeabi_dsub+0x1ee>
 8001870:	e223      	b.n	8001cba <__aeabi_dsub+0x636>
 8001872:	4d5e      	ldr	r5, [pc, #376]	; (80019ec <__aeabi_dsub+0x368>)
 8001874:	45ac      	cmp	ip, r5
 8001876:	d100      	bne.n	800187a <__aeabi_dsub+0x1f6>
 8001878:	e1d8      	b.n	8001c2c <__aeabi_dsub+0x5a8>
 800187a:	46a4      	mov	ip, r4
 800187c:	e11a      	b.n	8001ab4 <__aeabi_dsub+0x430>
 800187e:	003a      	movs	r2, r7
 8001880:	4302      	orrs	r2, r0
 8001882:	d100      	bne.n	8001886 <__aeabi_dsub+0x202>
 8001884:	e0e4      	b.n	8001a50 <__aeabi_dsub+0x3cc>
 8001886:	0022      	movs	r2, r4
 8001888:	3a01      	subs	r2, #1
 800188a:	2c01      	cmp	r4, #1
 800188c:	d100      	bne.n	8001890 <__aeabi_dsub+0x20c>
 800188e:	e1c3      	b.n	8001c18 <__aeabi_dsub+0x594>
 8001890:	4956      	ldr	r1, [pc, #344]	; (80019ec <__aeabi_dsub+0x368>)
 8001892:	428c      	cmp	r4, r1
 8001894:	d100      	bne.n	8001898 <__aeabi_dsub+0x214>
 8001896:	e0b1      	b.n	80019fc <__aeabi_dsub+0x378>
 8001898:	4694      	mov	ip, r2
 800189a:	e72b      	b.n	80016f4 <__aeabi_dsub+0x70>
 800189c:	2401      	movs	r4, #1
 800189e:	4061      	eors	r1, r4
 80018a0:	468b      	mov	fp, r1
 80018a2:	428d      	cmp	r5, r1
 80018a4:	d000      	beq.n	80018a8 <__aeabi_dsub+0x224>
 80018a6:	e716      	b.n	80016d6 <__aeabi_dsub+0x52>
 80018a8:	4952      	ldr	r1, [pc, #328]	; (80019f4 <__aeabi_dsub+0x370>)
 80018aa:	468c      	mov	ip, r1
 80018ac:	44b4      	add	ip, r6
 80018ae:	4664      	mov	r4, ip
 80018b0:	2c00      	cmp	r4, #0
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dsub+0x232>
 80018b4:	e0d3      	b.n	8001a5e <__aeabi_dsub+0x3da>
 80018b6:	1b91      	subs	r1, r2, r6
 80018b8:	468c      	mov	ip, r1
 80018ba:	2e00      	cmp	r6, #0
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dsub+0x23c>
 80018be:	e15e      	b.n	8001b7e <__aeabi_dsub+0x4fa>
 80018c0:	494a      	ldr	r1, [pc, #296]	; (80019ec <__aeabi_dsub+0x368>)
 80018c2:	428a      	cmp	r2, r1
 80018c4:	d100      	bne.n	80018c8 <__aeabi_dsub+0x244>
 80018c6:	e1be      	b.n	8001c46 <__aeabi_dsub+0x5c2>
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	464c      	mov	r4, r9
 80018cc:	0409      	lsls	r1, r1, #16
 80018ce:	430c      	orrs	r4, r1
 80018d0:	46a1      	mov	r9, r4
 80018d2:	4661      	mov	r1, ip
 80018d4:	2938      	cmp	r1, #56	; 0x38
 80018d6:	dd00      	ble.n	80018da <__aeabi_dsub+0x256>
 80018d8:	e1ba      	b.n	8001c50 <__aeabi_dsub+0x5cc>
 80018da:	291f      	cmp	r1, #31
 80018dc:	dd00      	ble.n	80018e0 <__aeabi_dsub+0x25c>
 80018de:	e227      	b.n	8001d30 <__aeabi_dsub+0x6ac>
 80018e0:	2420      	movs	r4, #32
 80018e2:	1a64      	subs	r4, r4, r1
 80018e4:	4649      	mov	r1, r9
 80018e6:	40a1      	lsls	r1, r4
 80018e8:	001e      	movs	r6, r3
 80018ea:	4688      	mov	r8, r1
 80018ec:	4661      	mov	r1, ip
 80018ee:	40a3      	lsls	r3, r4
 80018f0:	40ce      	lsrs	r6, r1
 80018f2:	4641      	mov	r1, r8
 80018f4:	1e5c      	subs	r4, r3, #1
 80018f6:	41a3      	sbcs	r3, r4
 80018f8:	4331      	orrs	r1, r6
 80018fa:	4319      	orrs	r1, r3
 80018fc:	000c      	movs	r4, r1
 80018fe:	4663      	mov	r3, ip
 8001900:	4649      	mov	r1, r9
 8001902:	40d9      	lsrs	r1, r3
 8001904:	187f      	adds	r7, r7, r1
 8001906:	1824      	adds	r4, r4, r0
 8001908:	4284      	cmp	r4, r0
 800190a:	419b      	sbcs	r3, r3
 800190c:	425b      	negs	r3, r3
 800190e:	469a      	mov	sl, r3
 8001910:	0016      	movs	r6, r2
 8001912:	44ba      	add	sl, r7
 8001914:	e05d      	b.n	80019d2 <__aeabi_dsub+0x34e>
 8001916:	4c38      	ldr	r4, [pc, #224]	; (80019f8 <__aeabi_dsub+0x374>)
 8001918:	1c72      	adds	r2, r6, #1
 800191a:	4222      	tst	r2, r4
 800191c:	d000      	beq.n	8001920 <__aeabi_dsub+0x29c>
 800191e:	e0df      	b.n	8001ae0 <__aeabi_dsub+0x45c>
 8001920:	464a      	mov	r2, r9
 8001922:	431a      	orrs	r2, r3
 8001924:	2e00      	cmp	r6, #0
 8001926:	d000      	beq.n	800192a <__aeabi_dsub+0x2a6>
 8001928:	e15c      	b.n	8001be4 <__aeabi_dsub+0x560>
 800192a:	2a00      	cmp	r2, #0
 800192c:	d100      	bne.n	8001930 <__aeabi_dsub+0x2ac>
 800192e:	e1cf      	b.n	8001cd0 <__aeabi_dsub+0x64c>
 8001930:	003a      	movs	r2, r7
 8001932:	4302      	orrs	r2, r0
 8001934:	d100      	bne.n	8001938 <__aeabi_dsub+0x2b4>
 8001936:	e17f      	b.n	8001c38 <__aeabi_dsub+0x5b4>
 8001938:	1a1c      	subs	r4, r3, r0
 800193a:	464a      	mov	r2, r9
 800193c:	42a3      	cmp	r3, r4
 800193e:	4189      	sbcs	r1, r1
 8001940:	1bd2      	subs	r2, r2, r7
 8001942:	4249      	negs	r1, r1
 8001944:	1a52      	subs	r2, r2, r1
 8001946:	4692      	mov	sl, r2
 8001948:	0212      	lsls	r2, r2, #8
 800194a:	d400      	bmi.n	800194e <__aeabi_dsub+0x2ca>
 800194c:	e20a      	b.n	8001d64 <__aeabi_dsub+0x6e0>
 800194e:	1ac4      	subs	r4, r0, r3
 8001950:	42a0      	cmp	r0, r4
 8001952:	4180      	sbcs	r0, r0
 8001954:	464b      	mov	r3, r9
 8001956:	4240      	negs	r0, r0
 8001958:	1aff      	subs	r7, r7, r3
 800195a:	1a3b      	subs	r3, r7, r0
 800195c:	469a      	mov	sl, r3
 800195e:	465d      	mov	r5, fp
 8001960:	e71a      	b.n	8001798 <__aeabi_dsub+0x114>
 8001962:	003a      	movs	r2, r7
 8001964:	4302      	orrs	r2, r0
 8001966:	d073      	beq.n	8001a50 <__aeabi_dsub+0x3cc>
 8001968:	0022      	movs	r2, r4
 800196a:	3a01      	subs	r2, #1
 800196c:	2c01      	cmp	r4, #1
 800196e:	d100      	bne.n	8001972 <__aeabi_dsub+0x2ee>
 8001970:	e0cb      	b.n	8001b0a <__aeabi_dsub+0x486>
 8001972:	4554      	cmp	r4, sl
 8001974:	d042      	beq.n	80019fc <__aeabi_dsub+0x378>
 8001976:	4694      	mov	ip, r2
 8001978:	e748      	b.n	800180c <__aeabi_dsub+0x188>
 800197a:	0010      	movs	r0, r2
 800197c:	3b1f      	subs	r3, #31
 800197e:	40d8      	lsrs	r0, r3
 8001980:	2920      	cmp	r1, #32
 8001982:	d003      	beq.n	800198c <__aeabi_dsub+0x308>
 8001984:	2340      	movs	r3, #64	; 0x40
 8001986:	1a5b      	subs	r3, r3, r1
 8001988:	409a      	lsls	r2, r3
 800198a:	4314      	orrs	r4, r2
 800198c:	1e63      	subs	r3, r4, #1
 800198e:	419c      	sbcs	r4, r3
 8001990:	2300      	movs	r3, #0
 8001992:	2600      	movs	r6, #0
 8001994:	469a      	mov	sl, r3
 8001996:	4304      	orrs	r4, r0
 8001998:	0763      	lsls	r3, r4, #29
 800199a:	d000      	beq.n	800199e <__aeabi_dsub+0x31a>
 800199c:	e6fe      	b.n	800179c <__aeabi_dsub+0x118>
 800199e:	4652      	mov	r2, sl
 80019a0:	08e3      	lsrs	r3, r4, #3
 80019a2:	0752      	lsls	r2, r2, #29
 80019a4:	4313      	orrs	r3, r2
 80019a6:	4652      	mov	r2, sl
 80019a8:	46b4      	mov	ip, r6
 80019aa:	08d2      	lsrs	r2, r2, #3
 80019ac:	490f      	ldr	r1, [pc, #60]	; (80019ec <__aeabi_dsub+0x368>)
 80019ae:	458c      	cmp	ip, r1
 80019b0:	d02a      	beq.n	8001a08 <__aeabi_dsub+0x384>
 80019b2:	0312      	lsls	r2, r2, #12
 80019b4:	0b14      	lsrs	r4, r2, #12
 80019b6:	4662      	mov	r2, ip
 80019b8:	0552      	lsls	r2, r2, #21
 80019ba:	0d52      	lsrs	r2, r2, #21
 80019bc:	e70c      	b.n	80017d8 <__aeabi_dsub+0x154>
 80019be:	003c      	movs	r4, r7
 80019c0:	4304      	orrs	r4, r0
 80019c2:	1e62      	subs	r2, r4, #1
 80019c4:	4194      	sbcs	r4, r2
 80019c6:	18e4      	adds	r4, r4, r3
 80019c8:	429c      	cmp	r4, r3
 80019ca:	4192      	sbcs	r2, r2
 80019cc:	4252      	negs	r2, r2
 80019ce:	444a      	add	r2, r9
 80019d0:	4692      	mov	sl, r2
 80019d2:	4653      	mov	r3, sl
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	d5df      	bpl.n	8001998 <__aeabi_dsub+0x314>
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <__aeabi_dsub+0x368>)
 80019da:	3601      	adds	r6, #1
 80019dc:	429e      	cmp	r6, r3
 80019de:	d000      	beq.n	80019e2 <__aeabi_dsub+0x35e>
 80019e0:	e0a0      	b.n	8001b24 <__aeabi_dsub+0x4a0>
 80019e2:	0032      	movs	r2, r6
 80019e4:	2400      	movs	r4, #0
 80019e6:	2300      	movs	r3, #0
 80019e8:	e6f6      	b.n	80017d8 <__aeabi_dsub+0x154>
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	000007ff 	.word	0x000007ff
 80019f0:	ff7fffff 	.word	0xff7fffff
 80019f4:	fffff801 	.word	0xfffff801
 80019f8:	000007fe 	.word	0x000007fe
 80019fc:	08db      	lsrs	r3, r3, #3
 80019fe:	464a      	mov	r2, r9
 8001a00:	0752      	lsls	r2, r2, #29
 8001a02:	4313      	orrs	r3, r2
 8001a04:	464a      	mov	r2, r9
 8001a06:	08d2      	lsrs	r2, r2, #3
 8001a08:	0019      	movs	r1, r3
 8001a0a:	4311      	orrs	r1, r2
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x38c>
 8001a0e:	e1b5      	b.n	8001d7c <__aeabi_dsub+0x6f8>
 8001a10:	2480      	movs	r4, #128	; 0x80
 8001a12:	0324      	lsls	r4, r4, #12
 8001a14:	4314      	orrs	r4, r2
 8001a16:	0324      	lsls	r4, r4, #12
 8001a18:	4ad5      	ldr	r2, [pc, #852]	; (8001d70 <__aeabi_dsub+0x6ec>)
 8001a1a:	0b24      	lsrs	r4, r4, #12
 8001a1c:	e6dc      	b.n	80017d8 <__aeabi_dsub+0x154>
 8001a1e:	0020      	movs	r0, r4
 8001a20:	f000 fab0 	bl	8001f84 <__clzsi2>
 8001a24:	0003      	movs	r3, r0
 8001a26:	3318      	adds	r3, #24
 8001a28:	2b1f      	cmp	r3, #31
 8001a2a:	dc00      	bgt.n	8001a2e <__aeabi_dsub+0x3aa>
 8001a2c:	e695      	b.n	800175a <__aeabi_dsub+0xd6>
 8001a2e:	0022      	movs	r2, r4
 8001a30:	3808      	subs	r0, #8
 8001a32:	4082      	lsls	r2, r0
 8001a34:	2400      	movs	r4, #0
 8001a36:	429e      	cmp	r6, r3
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dsub+0x3b8>
 8001a3a:	e69a      	b.n	8001772 <__aeabi_dsub+0xee>
 8001a3c:	1af6      	subs	r6, r6, r3
 8001a3e:	4bcd      	ldr	r3, [pc, #820]	; (8001d74 <__aeabi_dsub+0x6f0>)
 8001a40:	401a      	ands	r2, r3
 8001a42:	4692      	mov	sl, r2
 8001a44:	e6a8      	b.n	8001798 <__aeabi_dsub+0x114>
 8001a46:	003c      	movs	r4, r7
 8001a48:	4304      	orrs	r4, r0
 8001a4a:	1e62      	subs	r2, r4, #1
 8001a4c:	4194      	sbcs	r4, r2
 8001a4e:	e66c      	b.n	800172a <__aeabi_dsub+0xa6>
 8001a50:	464a      	mov	r2, r9
 8001a52:	08db      	lsrs	r3, r3, #3
 8001a54:	0752      	lsls	r2, r2, #29
 8001a56:	4313      	orrs	r3, r2
 8001a58:	464a      	mov	r2, r9
 8001a5a:	08d2      	lsrs	r2, r2, #3
 8001a5c:	e7a6      	b.n	80019ac <__aeabi_dsub+0x328>
 8001a5e:	4cc6      	ldr	r4, [pc, #792]	; (8001d78 <__aeabi_dsub+0x6f4>)
 8001a60:	1c72      	adds	r2, r6, #1
 8001a62:	4222      	tst	r2, r4
 8001a64:	d000      	beq.n	8001a68 <__aeabi_dsub+0x3e4>
 8001a66:	e0ac      	b.n	8001bc2 <__aeabi_dsub+0x53e>
 8001a68:	464a      	mov	r2, r9
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	2e00      	cmp	r6, #0
 8001a6e:	d000      	beq.n	8001a72 <__aeabi_dsub+0x3ee>
 8001a70:	e105      	b.n	8001c7e <__aeabi_dsub+0x5fa>
 8001a72:	2a00      	cmp	r2, #0
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dsub+0x3f4>
 8001a76:	e156      	b.n	8001d26 <__aeabi_dsub+0x6a2>
 8001a78:	003a      	movs	r2, r7
 8001a7a:	4302      	orrs	r2, r0
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x3fc>
 8001a7e:	e0db      	b.n	8001c38 <__aeabi_dsub+0x5b4>
 8001a80:	181c      	adds	r4, r3, r0
 8001a82:	429c      	cmp	r4, r3
 8001a84:	419b      	sbcs	r3, r3
 8001a86:	444f      	add	r7, r9
 8001a88:	46ba      	mov	sl, r7
 8001a8a:	425b      	negs	r3, r3
 8001a8c:	449a      	add	sl, r3
 8001a8e:	4653      	mov	r3, sl
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	d400      	bmi.n	8001a96 <__aeabi_dsub+0x412>
 8001a94:	e780      	b.n	8001998 <__aeabi_dsub+0x314>
 8001a96:	4652      	mov	r2, sl
 8001a98:	4bb6      	ldr	r3, [pc, #728]	; (8001d74 <__aeabi_dsub+0x6f0>)
 8001a9a:	2601      	movs	r6, #1
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	4692      	mov	sl, r2
 8001aa0:	e77a      	b.n	8001998 <__aeabi_dsub+0x314>
 8001aa2:	4cb3      	ldr	r4, [pc, #716]	; (8001d70 <__aeabi_dsub+0x6ec>)
 8001aa4:	42a2      	cmp	r2, r4
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dsub+0x426>
 8001aa8:	e0c0      	b.n	8001c2c <__aeabi_dsub+0x5a8>
 8001aaa:	2480      	movs	r4, #128	; 0x80
 8001aac:	464d      	mov	r5, r9
 8001aae:	0424      	lsls	r4, r4, #16
 8001ab0:	4325      	orrs	r5, r4
 8001ab2:	46a9      	mov	r9, r5
 8001ab4:	4664      	mov	r4, ip
 8001ab6:	2c38      	cmp	r4, #56	; 0x38
 8001ab8:	dc53      	bgt.n	8001b62 <__aeabi_dsub+0x4de>
 8001aba:	4661      	mov	r1, ip
 8001abc:	2c1f      	cmp	r4, #31
 8001abe:	dd00      	ble.n	8001ac2 <__aeabi_dsub+0x43e>
 8001ac0:	e0cd      	b.n	8001c5e <__aeabi_dsub+0x5da>
 8001ac2:	2520      	movs	r5, #32
 8001ac4:	001e      	movs	r6, r3
 8001ac6:	1b2d      	subs	r5, r5, r4
 8001ac8:	464c      	mov	r4, r9
 8001aca:	40ab      	lsls	r3, r5
 8001acc:	40ac      	lsls	r4, r5
 8001ace:	40ce      	lsrs	r6, r1
 8001ad0:	1e5d      	subs	r5, r3, #1
 8001ad2:	41ab      	sbcs	r3, r5
 8001ad4:	4334      	orrs	r4, r6
 8001ad6:	4323      	orrs	r3, r4
 8001ad8:	464c      	mov	r4, r9
 8001ada:	40cc      	lsrs	r4, r1
 8001adc:	1b3f      	subs	r7, r7, r4
 8001ade:	e045      	b.n	8001b6c <__aeabi_dsub+0x4e8>
 8001ae0:	464a      	mov	r2, r9
 8001ae2:	1a1c      	subs	r4, r3, r0
 8001ae4:	1bd1      	subs	r1, r2, r7
 8001ae6:	42a3      	cmp	r3, r4
 8001ae8:	4192      	sbcs	r2, r2
 8001aea:	4252      	negs	r2, r2
 8001aec:	4692      	mov	sl, r2
 8001aee:	000a      	movs	r2, r1
 8001af0:	4651      	mov	r1, sl
 8001af2:	1a52      	subs	r2, r2, r1
 8001af4:	4692      	mov	sl, r2
 8001af6:	0212      	lsls	r2, r2, #8
 8001af8:	d500      	bpl.n	8001afc <__aeabi_dsub+0x478>
 8001afa:	e083      	b.n	8001c04 <__aeabi_dsub+0x580>
 8001afc:	4653      	mov	r3, sl
 8001afe:	4323      	orrs	r3, r4
 8001b00:	d000      	beq.n	8001b04 <__aeabi_dsub+0x480>
 8001b02:	e621      	b.n	8001748 <__aeabi_dsub+0xc4>
 8001b04:	2200      	movs	r2, #0
 8001b06:	2500      	movs	r5, #0
 8001b08:	e753      	b.n	80019b2 <__aeabi_dsub+0x32e>
 8001b0a:	181c      	adds	r4, r3, r0
 8001b0c:	429c      	cmp	r4, r3
 8001b0e:	419b      	sbcs	r3, r3
 8001b10:	444f      	add	r7, r9
 8001b12:	46ba      	mov	sl, r7
 8001b14:	425b      	negs	r3, r3
 8001b16:	449a      	add	sl, r3
 8001b18:	4653      	mov	r3, sl
 8001b1a:	2601      	movs	r6, #1
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	d400      	bmi.n	8001b22 <__aeabi_dsub+0x49e>
 8001b20:	e73a      	b.n	8001998 <__aeabi_dsub+0x314>
 8001b22:	2602      	movs	r6, #2
 8001b24:	4652      	mov	r2, sl
 8001b26:	4b93      	ldr	r3, [pc, #588]	; (8001d74 <__aeabi_dsub+0x6f0>)
 8001b28:	2101      	movs	r1, #1
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	0013      	movs	r3, r2
 8001b2e:	4021      	ands	r1, r4
 8001b30:	0862      	lsrs	r2, r4, #1
 8001b32:	430a      	orrs	r2, r1
 8001b34:	07dc      	lsls	r4, r3, #31
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	469a      	mov	sl, r3
 8001b3a:	4314      	orrs	r4, r2
 8001b3c:	e62c      	b.n	8001798 <__aeabi_dsub+0x114>
 8001b3e:	0039      	movs	r1, r7
 8001b40:	3a20      	subs	r2, #32
 8001b42:	40d1      	lsrs	r1, r2
 8001b44:	4662      	mov	r2, ip
 8001b46:	2a20      	cmp	r2, #32
 8001b48:	d006      	beq.n	8001b58 <__aeabi_dsub+0x4d4>
 8001b4a:	4664      	mov	r4, ip
 8001b4c:	2240      	movs	r2, #64	; 0x40
 8001b4e:	1b12      	subs	r2, r2, r4
 8001b50:	003c      	movs	r4, r7
 8001b52:	4094      	lsls	r4, r2
 8001b54:	4304      	orrs	r4, r0
 8001b56:	9401      	str	r4, [sp, #4]
 8001b58:	9c01      	ldr	r4, [sp, #4]
 8001b5a:	1e62      	subs	r2, r4, #1
 8001b5c:	4194      	sbcs	r4, r2
 8001b5e:	430c      	orrs	r4, r1
 8001b60:	e5e3      	b.n	800172a <__aeabi_dsub+0xa6>
 8001b62:	4649      	mov	r1, r9
 8001b64:	4319      	orrs	r1, r3
 8001b66:	000b      	movs	r3, r1
 8001b68:	1e5c      	subs	r4, r3, #1
 8001b6a:	41a3      	sbcs	r3, r4
 8001b6c:	1ac4      	subs	r4, r0, r3
 8001b6e:	42a0      	cmp	r0, r4
 8001b70:	419b      	sbcs	r3, r3
 8001b72:	425b      	negs	r3, r3
 8001b74:	1afb      	subs	r3, r7, r3
 8001b76:	469a      	mov	sl, r3
 8001b78:	465d      	mov	r5, fp
 8001b7a:	0016      	movs	r6, r2
 8001b7c:	e5dc      	b.n	8001738 <__aeabi_dsub+0xb4>
 8001b7e:	4649      	mov	r1, r9
 8001b80:	4319      	orrs	r1, r3
 8001b82:	d100      	bne.n	8001b86 <__aeabi_dsub+0x502>
 8001b84:	e0ae      	b.n	8001ce4 <__aeabi_dsub+0x660>
 8001b86:	4661      	mov	r1, ip
 8001b88:	4664      	mov	r4, ip
 8001b8a:	3901      	subs	r1, #1
 8001b8c:	2c01      	cmp	r4, #1
 8001b8e:	d100      	bne.n	8001b92 <__aeabi_dsub+0x50e>
 8001b90:	e0e0      	b.n	8001d54 <__aeabi_dsub+0x6d0>
 8001b92:	4c77      	ldr	r4, [pc, #476]	; (8001d70 <__aeabi_dsub+0x6ec>)
 8001b94:	45a4      	cmp	ip, r4
 8001b96:	d056      	beq.n	8001c46 <__aeabi_dsub+0x5c2>
 8001b98:	468c      	mov	ip, r1
 8001b9a:	e69a      	b.n	80018d2 <__aeabi_dsub+0x24e>
 8001b9c:	4661      	mov	r1, ip
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	003c      	movs	r4, r7
 8001ba2:	1a52      	subs	r2, r2, r1
 8001ba4:	4094      	lsls	r4, r2
 8001ba6:	0001      	movs	r1, r0
 8001ba8:	4090      	lsls	r0, r2
 8001baa:	46a0      	mov	r8, r4
 8001bac:	4664      	mov	r4, ip
 8001bae:	1e42      	subs	r2, r0, #1
 8001bb0:	4190      	sbcs	r0, r2
 8001bb2:	4662      	mov	r2, ip
 8001bb4:	40e1      	lsrs	r1, r4
 8001bb6:	4644      	mov	r4, r8
 8001bb8:	40d7      	lsrs	r7, r2
 8001bba:	430c      	orrs	r4, r1
 8001bbc:	4304      	orrs	r4, r0
 8001bbe:	44b9      	add	r9, r7
 8001bc0:	e701      	b.n	80019c6 <__aeabi_dsub+0x342>
 8001bc2:	496b      	ldr	r1, [pc, #428]	; (8001d70 <__aeabi_dsub+0x6ec>)
 8001bc4:	428a      	cmp	r2, r1
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dsub+0x546>
 8001bc8:	e70c      	b.n	80019e4 <__aeabi_dsub+0x360>
 8001bca:	1818      	adds	r0, r3, r0
 8001bcc:	4298      	cmp	r0, r3
 8001bce:	419b      	sbcs	r3, r3
 8001bd0:	444f      	add	r7, r9
 8001bd2:	425b      	negs	r3, r3
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	07dc      	lsls	r4, r3, #31
 8001bd8:	0840      	lsrs	r0, r0, #1
 8001bda:	085b      	lsrs	r3, r3, #1
 8001bdc:	469a      	mov	sl, r3
 8001bde:	0016      	movs	r6, r2
 8001be0:	4304      	orrs	r4, r0
 8001be2:	e6d9      	b.n	8001998 <__aeabi_dsub+0x314>
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	d000      	beq.n	8001bea <__aeabi_dsub+0x566>
 8001be8:	e081      	b.n	8001cee <__aeabi_dsub+0x66a>
 8001bea:	003b      	movs	r3, r7
 8001bec:	4303      	orrs	r3, r0
 8001bee:	d11d      	bne.n	8001c2c <__aeabi_dsub+0x5a8>
 8001bf0:	2280      	movs	r2, #128	; 0x80
 8001bf2:	2500      	movs	r5, #0
 8001bf4:	0312      	lsls	r2, r2, #12
 8001bf6:	e70b      	b.n	8001a10 <__aeabi_dsub+0x38c>
 8001bf8:	08c0      	lsrs	r0, r0, #3
 8001bfa:	077b      	lsls	r3, r7, #29
 8001bfc:	465d      	mov	r5, fp
 8001bfe:	4303      	orrs	r3, r0
 8001c00:	08fa      	lsrs	r2, r7, #3
 8001c02:	e6d3      	b.n	80019ac <__aeabi_dsub+0x328>
 8001c04:	1ac4      	subs	r4, r0, r3
 8001c06:	42a0      	cmp	r0, r4
 8001c08:	4180      	sbcs	r0, r0
 8001c0a:	464b      	mov	r3, r9
 8001c0c:	4240      	negs	r0, r0
 8001c0e:	1aff      	subs	r7, r7, r3
 8001c10:	1a3b      	subs	r3, r7, r0
 8001c12:	469a      	mov	sl, r3
 8001c14:	465d      	mov	r5, fp
 8001c16:	e597      	b.n	8001748 <__aeabi_dsub+0xc4>
 8001c18:	1a1c      	subs	r4, r3, r0
 8001c1a:	464a      	mov	r2, r9
 8001c1c:	42a3      	cmp	r3, r4
 8001c1e:	419b      	sbcs	r3, r3
 8001c20:	1bd7      	subs	r7, r2, r7
 8001c22:	425b      	negs	r3, r3
 8001c24:	1afb      	subs	r3, r7, r3
 8001c26:	469a      	mov	sl, r3
 8001c28:	2601      	movs	r6, #1
 8001c2a:	e585      	b.n	8001738 <__aeabi_dsub+0xb4>
 8001c2c:	08c0      	lsrs	r0, r0, #3
 8001c2e:	077b      	lsls	r3, r7, #29
 8001c30:	465d      	mov	r5, fp
 8001c32:	4303      	orrs	r3, r0
 8001c34:	08fa      	lsrs	r2, r7, #3
 8001c36:	e6e7      	b.n	8001a08 <__aeabi_dsub+0x384>
 8001c38:	464a      	mov	r2, r9
 8001c3a:	08db      	lsrs	r3, r3, #3
 8001c3c:	0752      	lsls	r2, r2, #29
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	464a      	mov	r2, r9
 8001c42:	08d2      	lsrs	r2, r2, #3
 8001c44:	e6b5      	b.n	80019b2 <__aeabi_dsub+0x32e>
 8001c46:	08c0      	lsrs	r0, r0, #3
 8001c48:	077b      	lsls	r3, r7, #29
 8001c4a:	4303      	orrs	r3, r0
 8001c4c:	08fa      	lsrs	r2, r7, #3
 8001c4e:	e6db      	b.n	8001a08 <__aeabi_dsub+0x384>
 8001c50:	4649      	mov	r1, r9
 8001c52:	4319      	orrs	r1, r3
 8001c54:	000b      	movs	r3, r1
 8001c56:	1e59      	subs	r1, r3, #1
 8001c58:	418b      	sbcs	r3, r1
 8001c5a:	001c      	movs	r4, r3
 8001c5c:	e653      	b.n	8001906 <__aeabi_dsub+0x282>
 8001c5e:	464d      	mov	r5, r9
 8001c60:	3c20      	subs	r4, #32
 8001c62:	40e5      	lsrs	r5, r4
 8001c64:	2920      	cmp	r1, #32
 8001c66:	d005      	beq.n	8001c74 <__aeabi_dsub+0x5f0>
 8001c68:	2440      	movs	r4, #64	; 0x40
 8001c6a:	1a64      	subs	r4, r4, r1
 8001c6c:	4649      	mov	r1, r9
 8001c6e:	40a1      	lsls	r1, r4
 8001c70:	430b      	orrs	r3, r1
 8001c72:	4698      	mov	r8, r3
 8001c74:	4643      	mov	r3, r8
 8001c76:	1e5c      	subs	r4, r3, #1
 8001c78:	41a3      	sbcs	r3, r4
 8001c7a:	432b      	orrs	r3, r5
 8001c7c:	e776      	b.n	8001b6c <__aeabi_dsub+0x4e8>
 8001c7e:	2a00      	cmp	r2, #0
 8001c80:	d0e1      	beq.n	8001c46 <__aeabi_dsub+0x5c2>
 8001c82:	003a      	movs	r2, r7
 8001c84:	08db      	lsrs	r3, r3, #3
 8001c86:	4302      	orrs	r2, r0
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x608>
 8001c8a:	e6b8      	b.n	80019fe <__aeabi_dsub+0x37a>
 8001c8c:	464a      	mov	r2, r9
 8001c8e:	0752      	lsls	r2, r2, #29
 8001c90:	2480      	movs	r4, #128	; 0x80
 8001c92:	4313      	orrs	r3, r2
 8001c94:	464a      	mov	r2, r9
 8001c96:	0324      	lsls	r4, r4, #12
 8001c98:	08d2      	lsrs	r2, r2, #3
 8001c9a:	4222      	tst	r2, r4
 8001c9c:	d007      	beq.n	8001cae <__aeabi_dsub+0x62a>
 8001c9e:	08fe      	lsrs	r6, r7, #3
 8001ca0:	4226      	tst	r6, r4
 8001ca2:	d104      	bne.n	8001cae <__aeabi_dsub+0x62a>
 8001ca4:	465d      	mov	r5, fp
 8001ca6:	0032      	movs	r2, r6
 8001ca8:	08c3      	lsrs	r3, r0, #3
 8001caa:	077f      	lsls	r7, r7, #29
 8001cac:	433b      	orrs	r3, r7
 8001cae:	0f59      	lsrs	r1, r3, #29
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	0749      	lsls	r1, r1, #29
 8001cb4:	08db      	lsrs	r3, r3, #3
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	e6a6      	b.n	8001a08 <__aeabi_dsub+0x384>
 8001cba:	1ac4      	subs	r4, r0, r3
 8001cbc:	42a0      	cmp	r0, r4
 8001cbe:	4180      	sbcs	r0, r0
 8001cc0:	464b      	mov	r3, r9
 8001cc2:	4240      	negs	r0, r0
 8001cc4:	1aff      	subs	r7, r7, r3
 8001cc6:	1a3b      	subs	r3, r7, r0
 8001cc8:	469a      	mov	sl, r3
 8001cca:	465d      	mov	r5, fp
 8001ccc:	2601      	movs	r6, #1
 8001cce:	e533      	b.n	8001738 <__aeabi_dsub+0xb4>
 8001cd0:	003b      	movs	r3, r7
 8001cd2:	4303      	orrs	r3, r0
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x654>
 8001cd6:	e715      	b.n	8001b04 <__aeabi_dsub+0x480>
 8001cd8:	08c0      	lsrs	r0, r0, #3
 8001cda:	077b      	lsls	r3, r7, #29
 8001cdc:	465d      	mov	r5, fp
 8001cde:	4303      	orrs	r3, r0
 8001ce0:	08fa      	lsrs	r2, r7, #3
 8001ce2:	e666      	b.n	80019b2 <__aeabi_dsub+0x32e>
 8001ce4:	08c0      	lsrs	r0, r0, #3
 8001ce6:	077b      	lsls	r3, r7, #29
 8001ce8:	4303      	orrs	r3, r0
 8001cea:	08fa      	lsrs	r2, r7, #3
 8001cec:	e65e      	b.n	80019ac <__aeabi_dsub+0x328>
 8001cee:	003a      	movs	r2, r7
 8001cf0:	08db      	lsrs	r3, r3, #3
 8001cf2:	4302      	orrs	r2, r0
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x674>
 8001cf6:	e682      	b.n	80019fe <__aeabi_dsub+0x37a>
 8001cf8:	464a      	mov	r2, r9
 8001cfa:	0752      	lsls	r2, r2, #29
 8001cfc:	2480      	movs	r4, #128	; 0x80
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	464a      	mov	r2, r9
 8001d02:	0324      	lsls	r4, r4, #12
 8001d04:	08d2      	lsrs	r2, r2, #3
 8001d06:	4222      	tst	r2, r4
 8001d08:	d007      	beq.n	8001d1a <__aeabi_dsub+0x696>
 8001d0a:	08fe      	lsrs	r6, r7, #3
 8001d0c:	4226      	tst	r6, r4
 8001d0e:	d104      	bne.n	8001d1a <__aeabi_dsub+0x696>
 8001d10:	465d      	mov	r5, fp
 8001d12:	0032      	movs	r2, r6
 8001d14:	08c3      	lsrs	r3, r0, #3
 8001d16:	077f      	lsls	r7, r7, #29
 8001d18:	433b      	orrs	r3, r7
 8001d1a:	0f59      	lsrs	r1, r3, #29
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	08db      	lsrs	r3, r3, #3
 8001d20:	0749      	lsls	r1, r1, #29
 8001d22:	430b      	orrs	r3, r1
 8001d24:	e670      	b.n	8001a08 <__aeabi_dsub+0x384>
 8001d26:	08c0      	lsrs	r0, r0, #3
 8001d28:	077b      	lsls	r3, r7, #29
 8001d2a:	4303      	orrs	r3, r0
 8001d2c:	08fa      	lsrs	r2, r7, #3
 8001d2e:	e640      	b.n	80019b2 <__aeabi_dsub+0x32e>
 8001d30:	464c      	mov	r4, r9
 8001d32:	3920      	subs	r1, #32
 8001d34:	40cc      	lsrs	r4, r1
 8001d36:	4661      	mov	r1, ip
 8001d38:	2920      	cmp	r1, #32
 8001d3a:	d006      	beq.n	8001d4a <__aeabi_dsub+0x6c6>
 8001d3c:	4666      	mov	r6, ip
 8001d3e:	2140      	movs	r1, #64	; 0x40
 8001d40:	1b89      	subs	r1, r1, r6
 8001d42:	464e      	mov	r6, r9
 8001d44:	408e      	lsls	r6, r1
 8001d46:	4333      	orrs	r3, r6
 8001d48:	4698      	mov	r8, r3
 8001d4a:	4643      	mov	r3, r8
 8001d4c:	1e59      	subs	r1, r3, #1
 8001d4e:	418b      	sbcs	r3, r1
 8001d50:	431c      	orrs	r4, r3
 8001d52:	e5d8      	b.n	8001906 <__aeabi_dsub+0x282>
 8001d54:	181c      	adds	r4, r3, r0
 8001d56:	4284      	cmp	r4, r0
 8001d58:	4180      	sbcs	r0, r0
 8001d5a:	444f      	add	r7, r9
 8001d5c:	46ba      	mov	sl, r7
 8001d5e:	4240      	negs	r0, r0
 8001d60:	4482      	add	sl, r0
 8001d62:	e6d9      	b.n	8001b18 <__aeabi_dsub+0x494>
 8001d64:	4653      	mov	r3, sl
 8001d66:	4323      	orrs	r3, r4
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x6e8>
 8001d6a:	e6cb      	b.n	8001b04 <__aeabi_dsub+0x480>
 8001d6c:	e614      	b.n	8001998 <__aeabi_dsub+0x314>
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	000007ff 	.word	0x000007ff
 8001d74:	ff7fffff 	.word	0xff7fffff
 8001d78:	000007fe 	.word	0x000007fe
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	4a01      	ldr	r2, [pc, #4]	; (8001d84 <__aeabi_dsub+0x700>)
 8001d80:	001c      	movs	r4, r3
 8001d82:	e529      	b.n	80017d8 <__aeabi_dsub+0x154>
 8001d84:	000007ff 	.word	0x000007ff

08001d88 <__aeabi_i2d>:
 8001d88:	b570      	push	{r4, r5, r6, lr}
 8001d8a:	2800      	cmp	r0, #0
 8001d8c:	d016      	beq.n	8001dbc <__aeabi_i2d+0x34>
 8001d8e:	17c3      	asrs	r3, r0, #31
 8001d90:	18c5      	adds	r5, r0, r3
 8001d92:	405d      	eors	r5, r3
 8001d94:	0fc4      	lsrs	r4, r0, #31
 8001d96:	0028      	movs	r0, r5
 8001d98:	f000 f8f4 	bl	8001f84 <__clzsi2>
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <__aeabi_i2d+0x5c>)
 8001d9e:	1a1b      	subs	r3, r3, r0
 8001da0:	280a      	cmp	r0, #10
 8001da2:	dc16      	bgt.n	8001dd2 <__aeabi_i2d+0x4a>
 8001da4:	0002      	movs	r2, r0
 8001da6:	002e      	movs	r6, r5
 8001da8:	3215      	adds	r2, #21
 8001daa:	4096      	lsls	r6, r2
 8001dac:	220b      	movs	r2, #11
 8001dae:	1a12      	subs	r2, r2, r0
 8001db0:	40d5      	lsrs	r5, r2
 8001db2:	055b      	lsls	r3, r3, #21
 8001db4:	032d      	lsls	r5, r5, #12
 8001db6:	0b2d      	lsrs	r5, r5, #12
 8001db8:	0d5b      	lsrs	r3, r3, #21
 8001dba:	e003      	b.n	8001dc4 <__aeabi_i2d+0x3c>
 8001dbc:	2400      	movs	r4, #0
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	2500      	movs	r5, #0
 8001dc2:	2600      	movs	r6, #0
 8001dc4:	051b      	lsls	r3, r3, #20
 8001dc6:	432b      	orrs	r3, r5
 8001dc8:	07e4      	lsls	r4, r4, #31
 8001dca:	4323      	orrs	r3, r4
 8001dcc:	0030      	movs	r0, r6
 8001dce:	0019      	movs	r1, r3
 8001dd0:	bd70      	pop	{r4, r5, r6, pc}
 8001dd2:	380b      	subs	r0, #11
 8001dd4:	4085      	lsls	r5, r0
 8001dd6:	055b      	lsls	r3, r3, #21
 8001dd8:	032d      	lsls	r5, r5, #12
 8001dda:	2600      	movs	r6, #0
 8001ddc:	0b2d      	lsrs	r5, r5, #12
 8001dde:	0d5b      	lsrs	r3, r3, #21
 8001de0:	e7f0      	b.n	8001dc4 <__aeabi_i2d+0x3c>
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	0000041e 	.word	0x0000041e

08001de8 <__aeabi_f2d>:
 8001de8:	b570      	push	{r4, r5, r6, lr}
 8001dea:	0242      	lsls	r2, r0, #9
 8001dec:	0043      	lsls	r3, r0, #1
 8001dee:	0fc4      	lsrs	r4, r0, #31
 8001df0:	20fe      	movs	r0, #254	; 0xfe
 8001df2:	0e1b      	lsrs	r3, r3, #24
 8001df4:	1c59      	adds	r1, r3, #1
 8001df6:	0a55      	lsrs	r5, r2, #9
 8001df8:	4208      	tst	r0, r1
 8001dfa:	d00c      	beq.n	8001e16 <__aeabi_f2d+0x2e>
 8001dfc:	21e0      	movs	r1, #224	; 0xe0
 8001dfe:	0089      	lsls	r1, r1, #2
 8001e00:	468c      	mov	ip, r1
 8001e02:	076d      	lsls	r5, r5, #29
 8001e04:	0b12      	lsrs	r2, r2, #12
 8001e06:	4463      	add	r3, ip
 8001e08:	051b      	lsls	r3, r3, #20
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	07e4      	lsls	r4, r4, #31
 8001e0e:	4323      	orrs	r3, r4
 8001e10:	0028      	movs	r0, r5
 8001e12:	0019      	movs	r1, r3
 8001e14:	bd70      	pop	{r4, r5, r6, pc}
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d114      	bne.n	8001e44 <__aeabi_f2d+0x5c>
 8001e1a:	2d00      	cmp	r5, #0
 8001e1c:	d01b      	beq.n	8001e56 <__aeabi_f2d+0x6e>
 8001e1e:	0028      	movs	r0, r5
 8001e20:	f000 f8b0 	bl	8001f84 <__clzsi2>
 8001e24:	280a      	cmp	r0, #10
 8001e26:	dc1c      	bgt.n	8001e62 <__aeabi_f2d+0x7a>
 8001e28:	230b      	movs	r3, #11
 8001e2a:	002a      	movs	r2, r5
 8001e2c:	1a1b      	subs	r3, r3, r0
 8001e2e:	40da      	lsrs	r2, r3
 8001e30:	0003      	movs	r3, r0
 8001e32:	3315      	adds	r3, #21
 8001e34:	409d      	lsls	r5, r3
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <__aeabi_f2d+0x88>)
 8001e38:	0312      	lsls	r2, r2, #12
 8001e3a:	1a1b      	subs	r3, r3, r0
 8001e3c:	055b      	lsls	r3, r3, #21
 8001e3e:	0b12      	lsrs	r2, r2, #12
 8001e40:	0d5b      	lsrs	r3, r3, #21
 8001e42:	e7e1      	b.n	8001e08 <__aeabi_f2d+0x20>
 8001e44:	2d00      	cmp	r5, #0
 8001e46:	d009      	beq.n	8001e5c <__aeabi_f2d+0x74>
 8001e48:	0b13      	lsrs	r3, r2, #12
 8001e4a:	2280      	movs	r2, #128	; 0x80
 8001e4c:	0312      	lsls	r2, r2, #12
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	076d      	lsls	r5, r5, #29
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <__aeabi_f2d+0x8c>)
 8001e54:	e7d8      	b.n	8001e08 <__aeabi_f2d+0x20>
 8001e56:	2300      	movs	r3, #0
 8001e58:	2200      	movs	r2, #0
 8001e5a:	e7d5      	b.n	8001e08 <__aeabi_f2d+0x20>
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <__aeabi_f2d+0x8c>)
 8001e60:	e7d2      	b.n	8001e08 <__aeabi_f2d+0x20>
 8001e62:	0003      	movs	r3, r0
 8001e64:	002a      	movs	r2, r5
 8001e66:	3b0b      	subs	r3, #11
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	2500      	movs	r5, #0
 8001e6c:	e7e3      	b.n	8001e36 <__aeabi_f2d+0x4e>
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	00000389 	.word	0x00000389
 8001e74:	000007ff 	.word	0x000007ff

08001e78 <__aeabi_d2f>:
 8001e78:	0002      	movs	r2, r0
 8001e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7c:	004b      	lsls	r3, r1, #1
 8001e7e:	030d      	lsls	r5, r1, #12
 8001e80:	0f40      	lsrs	r0, r0, #29
 8001e82:	0d5b      	lsrs	r3, r3, #21
 8001e84:	0fcc      	lsrs	r4, r1, #31
 8001e86:	0a6d      	lsrs	r5, r5, #9
 8001e88:	493a      	ldr	r1, [pc, #232]	; (8001f74 <__aeabi_d2f+0xfc>)
 8001e8a:	4305      	orrs	r5, r0
 8001e8c:	1c58      	adds	r0, r3, #1
 8001e8e:	00d7      	lsls	r7, r2, #3
 8001e90:	4208      	tst	r0, r1
 8001e92:	d00a      	beq.n	8001eaa <__aeabi_d2f+0x32>
 8001e94:	4938      	ldr	r1, [pc, #224]	; (8001f78 <__aeabi_d2f+0x100>)
 8001e96:	1859      	adds	r1, r3, r1
 8001e98:	29fe      	cmp	r1, #254	; 0xfe
 8001e9a:	dd16      	ble.n	8001eca <__aeabi_d2f+0x52>
 8001e9c:	20ff      	movs	r0, #255	; 0xff
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	05c0      	lsls	r0, r0, #23
 8001ea2:	4310      	orrs	r0, r2
 8001ea4:	07e4      	lsls	r4, r4, #31
 8001ea6:	4320      	orrs	r0, r4
 8001ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <__aeabi_d2f+0x44>
 8001eae:	433d      	orrs	r5, r7
 8001eb0:	d026      	beq.n	8001f00 <__aeabi_d2f+0x88>
 8001eb2:	2205      	movs	r2, #5
 8001eb4:	0192      	lsls	r2, r2, #6
 8001eb6:	0a52      	lsrs	r2, r2, #9
 8001eb8:	b2d8      	uxtb	r0, r3
 8001eba:	e7f1      	b.n	8001ea0 <__aeabi_d2f+0x28>
 8001ebc:	432f      	orrs	r7, r5
 8001ebe:	d0ed      	beq.n	8001e9c <__aeabi_d2f+0x24>
 8001ec0:	2280      	movs	r2, #128	; 0x80
 8001ec2:	03d2      	lsls	r2, r2, #15
 8001ec4:	20ff      	movs	r0, #255	; 0xff
 8001ec6:	432a      	orrs	r2, r5
 8001ec8:	e7ea      	b.n	8001ea0 <__aeabi_d2f+0x28>
 8001eca:	2900      	cmp	r1, #0
 8001ecc:	dd1b      	ble.n	8001f06 <__aeabi_d2f+0x8e>
 8001ece:	0192      	lsls	r2, r2, #6
 8001ed0:	1e50      	subs	r0, r2, #1
 8001ed2:	4182      	sbcs	r2, r0
 8001ed4:	00ed      	lsls	r5, r5, #3
 8001ed6:	0f7f      	lsrs	r7, r7, #29
 8001ed8:	432a      	orrs	r2, r5
 8001eda:	433a      	orrs	r2, r7
 8001edc:	0753      	lsls	r3, r2, #29
 8001ede:	d047      	beq.n	8001f70 <__aeabi_d2f+0xf8>
 8001ee0:	230f      	movs	r3, #15
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d000      	beq.n	8001eea <__aeabi_d2f+0x72>
 8001ee8:	3204      	adds	r2, #4
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	04db      	lsls	r3, r3, #19
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d03e      	beq.n	8001f70 <__aeabi_d2f+0xf8>
 8001ef2:	1c48      	adds	r0, r1, #1
 8001ef4:	29fe      	cmp	r1, #254	; 0xfe
 8001ef6:	d0d1      	beq.n	8001e9c <__aeabi_d2f+0x24>
 8001ef8:	0192      	lsls	r2, r2, #6
 8001efa:	0a52      	lsrs	r2, r2, #9
 8001efc:	b2c0      	uxtb	r0, r0
 8001efe:	e7cf      	b.n	8001ea0 <__aeabi_d2f+0x28>
 8001f00:	2000      	movs	r0, #0
 8001f02:	2200      	movs	r2, #0
 8001f04:	e7cc      	b.n	8001ea0 <__aeabi_d2f+0x28>
 8001f06:	000a      	movs	r2, r1
 8001f08:	3217      	adds	r2, #23
 8001f0a:	db2f      	blt.n	8001f6c <__aeabi_d2f+0xf4>
 8001f0c:	2680      	movs	r6, #128	; 0x80
 8001f0e:	0436      	lsls	r6, r6, #16
 8001f10:	432e      	orrs	r6, r5
 8001f12:	251e      	movs	r5, #30
 8001f14:	1a6d      	subs	r5, r5, r1
 8001f16:	2d1f      	cmp	r5, #31
 8001f18:	dd11      	ble.n	8001f3e <__aeabi_d2f+0xc6>
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	4252      	negs	r2, r2
 8001f1e:	1a52      	subs	r2, r2, r1
 8001f20:	0031      	movs	r1, r6
 8001f22:	40d1      	lsrs	r1, r2
 8001f24:	2d20      	cmp	r5, #32
 8001f26:	d004      	beq.n	8001f32 <__aeabi_d2f+0xba>
 8001f28:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <__aeabi_d2f+0x104>)
 8001f2a:	4694      	mov	ip, r2
 8001f2c:	4463      	add	r3, ip
 8001f2e:	409e      	lsls	r6, r3
 8001f30:	4337      	orrs	r7, r6
 8001f32:	003a      	movs	r2, r7
 8001f34:	1e53      	subs	r3, r2, #1
 8001f36:	419a      	sbcs	r2, r3
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	e7ce      	b.n	8001edc <__aeabi_d2f+0x64>
 8001f3e:	4a10      	ldr	r2, [pc, #64]	; (8001f80 <__aeabi_d2f+0x108>)
 8001f40:	0038      	movs	r0, r7
 8001f42:	4694      	mov	ip, r2
 8001f44:	4463      	add	r3, ip
 8001f46:	4098      	lsls	r0, r3
 8001f48:	003a      	movs	r2, r7
 8001f4a:	1e41      	subs	r1, r0, #1
 8001f4c:	4188      	sbcs	r0, r1
 8001f4e:	409e      	lsls	r6, r3
 8001f50:	40ea      	lsrs	r2, r5
 8001f52:	4330      	orrs	r0, r6
 8001f54:	4302      	orrs	r2, r0
 8001f56:	2100      	movs	r1, #0
 8001f58:	0753      	lsls	r3, r2, #29
 8001f5a:	d1c1      	bne.n	8001ee0 <__aeabi_d2f+0x68>
 8001f5c:	2180      	movs	r1, #128	; 0x80
 8001f5e:	0013      	movs	r3, r2
 8001f60:	04c9      	lsls	r1, r1, #19
 8001f62:	2001      	movs	r0, #1
 8001f64:	400b      	ands	r3, r1
 8001f66:	420a      	tst	r2, r1
 8001f68:	d1c6      	bne.n	8001ef8 <__aeabi_d2f+0x80>
 8001f6a:	e7a3      	b.n	8001eb4 <__aeabi_d2f+0x3c>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e7a0      	b.n	8001eb2 <__aeabi_d2f+0x3a>
 8001f70:	000b      	movs	r3, r1
 8001f72:	e79f      	b.n	8001eb4 <__aeabi_d2f+0x3c>
 8001f74:	000007fe 	.word	0x000007fe
 8001f78:	fffffc80 	.word	0xfffffc80
 8001f7c:	fffffca2 	.word	0xfffffca2
 8001f80:	fffffc82 	.word	0xfffffc82

08001f84 <__clzsi2>:
 8001f84:	211c      	movs	r1, #28
 8001f86:	2301      	movs	r3, #1
 8001f88:	041b      	lsls	r3, r3, #16
 8001f8a:	4298      	cmp	r0, r3
 8001f8c:	d301      	bcc.n	8001f92 <__clzsi2+0xe>
 8001f8e:	0c00      	lsrs	r0, r0, #16
 8001f90:	3910      	subs	r1, #16
 8001f92:	0a1b      	lsrs	r3, r3, #8
 8001f94:	4298      	cmp	r0, r3
 8001f96:	d301      	bcc.n	8001f9c <__clzsi2+0x18>
 8001f98:	0a00      	lsrs	r0, r0, #8
 8001f9a:	3908      	subs	r1, #8
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	4298      	cmp	r0, r3
 8001fa0:	d301      	bcc.n	8001fa6 <__clzsi2+0x22>
 8001fa2:	0900      	lsrs	r0, r0, #4
 8001fa4:	3904      	subs	r1, #4
 8001fa6:	a202      	add	r2, pc, #8	; (adr r2, 8001fb0 <__clzsi2+0x2c>)
 8001fa8:	5c10      	ldrb	r0, [r2, r0]
 8001faa:	1840      	adds	r0, r0, r1
 8001fac:	4770      	bx	lr
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	02020304 	.word	0x02020304
 8001fb4:	01010101 	.word	0x01010101
	...

08001fc0 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	0018      	movs	r0, r3
 8001fca:	230c      	movs	r3, #12
 8001fcc:	001a      	movs	r2, r3
 8001fce:	2100      	movs	r1, #0
 8001fd0:	f002 ff60 	bl	8004e94 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001fd4:	4b25      	ldr	r3, [pc, #148]	; (800206c <MX_ADC_Init+0xac>)
 8001fd6:	4a26      	ldr	r2, [pc, #152]	; (8002070 <MX_ADC_Init+0xb0>)
 8001fd8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <MX_ADC_Init+0xac>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001fe0:	4b22      	ldr	r3, [pc, #136]	; (800206c <MX_ADC_Init+0xac>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fe6:	4b21      	ldr	r3, [pc, #132]	; (800206c <MX_ADC_Init+0xac>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <MX_ADC_Init+0xac>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <MX_ADC_Init+0xac>)
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	; (800206c <MX_ADC_Init+0xac>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <MX_ADC_Init+0xac>)
 8002000:	2200      	movs	r2, #0
 8002002:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <MX_ADC_Init+0xac>)
 8002006:	2201      	movs	r2, #1
 8002008:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <MX_ADC_Init+0xac>)
 800200c:	2200      	movs	r2, #0
 800200e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002010:	4b16      	ldr	r3, [pc, #88]	; (800206c <MX_ADC_Init+0xac>)
 8002012:	22c2      	movs	r2, #194	; 0xc2
 8002014:	32ff      	adds	r2, #255	; 0xff
 8002016:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <MX_ADC_Init+0xac>)
 800201a:	2200      	movs	r2, #0
 800201c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <MX_ADC_Init+0xac>)
 8002020:	2224      	movs	r2, #36	; 0x24
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <MX_ADC_Init+0xac>)
 8002028:	2201      	movs	r2, #1
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <MX_ADC_Init+0xac>)
 800202e:	0018      	movs	r0, r3
 8002030:	f000 ff28 	bl	8002e84 <HAL_ADC_Init>
 8002034:	1e03      	subs	r3, r0, #0
 8002036:	d001      	beq.n	800203c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002038:	f000 fa2a 	bl	8002490 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	2209      	movs	r2, #9
 8002040:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	0152      	lsls	r2, r2, #5
 8002048:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	2207      	movs	r2, #7
 800204e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002050:	1d3a      	adds	r2, r7, #4
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <MX_ADC_Init+0xac>)
 8002054:	0011      	movs	r1, r2
 8002056:	0018      	movs	r0, r3
 8002058:	f001 f8ee 	bl	8003238 <HAL_ADC_ConfigChannel>
 800205c:	1e03      	subs	r3, r0, #0
 800205e:	d001      	beq.n	8002064 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8002060:	f000 fa16 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002064:	46c0      	nop			; (mov r8, r8)
 8002066:	46bd      	mov	sp, r7
 8002068:	b004      	add	sp, #16
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000030 	.word	0x20000030
 8002070:	40012400 	.word	0x40012400

08002074 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b08b      	sub	sp, #44	; 0x2c
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	2414      	movs	r4, #20
 800207e:	193b      	adds	r3, r7, r4
 8002080:	0018      	movs	r0, r3
 8002082:	2314      	movs	r3, #20
 8002084:	001a      	movs	r2, r3
 8002086:	2100      	movs	r1, #0
 8002088:	f002 ff04 	bl	8004e94 <memset>
  if(adcHandle->Instance==ADC1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a2d      	ldr	r2, [pc, #180]	; (8002148 <HAL_ADC_MspInit+0xd4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d153      	bne.n	800213e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002096:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_ADC_MspInit+0xd8>)
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	4b2c      	ldr	r3, [pc, #176]	; (800214c <HAL_ADC_MspInit+0xd8>)
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0089      	lsls	r1, r1, #2
 80020a0:	430a      	orrs	r2, r1
 80020a2:	619a      	str	r2, [r3, #24]
 80020a4:	4b29      	ldr	r3, [pc, #164]	; (800214c <HAL_ADC_MspInit+0xd8>)
 80020a6:	699a      	ldr	r2, [r3, #24]
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <HAL_ADC_MspInit+0xd8>)
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <HAL_ADC_MspInit+0xd8>)
 80020b8:	2180      	movs	r1, #128	; 0x80
 80020ba:	02c9      	lsls	r1, r1, #11
 80020bc:	430a      	orrs	r2, r1
 80020be:	615a      	str	r2, [r3, #20]
 80020c0:	4b22      	ldr	r3, [pc, #136]	; (800214c <HAL_ADC_MspInit+0xd8>)
 80020c2:	695a      	ldr	r2, [r3, #20]
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	02db      	lsls	r3, r3, #11
 80020c8:	4013      	ands	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = CHECK_VOLTAGE_Pin;
 80020ce:	193b      	adds	r3, r7, r4
 80020d0:	2202      	movs	r2, #2
 80020d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d4:	193b      	adds	r3, r7, r4
 80020d6:	2203      	movs	r2, #3
 80020d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	193b      	adds	r3, r7, r4
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(CHECK_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80020e0:	193b      	adds	r3, r7, r4
 80020e2:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <HAL_ADC_MspInit+0xdc>)
 80020e4:	0019      	movs	r1, r3
 80020e6:	0010      	movs	r0, r2
 80020e8:	f001 fd1a 	bl	8003b20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_ADC_MspInit+0xe0>)
 80020ee:	4a1a      	ldr	r2, [pc, #104]	; (8002158 <HAL_ADC_MspInit+0xe4>)
 80020f0:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020f2:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_ADC_MspInit+0xe0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_ADC_MspInit+0xe0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <HAL_ADC_MspInit+0xe0>)
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <HAL_ADC_MspInit+0xe0>)
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	0052      	lsls	r2, r2, #1
 800210a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_ADC_MspInit+0xe0>)
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	00d2      	lsls	r2, r2, #3
 8002112:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_ADC_MspInit+0xe0>)
 8002116:	2220      	movs	r2, #32
 8002118:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_ADC_MspInit+0xe0>)
 800211c:	2280      	movs	r2, #128	; 0x80
 800211e:	0152      	lsls	r2, r2, #5
 8002120:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_ADC_MspInit+0xe0>)
 8002124:	0018      	movs	r0, r3
 8002126:	f001 fb63 	bl	80037f0 <HAL_DMA_Init>
 800212a:	1e03      	subs	r3, r0, #0
 800212c:	d001      	beq.n	8002132 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800212e:	f000 f9af 	bl	8002490 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a07      	ldr	r2, [pc, #28]	; (8002154 <HAL_ADC_MspInit+0xe0>)
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_ADC_MspInit+0xe0>)
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	46bd      	mov	sp, r7
 8002142:	b00b      	add	sp, #44	; 0x2c
 8002144:	bd90      	pop	{r4, r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	40012400 	.word	0x40012400
 800214c:	40021000 	.word	0x40021000
 8002150:	48000400 	.word	0x48000400
 8002154:	20000070 	.word	0x20000070
 8002158:	40020008 	.word	0x40020008

0800215c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <MX_DMA_Init+0x38>)
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <MX_DMA_Init+0x38>)
 8002168:	2101      	movs	r1, #1
 800216a:	430a      	orrs	r2, r1
 800216c:	615a      	str	r2, [r3, #20]
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <MX_DMA_Init+0x38>)
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	2201      	movs	r2, #1
 8002174:	4013      	ands	r3, r2
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	2100      	movs	r1, #0
 800217e:	2009      	movs	r0, #9
 8002180:	f001 fb04 	bl	800378c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002184:	2009      	movs	r0, #9
 8002186:	f001 fb16 	bl	80037b6 <HAL_NVIC_EnableIRQ>

}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	b002      	add	sp, #8
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	40021000 	.word	0x40021000

08002198 <low_pass_filter>:

}


float low_pass_filter(void)
{
 8002198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
	if(_1sFlag)
 800219e:	4b3f      	ldr	r3, [pc, #252]	; (800229c <low_pass_filter+0x104>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d073      	beq.n	800228e <low_pass_filter+0xf6>
	{
		// 2481 ADC REAL = 27.00 volt MEASURE = 28.00  K = 13.505
		uint8_t multiplierCorrection =13.52;
 80021a6:	260f      	movs	r6, #15
 80021a8:	19bb      	adds	r3, r7, r6
 80021aa:	220d      	movs	r2, #13
 80021ac:	701a      	strb	r2, [r3, #0]
//
//		else
//		{
//			multiplierCorrection = 13.65;
//		}
		voltmeter.voltage = (((3.3/4095)*voltmeter.adcValue) * multiplierCorrection)+0.5;
 80021ae:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <low_pass_filter+0x108>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	0018      	movs	r0, r3
 80021b6:	f7ff fde7 	bl	8001d88 <__aeabi_i2d>
 80021ba:	4a3a      	ldr	r2, [pc, #232]	; (80022a4 <low_pass_filter+0x10c>)
 80021bc:	4b3a      	ldr	r3, [pc, #232]	; (80022a8 <low_pass_filter+0x110>)
 80021be:	f7fe ff9f 	bl	8001100 <__aeabi_dmul>
 80021c2:	0002      	movs	r2, r0
 80021c4:	000b      	movs	r3, r1
 80021c6:	0014      	movs	r4, r2
 80021c8:	001d      	movs	r5, r3
 80021ca:	19bb      	adds	r3, r7, r6
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	0018      	movs	r0, r3
 80021d0:	f7ff fdda 	bl	8001d88 <__aeabi_i2d>
 80021d4:	0002      	movs	r2, r0
 80021d6:	000b      	movs	r3, r1
 80021d8:	0020      	movs	r0, r4
 80021da:	0029      	movs	r1, r5
 80021dc:	f7fe ff90 	bl	8001100 <__aeabi_dmul>
 80021e0:	0002      	movs	r2, r0
 80021e2:	000b      	movs	r3, r1
 80021e4:	0010      	movs	r0, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	2200      	movs	r2, #0
 80021ea:	4b30      	ldr	r3, [pc, #192]	; (80022ac <low_pass_filter+0x114>)
 80021ec:	f7fe fc28 	bl	8000a40 <__aeabi_dadd>
 80021f0:	0002      	movs	r2, r0
 80021f2:	000b      	movs	r3, r1
 80021f4:	0010      	movs	r0, r2
 80021f6:	0019      	movs	r1, r3
 80021f8:	f7ff fe3e 	bl	8001e78 <__aeabi_d2f>
 80021fc:	1c02      	adds	r2, r0, #0
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <low_pass_filter+0x108>)
 8002200:	605a      	str	r2, [r3, #4]

		if(voltmeter.voltage < 22)
 8002202:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <low_pass_filter+0x108>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	492a      	ldr	r1, [pc, #168]	; (80022b0 <low_pass_filter+0x118>)
 8002208:	1c18      	adds	r0, r3, #0
 800220a:	f7fe f81b 	bl	8000244 <__aeabi_fcmplt>
 800220e:	1e03      	subs	r3, r0, #0
 8002210:	d003      	beq.n	800221a <low_pass_filter+0x82>
		{
			voltmeter.mode = false;
 8002212:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <low_pass_filter+0x108>)
 8002214:	2200      	movs	r2, #0
 8002216:	709a      	strb	r2, [r3, #2]
 8002218:	e002      	b.n	8002220 <low_pass_filter+0x88>
		}
		else
		{
			voltmeter.mode = true;
 800221a:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <low_pass_filter+0x108>)
 800221c:	2201      	movs	r2, #1
 800221e:	709a      	strb	r2, [r3, #2]
		}

	    filtered = alpha * voltmeter.voltage + (1.0 - alpha) * filtered;
 8002220:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <low_pass_filter+0x108>)
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <low_pass_filter+0x11c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	1c19      	adds	r1, r3, #0
 800222a:	1c10      	adds	r0, r2, #0
 800222c:	f7fe f8fa 	bl	8000424 <__aeabi_fmul>
 8002230:	1c03      	adds	r3, r0, #0
 8002232:	1c18      	adds	r0, r3, #0
 8002234:	f7ff fdd8 	bl	8001de8 <__aeabi_f2d>
 8002238:	0004      	movs	r4, r0
 800223a:	000d      	movs	r5, r1
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <low_pass_filter+0x11c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	1c18      	adds	r0, r3, #0
 8002242:	f7ff fdd1 	bl	8001de8 <__aeabi_f2d>
 8002246:	0002      	movs	r2, r0
 8002248:	000b      	movs	r3, r1
 800224a:	2000      	movs	r0, #0
 800224c:	491a      	ldr	r1, [pc, #104]	; (80022b8 <low_pass_filter+0x120>)
 800224e:	f7ff fa19 	bl	8001684 <__aeabi_dsub>
 8002252:	0002      	movs	r2, r0
 8002254:	000b      	movs	r3, r1
 8002256:	603a      	str	r2, [r7, #0]
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <low_pass_filter+0x124>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	1c18      	adds	r0, r3, #0
 8002260:	f7ff fdc2 	bl	8001de8 <__aeabi_f2d>
 8002264:	0002      	movs	r2, r0
 8002266:	000b      	movs	r3, r1
 8002268:	6838      	ldr	r0, [r7, #0]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	f7fe ff48 	bl	8001100 <__aeabi_dmul>
 8002270:	0002      	movs	r2, r0
 8002272:	000b      	movs	r3, r1
 8002274:	0020      	movs	r0, r4
 8002276:	0029      	movs	r1, r5
 8002278:	f7fe fbe2 	bl	8000a40 <__aeabi_dadd>
 800227c:	0002      	movs	r2, r0
 800227e:	000b      	movs	r3, r1
 8002280:	0010      	movs	r0, r2
 8002282:	0019      	movs	r1, r3
 8002284:	f7ff fdf8 	bl	8001e78 <__aeabi_d2f>
 8002288:	1c02      	adds	r2, r0, #0
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <low_pass_filter+0x124>)
 800228c:	601a      	str	r2, [r3, #0]
	}

    return filtered;
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <low_pass_filter+0x124>)
 8002290:	681b      	ldr	r3, [r3, #0]
}
 8002292:	1c18      	adds	r0, r3, #0
 8002294:	46bd      	mov	sp, r7
 8002296:	b005      	add	sp, #20
 8002298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	20000134 	.word	0x20000134
 80022a0:	200000b8 	.word	0x200000b8
 80022a4:	e734d9b4 	.word	0xe734d9b4
 80022a8:	3f4a680c 	.word	0x3f4a680c
 80022ac:	3fe00000 	.word	0x3fe00000
 80022b0:	41b00000 	.word	0x41b00000
 80022b4:	20000000 	.word	0x20000000
 80022b8:	3ff00000 	.word	0x3ff00000
 80022bc:	200000b4 	.word	0x200000b4

080022c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c6:	240c      	movs	r4, #12
 80022c8:	193b      	adds	r3, r7, r4
 80022ca:	0018      	movs	r0, r3
 80022cc:	2314      	movs	r3, #20
 80022ce:	001a      	movs	r2, r3
 80022d0:	2100      	movs	r1, #0
 80022d2:	f002 fddf 	bl	8004e94 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	4b29      	ldr	r3, [pc, #164]	; (800237c <MX_GPIO_Init+0xbc>)
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	4b28      	ldr	r3, [pc, #160]	; (800237c <MX_GPIO_Init+0xbc>)
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	0289      	lsls	r1, r1, #10
 80022e0:	430a      	orrs	r2, r1
 80022e2:	615a      	str	r2, [r3, #20]
 80022e4:	4b25      	ldr	r3, [pc, #148]	; (800237c <MX_GPIO_Init+0xbc>)
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	029b      	lsls	r3, r3, #10
 80022ec:	4013      	ands	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f2:	4b22      	ldr	r3, [pc, #136]	; (800237c <MX_GPIO_Init+0xbc>)
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <MX_GPIO_Init+0xbc>)
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	02c9      	lsls	r1, r1, #11
 80022fc:	430a      	orrs	r2, r1
 80022fe:	615a      	str	r2, [r3, #20]
 8002300:	4b1e      	ldr	r3, [pc, #120]	; (800237c <MX_GPIO_Init+0xbc>)
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	02db      	lsls	r3, r3, #11
 8002308:	4013      	ands	r3, r2
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIGIT_4_Pin|SEG_C_Pin|SEG_G_Pin|DIGIT_3_Pin
 800230e:	491c      	ldr	r1, [pc, #112]	; (8002380 <MX_GPIO_Init+0xc0>)
 8002310:	2390      	movs	r3, #144	; 0x90
 8002312:	05db      	lsls	r3, r3, #23
 8002314:	2200      	movs	r2, #0
 8002316:	0018      	movs	r0, r3
 8002318:	f001 fd72 	bl	8003e00 <HAL_GPIO_WritePin>
                          |DIGIT_2_Pin|SEG_B_Pin|SEG_F_Pin|SEG_A_Pin
                          |DIGIT_1_Pin|SEG_D_Pin|SEG_DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <MX_GPIO_Init+0xc4>)
 800231e:	2200      	movs	r2, #0
 8002320:	2108      	movs	r1, #8
 8002322:	0018      	movs	r0, r3
 8002324:	f001 fd6c 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DIGIT_4_Pin|SEG_C_Pin|SEG_G_Pin|DIGIT_3_Pin
 8002328:	193b      	adds	r3, r7, r4
 800232a:	4a15      	ldr	r2, [pc, #84]	; (8002380 <MX_GPIO_Init+0xc0>)
 800232c:	601a      	str	r2, [r3, #0]
                          |DIGIT_2_Pin|SEG_B_Pin|SEG_F_Pin|SEG_A_Pin
                          |DIGIT_1_Pin|SEG_D_Pin|SEG_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232e:	193b      	adds	r3, r7, r4
 8002330:	2201      	movs	r2, #1
 8002332:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	193b      	adds	r3, r7, r4
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	193b      	adds	r3, r7, r4
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002340:	193a      	adds	r2, r7, r4
 8002342:	2390      	movs	r3, #144	; 0x90
 8002344:	05db      	lsls	r3, r3, #23
 8002346:	0011      	movs	r1, r2
 8002348:	0018      	movs	r0, r3
 800234a:	f001 fbe9 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_E_Pin;
 800234e:	0021      	movs	r1, r4
 8002350:	187b      	adds	r3, r7, r1
 8002352:	2208      	movs	r2, #8
 8002354:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002356:	187b      	adds	r3, r7, r1
 8002358:	2201      	movs	r2, #1
 800235a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	187b      	adds	r3, r7, r1
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	187b      	adds	r3, r7, r1
 8002364:	2200      	movs	r2, #0
 8002366:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SEG_E_GPIO_Port, &GPIO_InitStruct);
 8002368:	187b      	adds	r3, r7, r1
 800236a:	4a06      	ldr	r2, [pc, #24]	; (8002384 <MX_GPIO_Init+0xc4>)
 800236c:	0019      	movs	r1, r3
 800236e:	0010      	movs	r0, r2
 8002370:	f001 fbd6 	bl	8003b20 <HAL_GPIO_Init>

}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	b009      	add	sp, #36	; 0x24
 800237a:	bd90      	pop	{r4, r7, pc}
 800237c:	40021000 	.word	0x40021000
 8002380:	00001f7e 	.word	0x00001f7e
 8002384:	48000400 	.word	0x48000400

08002388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	voltmeter.adcValue = 0;
 800238c:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <main+0x5c>)
 800238e:	2200      	movs	r2, #0
 8002390:	801a      	strh	r2, [r3, #0]
	voltmeter.mode = true;
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <main+0x5c>)
 8002394:	2201      	movs	r2, #1
 8002396:	709a      	strb	r2, [r3, #2]
	voltmeter.blinkFlag = false;
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <main+0x5c>)
 800239a:	2200      	movs	r2, #0
 800239c:	721a      	strb	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800239e:	f000 fd0d 	bl	8002dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023a2:	f000 f825 	bl	80023f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023a6:	f7ff ff8b 	bl	80022c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80023aa:	f7ff fed7 	bl	800215c <MX_DMA_Init>
  MX_ADC_Init();
 80023ae:	f7ff fe07 	bl	8001fc0 <MX_ADC_Init>
  MX_TIM3_Init();
 80023b2:	f000 faa1 	bl	80028f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)&voltmeter.adcValue, 1);
 80023b6:	490b      	ldr	r1, [pc, #44]	; (80023e4 <main+0x5c>)
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <main+0x60>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	0018      	movs	r0, r3
 80023be:	f000 fea1 	bl	8003104 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <main+0x64>)
 80023c4:	0018      	movs	r0, r3
 80023c6:	f002 f9c7 	bl	8004758 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  startTimeScanFlags();
 80023ca:	f000 fc03 	bl	8002bd4 <startTimeScanFlags>
//	    SEGMENT_CONTROL(SEG_F,SEGMENT_OFF);
//	    SEGMENT_CONTROL(SEG_G,SEGMENT_OFF);
//	    SEGMENT_CONTROL(SEG_DP,SEGMENT_OFF);

	  //float deneme = low_pass_filter();
	  sevenSegmentDisplaySetNumbers(low_pass_filter());
 80023ce:	f7ff fee3 	bl	8002198 <low_pass_filter>
 80023d2:	1c03      	adds	r3, r0, #0
 80023d4:	1c18      	adds	r0, r3, #0
 80023d6:	f000 f9e5 	bl	80027a4 <sevenSegmentDisplaySetNumbers>

//	  sevenSegmentDisplaySetDigit(0, 0, 2);
//	  sevenSegmentDisplaySetDigit(1, 9, 2);
//	  sevenSegmentDisplaySetDigit(2, 9, 2);
//	  sevenSegmentDisplaySetDigit(3, 0, 2);
	  sevenSegmentDisplayUpdate();
 80023da:	f000 f9ad 	bl	8002738 <sevenSegmentDisplayUpdate>


	  clearTimeScanFlags();
 80023de:	f000 fc8b 	bl	8002cf8 <clearTimeScanFlags>
	  startTimeScanFlags();
 80023e2:	e7f2      	b.n	80023ca <main+0x42>
 80023e4:	200000b8 	.word	0x200000b8
 80023e8:	20000030 	.word	0x20000030
 80023ec:	200000cc 	.word	0x200000cc

080023f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b091      	sub	sp, #68	; 0x44
 80023f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023f6:	2410      	movs	r4, #16
 80023f8:	193b      	adds	r3, r7, r4
 80023fa:	0018      	movs	r0, r3
 80023fc:	2330      	movs	r3, #48	; 0x30
 80023fe:	001a      	movs	r2, r3
 8002400:	2100      	movs	r1, #0
 8002402:	f002 fd47 	bl	8004e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002406:	003b      	movs	r3, r7
 8002408:	0018      	movs	r0, r3
 800240a:	2310      	movs	r3, #16
 800240c:	001a      	movs	r2, r3
 800240e:	2100      	movs	r1, #0
 8002410:	f002 fd40 	bl	8004e94 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002414:	0021      	movs	r1, r4
 8002416:	187b      	adds	r3, r7, r1
 8002418:	2212      	movs	r2, #18
 800241a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800241c:	187b      	adds	r3, r7, r1
 800241e:	2201      	movs	r2, #1
 8002420:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002422:	187b      	adds	r3, r7, r1
 8002424:	2201      	movs	r2, #1
 8002426:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002428:	187b      	adds	r3, r7, r1
 800242a:	2210      	movs	r2, #16
 800242c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800242e:	187b      	adds	r3, r7, r1
 8002430:	2210      	movs	r2, #16
 8002432:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002434:	187b      	adds	r3, r7, r1
 8002436:	2202      	movs	r2, #2
 8002438:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800243a:	187b      	adds	r3, r7, r1
 800243c:	2200      	movs	r2, #0
 800243e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002440:	187b      	adds	r3, r7, r1
 8002442:	2280      	movs	r2, #128	; 0x80
 8002444:	0352      	lsls	r2, r2, #13
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002448:	187b      	adds	r3, r7, r1
 800244a:	2200      	movs	r2, #0
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800244e:	187b      	adds	r3, r7, r1
 8002450:	0018      	movs	r0, r3
 8002452:	f001 fcf3 	bl	8003e3c <HAL_RCC_OscConfig>
 8002456:	1e03      	subs	r3, r0, #0
 8002458:	d001      	beq.n	800245e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800245a:	f000 f819 	bl	8002490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800245e:	003b      	movs	r3, r7
 8002460:	2207      	movs	r2, #7
 8002462:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002464:	003b      	movs	r3, r7
 8002466:	2202      	movs	r2, #2
 8002468:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800246a:	003b      	movs	r3, r7
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002470:	003b      	movs	r3, r7
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002476:	003b      	movs	r3, r7
 8002478:	2100      	movs	r1, #0
 800247a:	0018      	movs	r0, r3
 800247c:	f001 fff8 	bl	8004470 <HAL_RCC_ClockConfig>
 8002480:	1e03      	subs	r3, r0, #0
 8002482:	d001      	beq.n	8002488 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002484:	f000 f804 	bl	8002490 <Error_Handler>
  }
}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	b011      	add	sp, #68	; 0x44
 800248e:	bd90      	pop	{r4, r7, pc}

08002490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002494:	b672      	cpsid	i
}
 8002496:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002498:	e7fe      	b.n	8002498 <Error_Handler+0x8>
	...

0800249c <sevenSegmentDisplaySetDigit>:

volatile uint8_t currentDigit = 0;
volatile uint8_t digits[4] = {0, 0, 0, 0};

void sevenSegmentDisplaySetDigit(uint8_t digitPosition, uint8_t number, uint8_t decimalPosition)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	0004      	movs	r4, r0
 80024a4:	0008      	movs	r0, r1
 80024a6:	0011      	movs	r1, r2
 80024a8:	1dfb      	adds	r3, r7, #7
 80024aa:	1c22      	adds	r2, r4, #0
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	1dbb      	adds	r3, r7, #6
 80024b0:	1c02      	adds	r2, r0, #0
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	1d7b      	adds	r3, r7, #5
 80024b6:	1c0a      	adds	r2, r1, #0
 80024b8:	701a      	strb	r2, [r3, #0]

    if (!voltmeter.blinkFlag && !voltmeter.mode)
 80024ba:	4b9c      	ldr	r3, [pc, #624]	; (800272c <sevenSegmentDisplaySetDigit+0x290>)
 80024bc:	7a1b      	ldrb	r3, [r3, #8]
 80024be:	2201      	movs	r2, #1
 80024c0:	4053      	eors	r3, r2
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d060      	beq.n	800258a <sevenSegmentDisplaySetDigit+0xee>
 80024c8:	4b98      	ldr	r3, [pc, #608]	; (800272c <sevenSegmentDisplaySetDigit+0x290>)
 80024ca:	789b      	ldrb	r3, [r3, #2]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2201      	movs	r2, #1
 80024d0:	4053      	eors	r3, r2
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d058      	beq.n	800258a <sevenSegmentDisplaySetDigit+0xee>
    {
        DIGIT_CONTROL(DIGIT_1,DIGIT_OFF);
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	00d9      	lsls	r1, r3, #3
 80024dc:	2390      	movs	r3, #144	; 0x90
 80024de:	05db      	lsls	r3, r3, #23
 80024e0:	2200      	movs	r2, #0
 80024e2:	0018      	movs	r0, r3
 80024e4:	f001 fc8c 	bl	8003e00 <HAL_GPIO_WritePin>
        DIGIT_CONTROL(DIGIT_2,DIGIT_OFF);
 80024e8:	2390      	movs	r3, #144	; 0x90
 80024ea:	05db      	lsls	r3, r3, #23
 80024ec:	2200      	movs	r2, #0
 80024ee:	2120      	movs	r1, #32
 80024f0:	0018      	movs	r0, r3
 80024f2:	f001 fc85 	bl	8003e00 <HAL_GPIO_WritePin>
        DIGIT_CONTROL(DIGIT_3,DIGIT_OFF);
 80024f6:	2390      	movs	r3, #144	; 0x90
 80024f8:	05db      	lsls	r3, r3, #23
 80024fa:	2200      	movs	r2, #0
 80024fc:	2110      	movs	r1, #16
 80024fe:	0018      	movs	r0, r3
 8002500:	f001 fc7e 	bl	8003e00 <HAL_GPIO_WritePin>
        DIGIT_CONTROL(DIGIT_4,DIGIT_OFF);
 8002504:	2390      	movs	r3, #144	; 0x90
 8002506:	05db      	lsls	r3, r3, #23
 8002508:	2200      	movs	r2, #0
 800250a:	2102      	movs	r1, #2
 800250c:	0018      	movs	r0, r3
 800250e:	f001 fc77 	bl	8003e00 <HAL_GPIO_WritePin>
        SEGMENT_CONTROL(SEG_A, SEGMENT_OFF);
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	0099      	lsls	r1, r3, #2
 8002516:	2390      	movs	r3, #144	; 0x90
 8002518:	05db      	lsls	r3, r3, #23
 800251a:	2201      	movs	r2, #1
 800251c:	0018      	movs	r0, r3
 800251e:	f001 fc6f 	bl	8003e00 <HAL_GPIO_WritePin>
        SEGMENT_CONTROL(SEG_B, SEGMENT_OFF);
 8002522:	2390      	movs	r3, #144	; 0x90
 8002524:	05db      	lsls	r3, r3, #23
 8002526:	2201      	movs	r2, #1
 8002528:	2140      	movs	r1, #64	; 0x40
 800252a:	0018      	movs	r0, r3
 800252c:	f001 fc68 	bl	8003e00 <HAL_GPIO_WritePin>
        SEGMENT_CONTROL(SEG_C, SEGMENT_OFF);
 8002530:	2390      	movs	r3, #144	; 0x90
 8002532:	05db      	lsls	r3, r3, #23
 8002534:	2201      	movs	r2, #1
 8002536:	2104      	movs	r1, #4
 8002538:	0018      	movs	r0, r3
 800253a:	f001 fc61 	bl	8003e00 <HAL_GPIO_WritePin>
        SEGMENT_CONTROL(SEG_D, SEGMENT_OFF);
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	0119      	lsls	r1, r3, #4
 8002542:	2390      	movs	r3, #144	; 0x90
 8002544:	05db      	lsls	r3, r3, #23
 8002546:	2201      	movs	r2, #1
 8002548:	0018      	movs	r0, r3
 800254a:	f001 fc59 	bl	8003e00 <HAL_GPIO_WritePin>
        SEGMENT_CONTROL(SEG_E, SEGMENT_OFF);
 800254e:	4b78      	ldr	r3, [pc, #480]	; (8002730 <sevenSegmentDisplaySetDigit+0x294>)
 8002550:	2201      	movs	r2, #1
 8002552:	2108      	movs	r1, #8
 8002554:	0018      	movs	r0, r3
 8002556:	f001 fc53 	bl	8003e00 <HAL_GPIO_WritePin>
        SEGMENT_CONTROL(SEG_F, SEGMENT_OFF);
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	0059      	lsls	r1, r3, #1
 800255e:	2390      	movs	r3, #144	; 0x90
 8002560:	05db      	lsls	r3, r3, #23
 8002562:	2201      	movs	r2, #1
 8002564:	0018      	movs	r0, r3
 8002566:	f001 fc4b 	bl	8003e00 <HAL_GPIO_WritePin>
        SEGMENT_CONTROL(SEG_G, SEGMENT_OFF);
 800256a:	2390      	movs	r3, #144	; 0x90
 800256c:	05db      	lsls	r3, r3, #23
 800256e:	2201      	movs	r2, #1
 8002570:	2108      	movs	r1, #8
 8002572:	0018      	movs	r0, r3
 8002574:	f001 fc44 	bl	8003e00 <HAL_GPIO_WritePin>
        SEGMENT_CONTROL(SEG_DP, SEGMENT_OFF);
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	0159      	lsls	r1, r3, #5
 800257c:	2390      	movs	r3, #144	; 0x90
 800257e:	05db      	lsls	r3, r3, #23
 8002580:	2201      	movs	r2, #1
 8002582:	0018      	movs	r0, r3
 8002584:	f001 fc3c 	bl	8003e00 <HAL_GPIO_WritePin>
        return;
 8002588:	e0cd      	b.n	8002726 <sevenSegmentDisplaySetDigit+0x28a>
    }

    uint8_t segmentPositions = COMMON_CATHODE_SEGMENT_MAP[number];
 800258a:	1dbb      	adds	r3, r7, #6
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	240f      	movs	r4, #15
 8002590:	193b      	adds	r3, r7, r4
 8002592:	4968      	ldr	r1, [pc, #416]	; (8002734 <sevenSegmentDisplaySetDigit+0x298>)
 8002594:	5c8a      	ldrb	r2, [r1, r2]
 8002596:	701a      	strb	r2, [r3, #0]

    DIGIT_CONTROL(DIGIT_1,DIGIT_OFF);
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	00d9      	lsls	r1, r3, #3
 800259c:	2390      	movs	r3, #144	; 0x90
 800259e:	05db      	lsls	r3, r3, #23
 80025a0:	2200      	movs	r2, #0
 80025a2:	0018      	movs	r0, r3
 80025a4:	f001 fc2c 	bl	8003e00 <HAL_GPIO_WritePin>
    DIGIT_CONTROL(DIGIT_2,DIGIT_OFF);
 80025a8:	2390      	movs	r3, #144	; 0x90
 80025aa:	05db      	lsls	r3, r3, #23
 80025ac:	2200      	movs	r2, #0
 80025ae:	2120      	movs	r1, #32
 80025b0:	0018      	movs	r0, r3
 80025b2:	f001 fc25 	bl	8003e00 <HAL_GPIO_WritePin>
    DIGIT_CONTROL(DIGIT_3,DIGIT_OFF);
 80025b6:	2390      	movs	r3, #144	; 0x90
 80025b8:	05db      	lsls	r3, r3, #23
 80025ba:	2200      	movs	r2, #0
 80025bc:	2110      	movs	r1, #16
 80025be:	0018      	movs	r0, r3
 80025c0:	f001 fc1e 	bl	8003e00 <HAL_GPIO_WritePin>
    DIGIT_CONTROL(DIGIT_4,DIGIT_OFF);
 80025c4:	2390      	movs	r3, #144	; 0x90
 80025c6:	05db      	lsls	r3, r3, #23
 80025c8:	2200      	movs	r2, #0
 80025ca:	2102      	movs	r1, #2
 80025cc:	0018      	movs	r0, r3
 80025ce:	f001 fc17 	bl	8003e00 <HAL_GPIO_WritePin>

    SEGMENT_CONTROL(SEG_A ,(segmentPositions & SEG_A_POSITION) ? SEGMENT_ON : SEGMENT_OFF);
 80025d2:	193b      	adds	r3, r7, r4
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2201      	movs	r2, #1
 80025d8:	4013      	ands	r3, r2
 80025da:	425a      	negs	r2, r3
 80025dc:	4153      	adcs	r3, r2
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	001a      	movs	r2, r3
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	0099      	lsls	r1, r3, #2
 80025e6:	2390      	movs	r3, #144	; 0x90
 80025e8:	05db      	lsls	r3, r3, #23
 80025ea:	0018      	movs	r0, r3
 80025ec:	f001 fc08 	bl	8003e00 <HAL_GPIO_WritePin>
    SEGMENT_CONTROL(SEG_B ,(segmentPositions & SEG_B_POSITION) ? SEGMENT_ON : SEGMENT_OFF);
 80025f0:	193b      	adds	r3, r7, r4
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2202      	movs	r2, #2
 80025f6:	4013      	ands	r3, r2
 80025f8:	425a      	negs	r2, r3
 80025fa:	4153      	adcs	r3, r2
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	001a      	movs	r2, r3
 8002600:	2390      	movs	r3, #144	; 0x90
 8002602:	05db      	lsls	r3, r3, #23
 8002604:	2140      	movs	r1, #64	; 0x40
 8002606:	0018      	movs	r0, r3
 8002608:	f001 fbfa 	bl	8003e00 <HAL_GPIO_WritePin>
    SEGMENT_CONTROL(SEG_C ,(segmentPositions & SEG_C_POSITION) ? SEGMENT_ON : SEGMENT_OFF);
 800260c:	193b      	adds	r3, r7, r4
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2204      	movs	r2, #4
 8002612:	4013      	ands	r3, r2
 8002614:	425a      	negs	r2, r3
 8002616:	4153      	adcs	r3, r2
 8002618:	b2db      	uxtb	r3, r3
 800261a:	001a      	movs	r2, r3
 800261c:	2390      	movs	r3, #144	; 0x90
 800261e:	05db      	lsls	r3, r3, #23
 8002620:	2104      	movs	r1, #4
 8002622:	0018      	movs	r0, r3
 8002624:	f001 fbec 	bl	8003e00 <HAL_GPIO_WritePin>
    SEGMENT_CONTROL(SEG_D ,(segmentPositions & SEG_D_POSITION) ? SEGMENT_ON : SEGMENT_OFF);
 8002628:	193b      	adds	r3, r7, r4
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2208      	movs	r2, #8
 800262e:	4013      	ands	r3, r2
 8002630:	425a      	negs	r2, r3
 8002632:	4153      	adcs	r3, r2
 8002634:	b2db      	uxtb	r3, r3
 8002636:	001a      	movs	r2, r3
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	0119      	lsls	r1, r3, #4
 800263c:	2390      	movs	r3, #144	; 0x90
 800263e:	05db      	lsls	r3, r3, #23
 8002640:	0018      	movs	r0, r3
 8002642:	f001 fbdd 	bl	8003e00 <HAL_GPIO_WritePin>
    SEGMENT_CONTROL(SEG_E ,(segmentPositions & SEG_E_POSITION) ? SEGMENT_ON : SEGMENT_OFF);
 8002646:	193b      	adds	r3, r7, r4
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2210      	movs	r2, #16
 800264c:	4013      	ands	r3, r2
 800264e:	425a      	negs	r2, r3
 8002650:	4153      	adcs	r3, r2
 8002652:	b2db      	uxtb	r3, r3
 8002654:	001a      	movs	r2, r3
 8002656:	4b36      	ldr	r3, [pc, #216]	; (8002730 <sevenSegmentDisplaySetDigit+0x294>)
 8002658:	2108      	movs	r1, #8
 800265a:	0018      	movs	r0, r3
 800265c:	f001 fbd0 	bl	8003e00 <HAL_GPIO_WritePin>
    SEGMENT_CONTROL(SEG_F ,(segmentPositions & SEG_F_POSITION) ? SEGMENT_ON : SEGMENT_OFF);
 8002660:	193b      	adds	r3, r7, r4
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2220      	movs	r2, #32
 8002666:	4013      	ands	r3, r2
 8002668:	425a      	negs	r2, r3
 800266a:	4153      	adcs	r3, r2
 800266c:	b2db      	uxtb	r3, r3
 800266e:	001a      	movs	r2, r3
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	0059      	lsls	r1, r3, #1
 8002674:	2390      	movs	r3, #144	; 0x90
 8002676:	05db      	lsls	r3, r3, #23
 8002678:	0018      	movs	r0, r3
 800267a:	f001 fbc1 	bl	8003e00 <HAL_GPIO_WritePin>
    SEGMENT_CONTROL(SEG_G ,(segmentPositions & SEG_G_POSITION) ? SEGMENT_ON : SEGMENT_OFF);
 800267e:	193b      	adds	r3, r7, r4
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2240      	movs	r2, #64	; 0x40
 8002684:	4013      	ands	r3, r2
 8002686:	425a      	negs	r2, r3
 8002688:	4153      	adcs	r3, r2
 800268a:	b2db      	uxtb	r3, r3
 800268c:	001a      	movs	r2, r3
 800268e:	2390      	movs	r3, #144	; 0x90
 8002690:	05db      	lsls	r3, r3, #23
 8002692:	2108      	movs	r1, #8
 8002694:	0018      	movs	r0, r3
 8002696:	f001 fbb3 	bl	8003e00 <HAL_GPIO_WritePin>
    SEGMENT_CONTROL(SEG_DP,(decimalPosition  & SEG_DP_POSITION)? SEGMENT_ON : SEGMENT_OFF);
 800269a:	1d7b      	adds	r3, r7, #5
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	b25b      	sxtb	r3, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	09db      	lsrs	r3, r3, #7
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	001a      	movs	r2, r3
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	0159      	lsls	r1, r3, #5
 80026ae:	2390      	movs	r3, #144	; 0x90
 80026b0:	05db      	lsls	r3, r3, #23
 80026b2:	0018      	movs	r0, r3
 80026b4:	f001 fba4 	bl	8003e00 <HAL_GPIO_WritePin>
//            default: /*out of range*/ break;
//        }
//    }
//    else if(voltmeter.mode)
//    {
        switch (digitPosition)
 80026b8:	1dfb      	adds	r3, r7, #7
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d029      	beq.n	8002714 <sevenSegmentDisplaySetDigit+0x278>
 80026c0:	dc30      	bgt.n	8002724 <sevenSegmentDisplaySetDigit+0x288>
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d01e      	beq.n	8002704 <sevenSegmentDisplaySetDigit+0x268>
 80026c6:	dc2d      	bgt.n	8002724 <sevenSegmentDisplaySetDigit+0x288>
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <sevenSegmentDisplaySetDigit+0x236>
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d009      	beq.n	80026e4 <sevenSegmentDisplaySetDigit+0x248>
            	break;
            case 3:
            	DIGIT_CONTROL(DIGIT_4,DIGIT_ON);
            	//SEGMENT_CONTROL(SEG_DP, SEGMENT_OFF);
            	break;
            default: /*out of range*/ break;
 80026d0:	e028      	b.n	8002724 <sevenSegmentDisplaySetDigit+0x288>
            	DIGIT_CONTROL(DIGIT_1,DIGIT_ON);
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	00d9      	lsls	r1, r3, #3
 80026d6:	2390      	movs	r3, #144	; 0x90
 80026d8:	05db      	lsls	r3, r3, #23
 80026da:	2201      	movs	r2, #1
 80026dc:	0018      	movs	r0, r3
 80026de:	f001 fb8f 	bl	8003e00 <HAL_GPIO_WritePin>
            	break;
 80026e2:	e020      	b.n	8002726 <sevenSegmentDisplaySetDigit+0x28a>
            	DIGIT_CONTROL(DIGIT_2,DIGIT_ON);
 80026e4:	2390      	movs	r3, #144	; 0x90
 80026e6:	05db      	lsls	r3, r3, #23
 80026e8:	2201      	movs	r2, #1
 80026ea:	2120      	movs	r1, #32
 80026ec:	0018      	movs	r0, r3
 80026ee:	f001 fb87 	bl	8003e00 <HAL_GPIO_WritePin>
            	SEGMENT_CONTROL(SEG_DP, SEGMENT_ON);
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	0159      	lsls	r1, r3, #5
 80026f6:	2390      	movs	r3, #144	; 0x90
 80026f8:	05db      	lsls	r3, r3, #23
 80026fa:	2200      	movs	r2, #0
 80026fc:	0018      	movs	r0, r3
 80026fe:	f001 fb7f 	bl	8003e00 <HAL_GPIO_WritePin>
            	break;
 8002702:	e010      	b.n	8002726 <sevenSegmentDisplaySetDigit+0x28a>
            	DIGIT_CONTROL(DIGIT_3,DIGIT_ON);
 8002704:	2390      	movs	r3, #144	; 0x90
 8002706:	05db      	lsls	r3, r3, #23
 8002708:	2201      	movs	r2, #1
 800270a:	2110      	movs	r1, #16
 800270c:	0018      	movs	r0, r3
 800270e:	f001 fb77 	bl	8003e00 <HAL_GPIO_WritePin>
            	break;
 8002712:	e008      	b.n	8002726 <sevenSegmentDisplaySetDigit+0x28a>
            	DIGIT_CONTROL(DIGIT_4,DIGIT_ON);
 8002714:	2390      	movs	r3, #144	; 0x90
 8002716:	05db      	lsls	r3, r3, #23
 8002718:	2201      	movs	r2, #1
 800271a:	2102      	movs	r1, #2
 800271c:	0018      	movs	r0, r3
 800271e:	f001 fb6f 	bl	8003e00 <HAL_GPIO_WritePin>
            	break;
 8002722:	e000      	b.n	8002726 <sevenSegmentDisplaySetDigit+0x28a>
            default: /*out of range*/ break;
 8002724:	46c0      	nop			; (mov r8, r8)
        }
 //   }



}
 8002726:	46bd      	mov	sp, r7
 8002728:	b005      	add	sp, #20
 800272a:	bd90      	pop	{r4, r7, pc}
 800272c:	200000b8 	.word	0x200000b8
 8002730:	48000400 	.word	0x48000400
 8002734:	08004f04 	.word	0x08004f04

08002738 <sevenSegmentDisplayUpdate>:
void sevenSegmentDisplayUpdate(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
	if(_1msFlag)
 800273c:	4b15      	ldr	r3, [pc, #84]	; (8002794 <sevenSegmentDisplayUpdate+0x5c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d024      	beq.n	800278e <sevenSegmentDisplayUpdate+0x56>
	{
			sevenSegmentDisplaySetDigit(currentDigit, digits[currentDigit],2);
 8002744:	4b14      	ldr	r3, [pc, #80]	; (8002798 <sevenSegmentDisplayUpdate+0x60>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	b2d8      	uxtb	r0, r3
 800274a:	4b13      	ldr	r3, [pc, #76]	; (8002798 <sevenSegmentDisplayUpdate+0x60>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	001a      	movs	r2, r3
 8002752:	4b12      	ldr	r3, [pc, #72]	; (800279c <sevenSegmentDisplayUpdate+0x64>)
 8002754:	5c9b      	ldrb	r3, [r3, r2]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2202      	movs	r2, #2
 800275a:	0019      	movs	r1, r3
 800275c:	f7ff fe9e 	bl	800249c <sevenSegmentDisplaySetDigit>

			currentDigit = (currentDigit + 1) % 4;
 8002760:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <sevenSegmentDisplayUpdate+0x60>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	3301      	adds	r3, #1
 8002768:	4a0d      	ldr	r2, [pc, #52]	; (80027a0 <sevenSegmentDisplayUpdate+0x68>)
 800276a:	4013      	ands	r3, r2
 800276c:	d504      	bpl.n	8002778 <sevenSegmentDisplayUpdate+0x40>
 800276e:	3b01      	subs	r3, #1
 8002770:	2204      	movs	r2, #4
 8002772:	4252      	negs	r2, r2
 8002774:	4313      	orrs	r3, r2
 8002776:	3301      	adds	r3, #1
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <sevenSegmentDisplayUpdate+0x60>)
 800277c:	701a      	strb	r2, [r3, #0]

			if(currentDigit == 4) currentDigit = 0;
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <sevenSegmentDisplayUpdate+0x60>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b04      	cmp	r3, #4
 8002786:	d102      	bne.n	800278e <sevenSegmentDisplayUpdate+0x56>
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <sevenSegmentDisplayUpdate+0x60>)
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
	}
}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	2000012d 	.word	0x2000012d
 8002798:	200000c4 	.word	0x200000c4
 800279c:	200000c8 	.word	0x200000c8
 80027a0:	80000003 	.word	0x80000003

080027a4 <sevenSegmentDisplaySetNumbers>:
void sevenSegmentDisplaySetNumbers(float value)
{
 80027a4:	b5b0      	push	{r4, r5, r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
    uint16_t number = (uint16_t)(value * 100);
 80027ac:	4923      	ldr	r1, [pc, #140]	; (800283c <sevenSegmentDisplaySetNumbers+0x98>)
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fd fe38 	bl	8000424 <__aeabi_fmul>
 80027b4:	1c03      	adds	r3, r0, #0
 80027b6:	250e      	movs	r5, #14
 80027b8:	197c      	adds	r4, r7, r5
 80027ba:	1c18      	adds	r0, r3, #0
 80027bc:	f7fd fd6a 	bl	8000294 <__aeabi_f2uiz>
 80027c0:	0003      	movs	r3, r0
 80027c2:	8023      	strh	r3, [r4, #0]

    digits[0] = (number / 1000) % 10;
 80027c4:	002c      	movs	r4, r5
 80027c6:	193b      	adds	r3, r7, r4
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	22fa      	movs	r2, #250	; 0xfa
 80027cc:	0091      	lsls	r1, r2, #2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7fd fc9a 	bl	8000108 <__udivsi3>
 80027d4:	0003      	movs	r3, r0
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	210a      	movs	r1, #10
 80027da:	0018      	movs	r0, r3
 80027dc:	f7fd fd1a 	bl	8000214 <__aeabi_uidivmod>
 80027e0:	000b      	movs	r3, r1
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <sevenSegmentDisplaySetNumbers+0x9c>)
 80027e8:	701a      	strb	r2, [r3, #0]
    digits[1] = (number / 100) % 10;
 80027ea:	193b      	adds	r3, r7, r4
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	2164      	movs	r1, #100	; 0x64
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7fd fc89 	bl	8000108 <__udivsi3>
 80027f6:	0003      	movs	r3, r0
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	210a      	movs	r1, #10
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7fd fd09 	bl	8000214 <__aeabi_uidivmod>
 8002802:	000b      	movs	r3, r1
 8002804:	b29b      	uxth	r3, r3
 8002806:	b2da      	uxtb	r2, r3
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <sevenSegmentDisplaySetNumbers+0x9c>)
 800280a:	705a      	strb	r2, [r3, #1]
    digits[2] = (number / 10) % 10;
 800280c:	193b      	adds	r3, r7, r4
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	210a      	movs	r1, #10
 8002812:	0018      	movs	r0, r3
 8002814:	f7fd fc78 	bl	8000108 <__udivsi3>
 8002818:	0003      	movs	r3, r0
 800281a:	b29b      	uxth	r3, r3
 800281c:	210a      	movs	r1, #10
 800281e:	0018      	movs	r0, r3
 8002820:	f7fd fcf8 	bl	8000214 <__aeabi_uidivmod>
 8002824:	000b      	movs	r3, r1
 8002826:	b29b      	uxth	r3, r3
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <sevenSegmentDisplaySetNumbers+0x9c>)
 800282c:	709a      	strb	r2, [r3, #2]
    digits[3] = 0;//(number / 1) % 10;
 800282e:	4b04      	ldr	r3, [pc, #16]	; (8002840 <sevenSegmentDisplaySetNumbers+0x9c>)
 8002830:	2200      	movs	r2, #0
 8002832:	70da      	strb	r2, [r3, #3]

}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	b004      	add	sp, #16
 800283a:	bdb0      	pop	{r4, r5, r7, pc}
 800283c:	42c80000 	.word	0x42c80000
 8002840:	200000c8 	.word	0x200000c8

08002844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <HAL_MspInit+0x44>)
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <HAL_MspInit+0x44>)
 8002850:	2101      	movs	r1, #1
 8002852:	430a      	orrs	r2, r1
 8002854:	619a      	str	r2, [r3, #24]
 8002856:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <HAL_MspInit+0x44>)
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2201      	movs	r2, #1
 800285c:	4013      	ands	r3, r2
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_MspInit+0x44>)
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_MspInit+0x44>)
 8002868:	2180      	movs	r1, #128	; 0x80
 800286a:	0549      	lsls	r1, r1, #21
 800286c:	430a      	orrs	r2, r1
 800286e:	61da      	str	r2, [r3, #28]
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_MspInit+0x44>)
 8002872:	69da      	ldr	r2, [r3, #28]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	055b      	lsls	r3, r3, #21
 8002878:	4013      	ands	r3, r2
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	b002      	add	sp, #8
 8002884:	bd80      	pop	{r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	40021000 	.word	0x40021000

0800288c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002890:	e7fe      	b.n	8002890 <NMI_Handler+0x4>

08002892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002896:	e7fe      	b.n	8002896 <HardFault_Handler+0x4>

08002898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800289c:	46c0      	nop			; (mov r8, r8)
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028b0:	f000 facc 	bl	8002e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <DMA1_Channel1_IRQHandler+0x14>)
 80028c2:	0018      	movs	r0, r3
 80028c4:	f001 f842 	bl	800394c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	20000070 	.word	0x20000070

080028d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <TIM3_IRQHandler+0x14>)
 80028da:	0018      	movs	r0, r3
 80028dc:	f001 ff82 	bl	80047e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028e0:	46c0      	nop			; (mov r8, r8)
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	200000cc 	.word	0x200000cc

080028ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80028f0:	46c0      	nop			; (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028fe:	2308      	movs	r3, #8
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	0018      	movs	r0, r3
 8002904:	2310      	movs	r3, #16
 8002906:	001a      	movs	r2, r3
 8002908:	2100      	movs	r1, #0
 800290a:	f002 fac3 	bl	8004e94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800290e:	003b      	movs	r3, r7
 8002910:	0018      	movs	r0, r3
 8002912:	2308      	movs	r3, #8
 8002914:	001a      	movs	r2, r3
 8002916:	2100      	movs	r1, #0
 8002918:	f002 fabc 	bl	8004e94 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800291c:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <MX_TIM3_Init+0xa0>)
 800291e:	4a1f      	ldr	r2, [pc, #124]	; (800299c <MX_TIM3_Init+0xa4>)
 8002920:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8002922:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <MX_TIM3_Init+0xa0>)
 8002924:	2217      	movs	r2, #23
 8002926:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002928:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <MX_TIM3_Init+0xa0>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800292e:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <MX_TIM3_Init+0xa0>)
 8002930:	22fa      	movs	r2, #250	; 0xfa
 8002932:	0092      	lsls	r2, r2, #2
 8002934:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002936:	4b18      	ldr	r3, [pc, #96]	; (8002998 <MX_TIM3_Init+0xa0>)
 8002938:	2200      	movs	r2, #0
 800293a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800293c:	4b16      	ldr	r3, [pc, #88]	; (8002998 <MX_TIM3_Init+0xa0>)
 800293e:	2200      	movs	r2, #0
 8002940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <MX_TIM3_Init+0xa0>)
 8002944:	0018      	movs	r0, r3
 8002946:	f001 feb7 	bl	80046b8 <HAL_TIM_Base_Init>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800294e:	f7ff fd9f 	bl	8002490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002952:	2108      	movs	r1, #8
 8002954:	187b      	adds	r3, r7, r1
 8002956:	2280      	movs	r2, #128	; 0x80
 8002958:	0152      	lsls	r2, r2, #5
 800295a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800295c:	187a      	adds	r2, r7, r1
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <MX_TIM3_Init+0xa0>)
 8002960:	0011      	movs	r1, r2
 8002962:	0018      	movs	r0, r3
 8002964:	f002 f82c 	bl	80049c0 <HAL_TIM_ConfigClockSource>
 8002968:	1e03      	subs	r3, r0, #0
 800296a:	d001      	beq.n	8002970 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800296c:	f7ff fd90 	bl	8002490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002970:	003b      	movs	r3, r7
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002976:	003b      	movs	r3, r7
 8002978:	2200      	movs	r2, #0
 800297a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800297c:	003a      	movs	r2, r7
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <MX_TIM3_Init+0xa0>)
 8002980:	0011      	movs	r1, r2
 8002982:	0018      	movs	r0, r3
 8002984:	f002 fa24 	bl	8004dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8002988:	1e03      	subs	r3, r0, #0
 800298a:	d001      	beq.n	8002990 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800298c:	f7ff fd80 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	b006      	add	sp, #24
 8002996:	bd80      	pop	{r7, pc}
 8002998:	200000cc 	.word	0x200000cc
 800299c:	40000400 	.word	0x40000400

080029a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <HAL_TIM_Base_MspInit+0x44>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d113      	bne.n	80029da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029b2:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <HAL_TIM_Base_MspInit+0x48>)
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <HAL_TIM_Base_MspInit+0x48>)
 80029b8:	2102      	movs	r1, #2
 80029ba:	430a      	orrs	r2, r1
 80029bc:	61da      	str	r2, [r3, #28]
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <HAL_TIM_Base_MspInit+0x48>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	2202      	movs	r2, #2
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2100      	movs	r1, #0
 80029ce:	2010      	movs	r0, #16
 80029d0:	f000 fedc 	bl	800378c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029d4:	2010      	movs	r0, #16
 80029d6:	f000 feee 	bl	80037b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	b004      	add	sp, #16
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40021000 	.word	0x40021000

080029ec <HAL_TIM_PeriodElapsedCallback>:
bool _500msFlag		 		= false;
bool _1sFlag				= false;
bool _10sFlag				= false;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)   // şuan 50ms 1msye  ayarla
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a5e      	ldr	r2, [pc, #376]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d000      	beq.n	8002a00 <HAL_TIM_PeriodElapsedCallback+0x14>
 80029fe:	e0b4      	b.n	8002b6a <HAL_TIM_PeriodElapsedCallback+0x17e>
    {
    	_configurableCounter++;
 8002a00:	4b5d      	ldr	r3, [pc, #372]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	4b5b      	ldr	r3, [pc, #364]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002a0a:	701a      	strb	r2, [r3, #0]
    	if(_configurableCounter>configurableTime)
 8002a0c:	4b5a      	ldr	r3, [pc, #360]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002a0e:	781a      	ldrb	r2, [r3, #0]
 8002a10:	4b5a      	ldr	r3, [pc, #360]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d905      	bls.n	8002a24 <HAL_TIM_PeriodElapsedCallback+0x38>
    	{
    		_configurableFlagScanStart = true;
 8002a18:	4b59      	ldr	r3, [pc, #356]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	701a      	strb	r2, [r3, #0]
    		_configurableCounter = 0;
 8002a1e:	4b56      	ldr	r3, [pc, #344]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
    	}

    	_1msCounter++;
 8002a24:	4b57      	ldr	r3, [pc, #348]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	4b55      	ldr	r3, [pc, #340]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002a2e:	701a      	strb	r2, [r3, #0]
    	if(_1msCounter>0)
 8002a30:	4b54      	ldr	r3, [pc, #336]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_TIM_PeriodElapsedCallback+0x58>
    	{
    		_1msFlagScanStart = true;
 8002a38:	4b53      	ldr	r3, [pc, #332]	; (8002b88 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
    		_1msCounter = 0;
 8002a3e:	4b51      	ldr	r3, [pc, #324]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
    	}


    	_10msCounter++;
 8002a44:	4b51      	ldr	r3, [pc, #324]	; (8002b8c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	4b4f      	ldr	r3, [pc, #316]	; (8002b8c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002a4e:	701a      	strb	r2, [r3, #0]
    	if(_10msCounter>9)
 8002a50:	4b4e      	ldr	r3, [pc, #312]	; (8002b8c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b09      	cmp	r3, #9
 8002a56:	d905      	bls.n	8002a64 <HAL_TIM_PeriodElapsedCallback+0x78>
    	{
    		_10msFlagScanStart = true;
 8002a58:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
    		_10msCounter = 0;
 8002a5e:	4b4b      	ldr	r3, [pc, #300]	; (8002b8c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
    	}

    	_25msCounter++;
 8002a64:	4b4b      	ldr	r3, [pc, #300]	; (8002b94 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	4b49      	ldr	r3, [pc, #292]	; (8002b94 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002a6e:	701a      	strb	r2, [r3, #0]
    	if(_25msCounter>24)
 8002a70:	4b48      	ldr	r3, [pc, #288]	; (8002b94 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b18      	cmp	r3, #24
 8002a76:	d905      	bls.n	8002a84 <HAL_TIM_PeriodElapsedCallback+0x98>
    	{
    		_25msFlagScanStart = true;
 8002a78:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
    		_25msCounter = 0;
 8002a7e:	4b45      	ldr	r3, [pc, #276]	; (8002b94 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
    	}

    	_50msCounter++;
 8002a84:	4b45      	ldr	r3, [pc, #276]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	4b43      	ldr	r3, [pc, #268]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002a8e:	701a      	strb	r2, [r3, #0]
    	if(_50msCounter>49)
 8002a90:	4b42      	ldr	r3, [pc, #264]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b31      	cmp	r3, #49	; 0x31
 8002a96:	d905      	bls.n	8002aa4 <HAL_TIM_PeriodElapsedCallback+0xb8>
    	{
    		_50msFlagScanStart = true;
 8002a98:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	701a      	strb	r2, [r3, #0]
    		_50msCounter = 0;
 8002a9e:	4b3f      	ldr	r3, [pc, #252]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
    	}

    	_100msCounter++;
 8002aa4:	4b3f      	ldr	r3, [pc, #252]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002aae:	701a      	strb	r2, [r3, #0]
    	if(_100msCounter>99)
 8002ab0:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b63      	cmp	r3, #99	; 0x63
 8002ab6:	d905      	bls.n	8002ac4 <HAL_TIM_PeriodElapsedCallback+0xd8>
    	{
    		_100msFlagScanStart = true;
 8002ab8:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
    		_100msCounter = 0;
 8002abe:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]

    	}

    	_250msCounter++;
 8002ac4:	4b39      	ldr	r3, [pc, #228]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	4b37      	ldr	r3, [pc, #220]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002ace:	701a      	strb	r2, [r3, #0]
    	if(_250msCounter>249)
 8002ad0:	4b36      	ldr	r3, [pc, #216]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2bf9      	cmp	r3, #249	; 0xf9
 8002ad6:	d913      	bls.n	8002b00 <HAL_TIM_PeriodElapsedCallback+0x114>
    	{
    		_250msFlagScanStart = true;
 8002ad8:	4b35      	ldr	r3, [pc, #212]	; (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
    		_250msCounter = 0;
 8002ade:	4b33      	ldr	r3, [pc, #204]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
    		voltmeter.blinkFlag = !voltmeter.blinkFlag;
 8002ae4:	4b33      	ldr	r3, [pc, #204]	; (8002bb4 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002ae6:	7a1b      	ldrb	r3, [r3, #8]
 8002ae8:	1e5a      	subs	r2, r3, #1
 8002aea:	4193      	sbcs	r3, r2
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2201      	movs	r2, #1
 8002af0:	4053      	eors	r3, r2
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	1c1a      	adds	r2, r3, #0
 8002af6:	2301      	movs	r3, #1
 8002af8:	4013      	ands	r3, r2
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002afe:	721a      	strb	r2, [r3, #8]
    	}

    	_500msCounter++;
 8002b00:	4b2d      	ldr	r3, [pc, #180]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002b0a:	801a      	strh	r2, [r3, #0]
    	if(_500msCounter>499)
 8002b0c:	4b2a      	ldr	r3, [pc, #168]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002b0e:	881a      	ldrh	r2, [r3, #0]
 8002b10:	23fa      	movs	r3, #250	; 0xfa
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d305      	bcc.n	8002b24 <HAL_TIM_PeriodElapsedCallback+0x138>
    	{
    		_500msFlagScanStart = true;
 8002b18:	4b28      	ldr	r3, [pc, #160]	; (8002bbc <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
    		_500msCounter = 0;
 8002b1e:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	801a      	strh	r2, [r3, #0]
    	}

    	_1sCounter++;
 8002b24:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002b2e:	801a      	strh	r2, [r3, #0]
    	if(_1sCounter>999)
 8002b30:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002b32:	881a      	ldrh	r2, [r3, #0]
 8002b34:	23fa      	movs	r3, #250	; 0xfa
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d305      	bcc.n	8002b48 <HAL_TIM_PeriodElapsedCallback+0x15c>
    	{
    		_1sFlagScanStart = true;
 8002b3c:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
    		_1sCounter = 0;
 8002b42:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	801a      	strh	r2, [r3, #0]
    	}

    	_10sCounter++;
 8002b48:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002b52:	801a      	strh	r2, [r3, #0]
    	if(_10sCounter>9999)
 8002b54:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	4a1c      	ldr	r2, [pc, #112]	; (8002bcc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d905      	bls.n	8002b6a <HAL_TIM_PeriodElapsedCallback+0x17e>
    	{
    		_10sFlagScanStart = true;
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]
    		_10sCounter = 0;
 8002b64:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b002      	add	sp, #8
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	40000400 	.word	0x40000400
 8002b78:	20000114 	.word	0x20000114
 8002b7c:	20000008 	.word	0x20000008
 8002b80:	20000122 	.word	0x20000122
 8002b84:	20000115 	.word	0x20000115
 8002b88:	20000123 	.word	0x20000123
 8002b8c:	20000116 	.word	0x20000116
 8002b90:	20000124 	.word	0x20000124
 8002b94:	20000117 	.word	0x20000117
 8002b98:	20000125 	.word	0x20000125
 8002b9c:	20000118 	.word	0x20000118
 8002ba0:	20000126 	.word	0x20000126
 8002ba4:	20000119 	.word	0x20000119
 8002ba8:	20000127 	.word	0x20000127
 8002bac:	2000011a 	.word	0x2000011a
 8002bb0:	20000128 	.word	0x20000128
 8002bb4:	200000b8 	.word	0x200000b8
 8002bb8:	2000011c 	.word	0x2000011c
 8002bbc:	20000129 	.word	0x20000129
 8002bc0:	2000011e 	.word	0x2000011e
 8002bc4:	2000012a 	.word	0x2000012a
 8002bc8:	20000120 	.word	0x20000120
 8002bcc:	0000270f 	.word	0x0000270f
 8002bd0:	2000012b 	.word	0x2000012b

08002bd4 <startTimeScanFlags>:

void startTimeScanFlags(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
	if(_configurableFlagScanStart)
 8002bd8:	4b33      	ldr	r3, [pc, #204]	; (8002ca8 <startTimeScanFlags+0xd4>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <startTimeScanFlags+0x18>
	{
		_configurableFlag = true;
 8002be0:	4b32      	ldr	r3, [pc, #200]	; (8002cac <startTimeScanFlags+0xd8>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
		_configurableFlagScanStart = false;
 8002be6:	4b30      	ldr	r3, [pc, #192]	; (8002ca8 <startTimeScanFlags+0xd4>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
	}
	if(_1msFlagScanStart)
 8002bec:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <startTimeScanFlags+0xdc>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <startTimeScanFlags+0x2c>
	{
		_1msFlag = true;
 8002bf4:	4b2f      	ldr	r3, [pc, #188]	; (8002cb4 <startTimeScanFlags+0xe0>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]
		_1msFlagScanStart = false;
 8002bfa:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <startTimeScanFlags+0xdc>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
	}
	if(_10msFlagScanStart)
 8002c00:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <startTimeScanFlags+0xe4>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <startTimeScanFlags+0x40>
	{
		_10msFlag = true;
 8002c08:	4b2c      	ldr	r3, [pc, #176]	; (8002cbc <startTimeScanFlags+0xe8>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
		_10msFlagScanStart = false;
 8002c0e:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <startTimeScanFlags+0xe4>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
	}
	if(_25msFlagScanStart)
 8002c14:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <startTimeScanFlags+0xec>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <startTimeScanFlags+0x54>
	{
		_25msFlag = true;
 8002c1c:	4b29      	ldr	r3, [pc, #164]	; (8002cc4 <startTimeScanFlags+0xf0>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]
		_25msFlagScanStart = false;
 8002c22:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <startTimeScanFlags+0xec>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
	}
	if(_50msFlagScanStart)
 8002c28:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <startTimeScanFlags+0xf4>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <startTimeScanFlags+0x68>
	{
		_50msFlag = true;
 8002c30:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <startTimeScanFlags+0xf8>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
		_50msFlagScanStart = false;
 8002c36:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <startTimeScanFlags+0xf4>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
	}
	if(_100msFlagScanStart)
 8002c3c:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <startTimeScanFlags+0xfc>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <startTimeScanFlags+0x7c>
	{
		_100msFlag = true;
 8002c44:	4b23      	ldr	r3, [pc, #140]	; (8002cd4 <startTimeScanFlags+0x100>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
		_100msFlagScanStart = false;
 8002c4a:	4b21      	ldr	r3, [pc, #132]	; (8002cd0 <startTimeScanFlags+0xfc>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
	}
	if(_250msFlagScanStart)
 8002c50:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <startTimeScanFlags+0x104>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <startTimeScanFlags+0x90>
	{
		_250msFlag = true;
 8002c58:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <startTimeScanFlags+0x108>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
		_250msFlagScanStart = false;
 8002c5e:	4b1e      	ldr	r3, [pc, #120]	; (8002cd8 <startTimeScanFlags+0x104>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
	}
	if(_500msFlagScanStart)
 8002c64:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <startTimeScanFlags+0x10c>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <startTimeScanFlags+0xa4>
	{
		_500msFlag = true;
 8002c6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <startTimeScanFlags+0x110>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]
		_500msFlagScanStart = false;
 8002c72:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <startTimeScanFlags+0x10c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
	}
	if(_1sFlagScanStart)
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <startTimeScanFlags+0x114>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <startTimeScanFlags+0xb8>
	{
		_1sFlag = true;
 8002c80:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <startTimeScanFlags+0x118>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
		_1sFlagScanStart = false;
 8002c86:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <startTimeScanFlags+0x114>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
	}
	if(_10sFlagScanStart)
 8002c8c:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <startTimeScanFlags+0x11c>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <startTimeScanFlags+0xcc>
	{
		_10sFlag = true;
 8002c94:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <startTimeScanFlags+0x120>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	701a      	strb	r2, [r3, #0]
		_10sFlagScanStart = false;
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <startTimeScanFlags+0x11c>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
	}
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	20000122 	.word	0x20000122
 8002cac:	2000012c 	.word	0x2000012c
 8002cb0:	20000123 	.word	0x20000123
 8002cb4:	2000012d 	.word	0x2000012d
 8002cb8:	20000124 	.word	0x20000124
 8002cbc:	2000012e 	.word	0x2000012e
 8002cc0:	20000125 	.word	0x20000125
 8002cc4:	2000012f 	.word	0x2000012f
 8002cc8:	20000126 	.word	0x20000126
 8002ccc:	20000130 	.word	0x20000130
 8002cd0:	20000127 	.word	0x20000127
 8002cd4:	20000131 	.word	0x20000131
 8002cd8:	20000128 	.word	0x20000128
 8002cdc:	20000132 	.word	0x20000132
 8002ce0:	20000129 	.word	0x20000129
 8002ce4:	20000133 	.word	0x20000133
 8002ce8:	2000012a 	.word	0x2000012a
 8002cec:	20000134 	.word	0x20000134
 8002cf0:	2000012b 	.word	0x2000012b
 8002cf4:	20000135 	.word	0x20000135

08002cf8 <clearTimeScanFlags>:

void clearTimeScanFlags(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
	_configurableFlag 	= false;
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <clearTimeScanFlags+0x48>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
	_1msFlag 	= false;
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <clearTimeScanFlags+0x4c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
	_10msFlag 	= false;
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <clearTimeScanFlags+0x50>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
	_25msFlag 	= false;
 8002d0e:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <clearTimeScanFlags+0x54>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
	_50msFlag 	= false;
 8002d14:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <clearTimeScanFlags+0x58>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
	_100msFlag 	= false;
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <clearTimeScanFlags+0x5c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
	_250msFlag 	= false;
 8002d20:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <clearTimeScanFlags+0x60>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
	_500msFlag 	= false;
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <clearTimeScanFlags+0x64>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
	_1sFlag 	= false;
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <clearTimeScanFlags+0x68>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
	_10sFlag 	= false;
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <clearTimeScanFlags+0x6c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	2000012c 	.word	0x2000012c
 8002d44:	2000012d 	.word	0x2000012d
 8002d48:	2000012e 	.word	0x2000012e
 8002d4c:	2000012f 	.word	0x2000012f
 8002d50:	20000130 	.word	0x20000130
 8002d54:	20000131 	.word	0x20000131
 8002d58:	20000132 	.word	0x20000132
 8002d5c:	20000133 	.word	0x20000133
 8002d60:	20000134 	.word	0x20000134
 8002d64:	20000135 	.word	0x20000135

08002d68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d68:	480d      	ldr	r0, [pc, #52]	; (8002da0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d6a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d6c:	f7ff fdbe 	bl	80028ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d70:	480c      	ldr	r0, [pc, #48]	; (8002da4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d72:	490d      	ldr	r1, [pc, #52]	; (8002da8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d74:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <LoopForever+0xe>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d78:	e002      	b.n	8002d80 <LoopCopyDataInit>

08002d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d7e:	3304      	adds	r3, #4

08002d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d84:	d3f9      	bcc.n	8002d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d86:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d88:	4c0a      	ldr	r4, [pc, #40]	; (8002db4 <LoopForever+0x16>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d8c:	e001      	b.n	8002d92 <LoopFillZerobss>

08002d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d90:	3204      	adds	r2, #4

08002d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d94:	d3fb      	bcc.n	8002d8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d96:	f002 f885 	bl	8004ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d9a:	f7ff faf5 	bl	8002388 <main>

08002d9e <LoopForever>:

LoopForever:
    b LoopForever
 8002d9e:	e7fe      	b.n	8002d9e <LoopForever>
  ldr   r0, =_estack
 8002da0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002dac:	08004f48 	.word	0x08004f48
  ldr r2, =_sbss
 8002db0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002db4:	2000013c 	.word	0x2000013c

08002db8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002db8:	e7fe      	b.n	8002db8 <ADC1_IRQHandler>
	...

08002dbc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <HAL_Init+0x24>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_Init+0x24>)
 8002dc6:	2110      	movs	r1, #16
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002dcc:	2003      	movs	r0, #3
 8002dce:	f000 f809 	bl	8002de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd2:	f7ff fd37 	bl	8002844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	40022000 	.word	0x40022000

08002de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de4:	b590      	push	{r4, r7, lr}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <HAL_InitTick+0x5c>)
 8002dee:	681c      	ldr	r4, [r3, #0]
 8002df0:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <HAL_InitTick+0x60>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	0019      	movs	r1, r3
 8002df6:	23fa      	movs	r3, #250	; 0xfa
 8002df8:	0098      	lsls	r0, r3, #2
 8002dfa:	f7fd f985 	bl	8000108 <__udivsi3>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	0019      	movs	r1, r3
 8002e02:	0020      	movs	r0, r4
 8002e04:	f7fd f980 	bl	8000108 <__udivsi3>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f000 fce3 	bl	80037d6 <HAL_SYSTICK_Config>
 8002e10:	1e03      	subs	r3, r0, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e00f      	b.n	8002e38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d80b      	bhi.n	8002e36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	2301      	movs	r3, #1
 8002e22:	425b      	negs	r3, r3
 8002e24:	2200      	movs	r2, #0
 8002e26:	0018      	movs	r0, r3
 8002e28:	f000 fcb0 	bl	800378c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HAL_InitTick+0x64>)
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e000      	b.n	8002e38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
}
 8002e38:	0018      	movs	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b003      	add	sp, #12
 8002e3e:	bd90      	pop	{r4, r7, pc}
 8002e40:	20000004 	.word	0x20000004
 8002e44:	20000010 	.word	0x20000010
 8002e48:	2000000c 	.word	0x2000000c

08002e4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_IncTick+0x1c>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	001a      	movs	r2, r3
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_IncTick+0x20>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	18d2      	adds	r2, r2, r3
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <HAL_IncTick+0x20>)
 8002e5e:	601a      	str	r2, [r3, #0]
}
 8002e60:	46c0      	nop			; (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	20000010 	.word	0x20000010
 8002e6c:	20000138 	.word	0x20000138

08002e70 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  return uwTick;
 8002e74:	4b02      	ldr	r3, [pc, #8]	; (8002e80 <HAL_GetTick+0x10>)
 8002e76:	681b      	ldr	r3, [r3, #0]
}
 8002e78:	0018      	movs	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	20000138 	.word	0x20000138

08002e84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8c:	230f      	movs	r3, #15
 8002e8e:	18fb      	adds	r3, r7, r3
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e125      	b.n	80030ee <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2234      	movs	r2, #52	; 0x34
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f7ff f8da 	bl	8002074 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d000      	beq.n	8002ecc <HAL_ADC_Init+0x48>
 8002eca:	e103      	b.n	80030d4 <HAL_ADC_Init+0x250>
 8002ecc:	230f      	movs	r3, #15
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d000      	beq.n	8002ed8 <HAL_ADC_Init+0x54>
 8002ed6:	e0fd      	b.n	80030d4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002ee2:	d000      	beq.n	8002ee6 <HAL_ADC_Init+0x62>
 8002ee4:	e0f6      	b.n	80030d4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	4a83      	ldr	r2, [pc, #524]	; (80030f8 <HAL_ADC_Init+0x274>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	2202      	movs	r2, #2
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2203      	movs	r2, #3
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d112      	bne.n	8002f2a <HAL_ADC_Init+0xa6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d009      	beq.n	8002f26 <HAL_ADC_Init+0xa2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	401a      	ands	r2, r3
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d101      	bne.n	8002f2a <HAL_ADC_Init+0xa6>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_ADC_Init+0xa8>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d116      	bne.n	8002f5e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2218      	movs	r2, #24
 8002f38:	4393      	bics	r3, r2
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	0899      	lsrs	r1, r3, #2
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4964      	ldr	r1, [pc, #400]	; (80030fc <HAL_ADC_Init+0x278>)
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7e1b      	ldrb	r3, [r3, #24]
 8002f72:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	7e5b      	ldrb	r3, [r3, #25]
 8002f78:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f7a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7e9b      	ldrb	r3, [r3, #26]
 8002f80:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002f82:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d002      	beq.n	8002f92 <HAL_ADC_Init+0x10e>
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	015b      	lsls	r3, r3, #5
 8002f90:	e000      	b.n	8002f94 <HAL_ADC_Init+0x110>
 8002f92:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002f94:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002f9a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ADC_Init+0x124>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	e000      	b.n	8002faa <HAL_ADC_Init+0x126>
 8002fa8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002faa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2124      	movs	r1, #36	; 0x24
 8002fb0:	5c5b      	ldrb	r3, [r3, r1]
 8002fb2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002fb4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	7edb      	ldrb	r3, [r3, #27]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d115      	bne.n	8002ff0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7e9b      	ldrb	r3, [r3, #26]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d105      	bne.n	8002fd8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2280      	movs	r2, #128	; 0x80
 8002fd0:	0252      	lsls	r2, r2, #9
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	e00b      	b.n	8002ff0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	2220      	movs	r2, #32
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe8:	2201      	movs	r2, #1
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	23c2      	movs	r3, #194	; 0xc2
 8002ff6:	33ff      	adds	r3, #255	; 0xff
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d007      	beq.n	800300c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003004:	4313      	orrs	r3, r2
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	4313      	orrs	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68d9      	ldr	r1, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	430a      	orrs	r2, r1
 800301a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	055b      	lsls	r3, r3, #21
 8003024:	429a      	cmp	r2, r3
 8003026:	d01b      	beq.n	8003060 <HAL_ADC_Init+0x1dc>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	2b01      	cmp	r3, #1
 800302e:	d017      	beq.n	8003060 <HAL_ADC_Init+0x1dc>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	2b02      	cmp	r3, #2
 8003036:	d013      	beq.n	8003060 <HAL_ADC_Init+0x1dc>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	2b03      	cmp	r3, #3
 800303e:	d00f      	beq.n	8003060 <HAL_ADC_Init+0x1dc>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	2b04      	cmp	r3, #4
 8003046:	d00b      	beq.n	8003060 <HAL_ADC_Init+0x1dc>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	2b05      	cmp	r3, #5
 800304e:	d007      	beq.n	8003060 <HAL_ADC_Init+0x1dc>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	2b06      	cmp	r3, #6
 8003056:	d003      	beq.n	8003060 <HAL_ADC_Init+0x1dc>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	2b07      	cmp	r3, #7
 800305e:	d112      	bne.n	8003086 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2107      	movs	r1, #7
 800306c:	438a      	bics	r2, r1
 800306e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6959      	ldr	r1, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	2207      	movs	r2, #7
 800307c:	401a      	ands	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <HAL_ADC_Init+0x27c>)
 800308e:	4013      	ands	r3, r2
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	429a      	cmp	r2, r3
 8003094:	d10b      	bne.n	80030ae <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	2203      	movs	r2, #3
 80030a2:	4393      	bics	r3, r2
 80030a4:	2201      	movs	r2, #1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80030ac:	e01c      	b.n	80030e8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	2212      	movs	r2, #18
 80030b4:	4393      	bics	r3, r2
 80030b6:	2210      	movs	r2, #16
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	2201      	movs	r2, #1
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80030ca:	230f      	movs	r3, #15
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	2201      	movs	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80030d2:	e009      	b.n	80030e8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	2210      	movs	r2, #16
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80030e0:	230f      	movs	r3, #15
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030e8:	230f      	movs	r3, #15
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	781b      	ldrb	r3, [r3, #0]
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b004      	add	sp, #16
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	fffffefd 	.word	0xfffffefd
 80030fc:	fffe0219 	.word	0xfffe0219
 8003100:	833fffe7 	.word	0x833fffe7

08003104 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003104:	b590      	push	{r4, r7, lr}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003110:	2317      	movs	r3, #23
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2204      	movs	r2, #4
 8003120:	4013      	ands	r3, r2
 8003122:	d15e      	bne.n	80031e2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2234      	movs	r2, #52	; 0x34
 8003128:	5c9b      	ldrb	r3, [r3, r2]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_ADC_Start_DMA+0x2e>
 800312e:	2302      	movs	r3, #2
 8003130:	e05e      	b.n	80031f0 <HAL_ADC_Start_DMA+0xec>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2234      	movs	r2, #52	; 0x34
 8003136:	2101      	movs	r1, #1
 8003138:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	7e5b      	ldrb	r3, [r3, #25]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d007      	beq.n	8003152 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003142:	2317      	movs	r3, #23
 8003144:	18fc      	adds	r4, r7, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	0018      	movs	r0, r3
 800314a:	f000 f96b 	bl	8003424 <ADC_Enable>
 800314e:	0003      	movs	r3, r0
 8003150:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003152:	2317      	movs	r3, #23
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d146      	bne.n	80031ea <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	4a25      	ldr	r2, [pc, #148]	; (80031f8 <HAL_ADC_Start_DMA+0xf4>)
 8003162:	4013      	ands	r3, r2
 8003164:	2280      	movs	r2, #128	; 0x80
 8003166:	0052      	lsls	r2, r2, #1
 8003168:	431a      	orrs	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2234      	movs	r2, #52	; 0x34
 8003178:	2100      	movs	r1, #0
 800317a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <HAL_ADC_Start_DMA+0xf8>)
 8003182:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <HAL_ADC_Start_DMA+0xfc>)
 800318a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	4a1c      	ldr	r2, [pc, #112]	; (8003204 <HAL_ADC_Start_DMA+0x100>)
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	221c      	movs	r2, #28
 800319a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2110      	movs	r1, #16
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2101      	movs	r1, #1
 80031b8:	430a      	orrs	r2, r1
 80031ba:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3340      	adds	r3, #64	; 0x40
 80031c6:	0019      	movs	r1, r3
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f000 fb58 	bl	8003880 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2104      	movs	r1, #4
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	e003      	b.n	80031ea <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031e2:	2317      	movs	r3, #23
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	2202      	movs	r2, #2
 80031e8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80031ea:	2317      	movs	r3, #23
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	781b      	ldrb	r3, [r3, #0]
}
 80031f0:	0018      	movs	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b007      	add	sp, #28
 80031f6:	bd90      	pop	{r4, r7, pc}
 80031f8:	fffff0fe 	.word	0xfffff0fe
 80031fc:	0800352d 	.word	0x0800352d
 8003200:	080035e1 	.word	0x080035e1
 8003204:	080035ff 	.word	0x080035ff

08003208 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	46bd      	mov	sp, r7
 8003214:	b002      	add	sp, #8
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	b002      	add	sp, #8
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003242:	230f      	movs	r3, #15
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	055b      	lsls	r3, r3, #21
 8003256:	429a      	cmp	r2, r3
 8003258:	d011      	beq.n	800327e <HAL_ADC_ConfigChannel+0x46>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	2b01      	cmp	r3, #1
 8003260:	d00d      	beq.n	800327e <HAL_ADC_ConfigChannel+0x46>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	2b02      	cmp	r3, #2
 8003268:	d009      	beq.n	800327e <HAL_ADC_ConfigChannel+0x46>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	2b03      	cmp	r3, #3
 8003270:	d005      	beq.n	800327e <HAL_ADC_ConfigChannel+0x46>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	2b04      	cmp	r3, #4
 8003278:	d001      	beq.n	800327e <HAL_ADC_ConfigChannel+0x46>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2234      	movs	r2, #52	; 0x34
 8003282:	5c9b      	ldrb	r3, [r3, r2]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_ADC_ConfigChannel+0x54>
 8003288:	2302      	movs	r3, #2
 800328a:	e0bb      	b.n	8003404 <HAL_ADC_ConfigChannel+0x1cc>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2234      	movs	r2, #52	; 0x34
 8003290:	2101      	movs	r1, #1
 8003292:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2204      	movs	r2, #4
 800329c:	4013      	ands	r3, r2
 800329e:	d000      	beq.n	80032a2 <HAL_ADC_ConfigChannel+0x6a>
 80032a0:	e09f      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4a59      	ldr	r2, [pc, #356]	; (800340c <HAL_ADC_ConfigChannel+0x1d4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d100      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x76>
 80032ac:	e077      	b.n	800339e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2201      	movs	r2, #1
 80032ba:	409a      	lsls	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	055b      	lsls	r3, r3, #21
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d037      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d033      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d02f      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d02b      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d027      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d023      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	2b06      	cmp	r3, #6
 80032fe:	d01f      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	2b07      	cmp	r3, #7
 8003306:	d01b      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	2107      	movs	r1, #7
 8003314:	400b      	ands	r3, r1
 8003316:	429a      	cmp	r2, r3
 8003318:	d012      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2107      	movs	r1, #7
 8003326:	438a      	bics	r2, r1
 8003328:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6959      	ldr	r1, [r3, #20]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2207      	movs	r2, #7
 8003336:	401a      	ands	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b10      	cmp	r3, #16
 8003346:	d003      	beq.n	8003350 <HAL_ADC_ConfigChannel+0x118>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b11      	cmp	r3, #17
 800334e:	d152      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003350:	4b2f      	ldr	r3, [pc, #188]	; (8003410 <HAL_ADC_ConfigChannel+0x1d8>)
 8003352:	6819      	ldr	r1, [r3, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b10      	cmp	r3, #16
 800335a:	d102      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x12a>
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	e001      	b.n	8003366 <HAL_ADC_ConfigChannel+0x12e>
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	03db      	lsls	r3, r3, #15
 8003366:	4a2a      	ldr	r2, [pc, #168]	; (8003410 <HAL_ADC_ConfigChannel+0x1d8>)
 8003368:	430b      	orrs	r3, r1
 800336a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b10      	cmp	r3, #16
 8003372:	d140      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003374:	4b27      	ldr	r3, [pc, #156]	; (8003414 <HAL_ADC_ConfigChannel+0x1dc>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4927      	ldr	r1, [pc, #156]	; (8003418 <HAL_ADC_ConfigChannel+0x1e0>)
 800337a:	0018      	movs	r0, r3
 800337c:	f7fc fec4 	bl	8000108 <__udivsi3>
 8003380:	0003      	movs	r3, r0
 8003382:	001a      	movs	r2, r3
 8003384:	0013      	movs	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	189b      	adds	r3, r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800338e:	e002      	b.n	8003396 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	3b01      	subs	r3, #1
 8003394:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f9      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x158>
 800339c:	e02b      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2101      	movs	r1, #1
 80033aa:	4099      	lsls	r1, r3
 80033ac:	000b      	movs	r3, r1
 80033ae:	43d9      	mvns	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	400a      	ands	r2, r1
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d003      	beq.n	80033c8 <HAL_ADC_ConfigChannel+0x190>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b11      	cmp	r3, #17
 80033c6:	d116      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80033c8:	4b11      	ldr	r3, [pc, #68]	; (8003410 <HAL_ADC_ConfigChannel+0x1d8>)
 80033ca:	6819      	ldr	r1, [r3, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d101      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x1a0>
 80033d4:	4a11      	ldr	r2, [pc, #68]	; (800341c <HAL_ADC_ConfigChannel+0x1e4>)
 80033d6:	e000      	b.n	80033da <HAL_ADC_ConfigChannel+0x1a2>
 80033d8:	4a11      	ldr	r2, [pc, #68]	; (8003420 <HAL_ADC_ConfigChannel+0x1e8>)
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <HAL_ADC_ConfigChannel+0x1d8>)
 80033dc:	400a      	ands	r2, r1
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	e009      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	2220      	movs	r2, #32
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80033ee:	230f      	movs	r3, #15
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2234      	movs	r2, #52	; 0x34
 80033fa:	2100      	movs	r1, #0
 80033fc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80033fe:	230f      	movs	r3, #15
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	781b      	ldrb	r3, [r3, #0]
}
 8003404:	0018      	movs	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	b004      	add	sp, #16
 800340a:	bd80      	pop	{r7, pc}
 800340c:	00001001 	.word	0x00001001
 8003410:	40012708 	.word	0x40012708
 8003414:	20000004 	.word	0x20000004
 8003418:	000f4240 	.word	0x000f4240
 800341c:	ff7fffff 	.word	0xff7fffff
 8003420:	ffbfffff 	.word	0xffbfffff

08003424 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2203      	movs	r2, #3
 800343c:	4013      	ands	r3, r2
 800343e:	2b01      	cmp	r3, #1
 8003440:	d112      	bne.n	8003468 <ADC_Enable+0x44>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2201      	movs	r2, #1
 800344a:	4013      	ands	r3, r2
 800344c:	2b01      	cmp	r3, #1
 800344e:	d009      	beq.n	8003464 <ADC_Enable+0x40>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	401a      	ands	r2, r3
 800345c:	2380      	movs	r3, #128	; 0x80
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	429a      	cmp	r2, r3
 8003462:	d101      	bne.n	8003468 <ADC_Enable+0x44>
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <ADC_Enable+0x46>
 8003468:	2300      	movs	r3, #0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d152      	bne.n	8003514 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4a2a      	ldr	r2, [pc, #168]	; (8003520 <ADC_Enable+0xfc>)
 8003476:	4013      	ands	r3, r2
 8003478:	d00d      	beq.n	8003496 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	2210      	movs	r2, #16
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	2201      	movs	r2, #1
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e03f      	b.n	8003516 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2101      	movs	r1, #1
 80034a2:	430a      	orrs	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034a6:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <ADC_Enable+0x100>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	491f      	ldr	r1, [pc, #124]	; (8003528 <ADC_Enable+0x104>)
 80034ac:	0018      	movs	r0, r3
 80034ae:	f7fc fe2b 	bl	8000108 <__udivsi3>
 80034b2:	0003      	movs	r3, r0
 80034b4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034b6:	e002      	b.n	80034be <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f9      	bne.n	80034b8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80034c4:	f7ff fcd4 	bl	8002e70 <HAL_GetTick>
 80034c8:	0003      	movs	r3, r0
 80034ca:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034cc:	e01b      	b.n	8003506 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034ce:	f7ff fccf 	bl	8002e70 <HAL_GetTick>
 80034d2:	0002      	movs	r2, r0
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d914      	bls.n	8003506 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2201      	movs	r2, #1
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d00d      	beq.n	8003506 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	2210      	movs	r2, #16
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fa:	2201      	movs	r2, #1
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e007      	b.n	8003516 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2201      	movs	r2, #1
 800350e:	4013      	ands	r3, r2
 8003510:	2b01      	cmp	r3, #1
 8003512:	d1dc      	bne.n	80034ce <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	0018      	movs	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	b004      	add	sp, #16
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	80000017 	.word	0x80000017
 8003524:	20000004 	.word	0x20000004
 8003528:	000f4240 	.word	0x000f4240

0800352c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	2250      	movs	r2, #80	; 0x50
 8003540:	4013      	ands	r3, r2
 8003542:	d140      	bne.n	80035c6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	2280      	movs	r2, #128	; 0x80
 800354a:	0092      	lsls	r2, r2, #2
 800354c:	431a      	orrs	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	23c0      	movs	r3, #192	; 0xc0
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	4013      	ands	r3, r2
 800355e:	d12d      	bne.n	80035bc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003564:	2b00      	cmp	r3, #0
 8003566:	d129      	bne.n	80035bc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2208      	movs	r2, #8
 8003570:	4013      	ands	r3, r2
 8003572:	2b08      	cmp	r3, #8
 8003574:	d122      	bne.n	80035bc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2204      	movs	r2, #4
 800357e:	4013      	ands	r3, r2
 8003580:	d110      	bne.n	80035a4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	210c      	movs	r1, #12
 800358e:	438a      	bics	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	4a11      	ldr	r2, [pc, #68]	; (80035dc <ADC_DMAConvCplt+0xb0>)
 8003598:	4013      	ands	r3, r2
 800359a:	2201      	movs	r2, #1
 800359c:	431a      	orrs	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	639a      	str	r2, [r3, #56]	; 0x38
 80035a2:	e00b      	b.n	80035bc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	2220      	movs	r2, #32
 80035aa:	431a      	orrs	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	2201      	movs	r2, #1
 80035b6:	431a      	orrs	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	0018      	movs	r0, r3
 80035c0:	f7ff fe22 	bl	8003208 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80035c4:	e005      	b.n	80035d2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	0010      	movs	r0, r2
 80035d0:	4798      	blx	r3
}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b004      	add	sp, #16
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	fffffefe 	.word	0xfffffefe

080035e0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7ff fe11 	bl	8003218 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b004      	add	sp, #16
 80035fc:	bd80      	pop	{r7, pc}

080035fe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	2240      	movs	r2, #64	; 0x40
 8003612:	431a      	orrs	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	2204      	movs	r2, #4
 800361e:	431a      	orrs	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	0018      	movs	r0, r3
 8003628:	f7ff fdfe 	bl	8003228 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	b004      	add	sp, #16
 8003632:	bd80      	pop	{r7, pc}

08003634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	0002      	movs	r2, r0
 800363c:	1dfb      	adds	r3, r7, #7
 800363e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003640:	1dfb      	adds	r3, r7, #7
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b7f      	cmp	r3, #127	; 0x7f
 8003646:	d809      	bhi.n	800365c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003648:	1dfb      	adds	r3, r7, #7
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	001a      	movs	r2, r3
 800364e:	231f      	movs	r3, #31
 8003650:	401a      	ands	r2, r3
 8003652:	4b04      	ldr	r3, [pc, #16]	; (8003664 <__NVIC_EnableIRQ+0x30>)
 8003654:	2101      	movs	r1, #1
 8003656:	4091      	lsls	r1, r2
 8003658:	000a      	movs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]
  }
}
 800365c:	46c0      	nop			; (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	b002      	add	sp, #8
 8003662:	bd80      	pop	{r7, pc}
 8003664:	e000e100 	.word	0xe000e100

08003668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	0002      	movs	r2, r0
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	1dfb      	adds	r3, r7, #7
 8003674:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003676:	1dfb      	adds	r3, r7, #7
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b7f      	cmp	r3, #127	; 0x7f
 800367c:	d828      	bhi.n	80036d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800367e:	4a2f      	ldr	r2, [pc, #188]	; (800373c <__NVIC_SetPriority+0xd4>)
 8003680:	1dfb      	adds	r3, r7, #7
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	b25b      	sxtb	r3, r3
 8003686:	089b      	lsrs	r3, r3, #2
 8003688:	33c0      	adds	r3, #192	; 0xc0
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	589b      	ldr	r3, [r3, r2]
 800368e:	1dfa      	adds	r2, r7, #7
 8003690:	7812      	ldrb	r2, [r2, #0]
 8003692:	0011      	movs	r1, r2
 8003694:	2203      	movs	r2, #3
 8003696:	400a      	ands	r2, r1
 8003698:	00d2      	lsls	r2, r2, #3
 800369a:	21ff      	movs	r1, #255	; 0xff
 800369c:	4091      	lsls	r1, r2
 800369e:	000a      	movs	r2, r1
 80036a0:	43d2      	mvns	r2, r2
 80036a2:	401a      	ands	r2, r3
 80036a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	019b      	lsls	r3, r3, #6
 80036aa:	22ff      	movs	r2, #255	; 0xff
 80036ac:	401a      	ands	r2, r3
 80036ae:	1dfb      	adds	r3, r7, #7
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	0018      	movs	r0, r3
 80036b4:	2303      	movs	r3, #3
 80036b6:	4003      	ands	r3, r0
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036bc:	481f      	ldr	r0, [pc, #124]	; (800373c <__NVIC_SetPriority+0xd4>)
 80036be:	1dfb      	adds	r3, r7, #7
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	b25b      	sxtb	r3, r3
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	430a      	orrs	r2, r1
 80036c8:	33c0      	adds	r3, #192	; 0xc0
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80036ce:	e031      	b.n	8003734 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036d0:	4a1b      	ldr	r2, [pc, #108]	; (8003740 <__NVIC_SetPriority+0xd8>)
 80036d2:	1dfb      	adds	r3, r7, #7
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	0019      	movs	r1, r3
 80036d8:	230f      	movs	r3, #15
 80036da:	400b      	ands	r3, r1
 80036dc:	3b08      	subs	r3, #8
 80036de:	089b      	lsrs	r3, r3, #2
 80036e0:	3306      	adds	r3, #6
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	18d3      	adds	r3, r2, r3
 80036e6:	3304      	adds	r3, #4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	1dfa      	adds	r2, r7, #7
 80036ec:	7812      	ldrb	r2, [r2, #0]
 80036ee:	0011      	movs	r1, r2
 80036f0:	2203      	movs	r2, #3
 80036f2:	400a      	ands	r2, r1
 80036f4:	00d2      	lsls	r2, r2, #3
 80036f6:	21ff      	movs	r1, #255	; 0xff
 80036f8:	4091      	lsls	r1, r2
 80036fa:	000a      	movs	r2, r1
 80036fc:	43d2      	mvns	r2, r2
 80036fe:	401a      	ands	r2, r3
 8003700:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	019b      	lsls	r3, r3, #6
 8003706:	22ff      	movs	r2, #255	; 0xff
 8003708:	401a      	ands	r2, r3
 800370a:	1dfb      	adds	r3, r7, #7
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	0018      	movs	r0, r3
 8003710:	2303      	movs	r3, #3
 8003712:	4003      	ands	r3, r0
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003718:	4809      	ldr	r0, [pc, #36]	; (8003740 <__NVIC_SetPriority+0xd8>)
 800371a:	1dfb      	adds	r3, r7, #7
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	001c      	movs	r4, r3
 8003720:	230f      	movs	r3, #15
 8003722:	4023      	ands	r3, r4
 8003724:	3b08      	subs	r3, #8
 8003726:	089b      	lsrs	r3, r3, #2
 8003728:	430a      	orrs	r2, r1
 800372a:	3306      	adds	r3, #6
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	18c3      	adds	r3, r0, r3
 8003730:	3304      	adds	r3, #4
 8003732:	601a      	str	r2, [r3, #0]
}
 8003734:	46c0      	nop			; (mov r8, r8)
 8003736:	46bd      	mov	sp, r7
 8003738:	b003      	add	sp, #12
 800373a:	bd90      	pop	{r4, r7, pc}
 800373c:	e000e100 	.word	0xe000e100
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	1e5a      	subs	r2, r3, #1
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	045b      	lsls	r3, r3, #17
 8003754:	429a      	cmp	r2, r3
 8003756:	d301      	bcc.n	800375c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003758:	2301      	movs	r3, #1
 800375a:	e010      	b.n	800377e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <SysTick_Config+0x44>)
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	3a01      	subs	r2, #1
 8003762:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003764:	2301      	movs	r3, #1
 8003766:	425b      	negs	r3, r3
 8003768:	2103      	movs	r1, #3
 800376a:	0018      	movs	r0, r3
 800376c:	f7ff ff7c 	bl	8003668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <SysTick_Config+0x44>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003776:	4b04      	ldr	r3, [pc, #16]	; (8003788 <SysTick_Config+0x44>)
 8003778:	2207      	movs	r2, #7
 800377a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800377c:	2300      	movs	r3, #0
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	b002      	add	sp, #8
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	e000e010 	.word	0xe000e010

0800378c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	210f      	movs	r1, #15
 8003798:	187b      	adds	r3, r7, r1
 800379a:	1c02      	adds	r2, r0, #0
 800379c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	b25b      	sxtb	r3, r3
 80037a6:	0011      	movs	r1, r2
 80037a8:	0018      	movs	r0, r3
 80037aa:	f7ff ff5d 	bl	8003668 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b004      	add	sp, #16
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	0002      	movs	r2, r0
 80037be:	1dfb      	adds	r3, r7, #7
 80037c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c2:	1dfb      	adds	r3, r7, #7
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	b25b      	sxtb	r3, r3
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7ff ff33 	bl	8003634 <__NVIC_EnableIRQ>
}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b002      	add	sp, #8
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	0018      	movs	r0, r3
 80037e2:	f7ff ffaf 	bl	8003744 <SysTick_Config>
 80037e6:	0003      	movs	r3, r0
}
 80037e8:	0018      	movs	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b002      	add	sp, #8
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e036      	b.n	8003874 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2221      	movs	r2, #33	; 0x21
 800380a:	2102      	movs	r1, #2
 800380c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4a18      	ldr	r2, [pc, #96]	; (800387c <HAL_DMA_Init+0x8c>)
 800381a:	4013      	ands	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003826:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	0018      	movs	r0, r3
 8003858:	f000 f946 	bl	8003ae8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2221      	movs	r2, #33	; 0x21
 8003866:	2101      	movs	r1, #1
 8003868:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	2100      	movs	r1, #0
 8003870:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	0018      	movs	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	b004      	add	sp, #16
 800387a:	bd80      	pop	{r7, pc}
 800387c:	ffffc00f 	.word	0xffffc00f

08003880 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800388e:	2317      	movs	r3, #23
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	5c9b      	ldrb	r3, [r3, r2]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_DMA_Start_IT+0x24>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e04f      	b.n	8003944 <HAL_DMA_Start_IT+0xc4>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	2101      	movs	r1, #1
 80038aa:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2221      	movs	r2, #33	; 0x21
 80038b0:	5c9b      	ldrb	r3, [r3, r2]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d13a      	bne.n	800392e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2221      	movs	r2, #33	; 0x21
 80038bc:	2102      	movs	r1, #2
 80038be:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2101      	movs	r1, #1
 80038d2:	438a      	bics	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f8d7 	bl	8003a90 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	210e      	movs	r1, #14
 80038f6:	430a      	orrs	r2, r1
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	e00f      	b.n	800391c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	210a      	movs	r1, #10
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2104      	movs	r1, #4
 8003918:	438a      	bics	r2, r1
 800391a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2101      	movs	r1, #1
 8003928:	430a      	orrs	r2, r1
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e007      	b.n	800393e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	2100      	movs	r1, #0
 8003934:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003936:	2317      	movs	r3, #23
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	2202      	movs	r2, #2
 800393c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800393e:	2317      	movs	r3, #23
 8003940:	18fb      	adds	r3, r7, r3
 8003942:	781b      	ldrb	r3, [r3, #0]
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b006      	add	sp, #24
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	2204      	movs	r2, #4
 800396a:	409a      	lsls	r2, r3
 800396c:	0013      	movs	r3, r2
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4013      	ands	r3, r2
 8003972:	d024      	beq.n	80039be <HAL_DMA_IRQHandler+0x72>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2204      	movs	r2, #4
 8003978:	4013      	ands	r3, r2
 800397a:	d020      	beq.n	80039be <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2220      	movs	r2, #32
 8003984:	4013      	ands	r3, r2
 8003986:	d107      	bne.n	8003998 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2104      	movs	r1, #4
 8003994:	438a      	bics	r2, r1
 8003996:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	2104      	movs	r1, #4
 80039a2:	4091      	lsls	r1, r2
 80039a4:	000a      	movs	r2, r1
 80039a6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d100      	bne.n	80039b2 <HAL_DMA_IRQHandler+0x66>
 80039b0:	e06a      	b.n	8003a88 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	0010      	movs	r0, r2
 80039ba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80039bc:	e064      	b.n	8003a88 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	2202      	movs	r2, #2
 80039c4:	409a      	lsls	r2, r3
 80039c6:	0013      	movs	r3, r2
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4013      	ands	r3, r2
 80039cc:	d02b      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xda>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2202      	movs	r2, #2
 80039d2:	4013      	ands	r3, r2
 80039d4:	d027      	beq.n	8003a26 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2220      	movs	r2, #32
 80039de:	4013      	ands	r3, r2
 80039e0:	d10b      	bne.n	80039fa <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	210a      	movs	r1, #10
 80039ee:	438a      	bics	r2, r1
 80039f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2221      	movs	r2, #33	; 0x21
 80039f6:	2101      	movs	r1, #1
 80039f8:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a02:	2102      	movs	r1, #2
 8003a04:	4091      	lsls	r1, r2
 8003a06:	000a      	movs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	2100      	movs	r1, #0
 8003a10:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d036      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	0010      	movs	r0, r2
 8003a22:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a24:	e030      	b.n	8003a88 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	0013      	movs	r3, r2
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4013      	ands	r3, r2
 8003a34:	d028      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x13c>
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2208      	movs	r2, #8
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d024      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	210e      	movs	r1, #14
 8003a4a:	438a      	bics	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	2101      	movs	r1, #1
 8003a58:	4091      	lsls	r1, r2
 8003a5a:	000a      	movs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2221      	movs	r2, #33	; 0x21
 8003a68:	2101      	movs	r1, #1
 8003a6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	2100      	movs	r1, #0
 8003a72:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	0010      	movs	r0, r2
 8003a84:	4798      	blx	r3
    }
  }
}
 8003a86:	e7ff      	b.n	8003a88 <HAL_DMA_IRQHandler+0x13c>
 8003a88:	46c0      	nop			; (mov r8, r8)
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b004      	add	sp, #16
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4091      	lsls	r1, r2
 8003aaa:	000a      	movs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b10      	cmp	r3, #16
 8003abc:	d108      	bne.n	8003ad0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ace:	e007      	b.n	8003ae0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	60da      	str	r2, [r3, #12]
}
 8003ae0:	46c0      	nop			; (mov r8, r8)
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b004      	add	sp, #16
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a08      	ldr	r2, [pc, #32]	; (8003b18 <DMA_CalcBaseAndBitshift+0x30>)
 8003af6:	4694      	mov	ip, r2
 8003af8:	4463      	add	r3, ip
 8003afa:	2114      	movs	r1, #20
 8003afc:	0018      	movs	r0, r3
 8003afe:	f7fc fb03 	bl	8000108 <__udivsi3>
 8003b02:	0003      	movs	r3, r0
 8003b04:	009a      	lsls	r2, r3, #2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a03      	ldr	r2, [pc, #12]	; (8003b1c <DMA_CalcBaseAndBitshift+0x34>)
 8003b0e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b002      	add	sp, #8
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	bffdfff8 	.word	0xbffdfff8
 8003b1c:	40020000 	.word	0x40020000

08003b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b2e:	e14f      	b.n	8003dd0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2101      	movs	r1, #1
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4091      	lsls	r1, r2
 8003b3a:	000a      	movs	r2, r1
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d100      	bne.n	8003b48 <HAL_GPIO_Init+0x28>
 8003b46:	e140      	b.n	8003dca <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d005      	beq.n	8003b60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2203      	movs	r2, #3
 8003b5a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d130      	bne.n	8003bc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	0013      	movs	r3, r2
 8003b70:	43da      	mvns	r2, r3
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	409a      	lsls	r2, r3
 8003b82:	0013      	movs	r3, r2
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b96:	2201      	movs	r2, #1
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	0013      	movs	r3, r2
 8003b9e:	43da      	mvns	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	2201      	movs	r2, #1
 8003bae:	401a      	ands	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	0013      	movs	r3, r2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d017      	beq.n	8003bfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	2203      	movs	r2, #3
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	0013      	movs	r3, r2
 8003bde:	43da      	mvns	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	0013      	movs	r3, r2
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2203      	movs	r2, #3
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d123      	bne.n	8003c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	08da      	lsrs	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3208      	adds	r2, #8
 8003c12:	0092      	lsls	r2, r2, #2
 8003c14:	58d3      	ldr	r3, [r2, r3]
 8003c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2207      	movs	r2, #7
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	220f      	movs	r2, #15
 8003c22:	409a      	lsls	r2, r3
 8003c24:	0013      	movs	r3, r2
 8003c26:	43da      	mvns	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2107      	movs	r1, #7
 8003c36:	400b      	ands	r3, r1
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	0013      	movs	r3, r2
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	08da      	lsrs	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3208      	adds	r2, #8
 8003c4c:	0092      	lsls	r2, r2, #2
 8003c4e:	6939      	ldr	r1, [r7, #16]
 8003c50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	0013      	movs	r3, r2
 8003c62:	43da      	mvns	r2, r3
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2203      	movs	r2, #3
 8003c70:	401a      	ands	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	409a      	lsls	r2, r3
 8003c78:	0013      	movs	r3, r2
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	23c0      	movs	r3, #192	; 0xc0
 8003c8c:	029b      	lsls	r3, r3, #10
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d100      	bne.n	8003c94 <HAL_GPIO_Init+0x174>
 8003c92:	e09a      	b.n	8003dca <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c94:	4b54      	ldr	r3, [pc, #336]	; (8003de8 <HAL_GPIO_Init+0x2c8>)
 8003c96:	699a      	ldr	r2, [r3, #24]
 8003c98:	4b53      	ldr	r3, [pc, #332]	; (8003de8 <HAL_GPIO_Init+0x2c8>)
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	619a      	str	r2, [r3, #24]
 8003ca0:	4b51      	ldr	r3, [pc, #324]	; (8003de8 <HAL_GPIO_Init+0x2c8>)
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cac:	4a4f      	ldr	r2, [pc, #316]	; (8003dec <HAL_GPIO_Init+0x2cc>)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	089b      	lsrs	r3, r3, #2
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	589b      	ldr	r3, [r3, r2]
 8003cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	220f      	movs	r2, #15
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	0013      	movs	r3, r2
 8003cc8:	43da      	mvns	r2, r3
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	2390      	movs	r3, #144	; 0x90
 8003cd4:	05db      	lsls	r3, r3, #23
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d013      	beq.n	8003d02 <HAL_GPIO_Init+0x1e2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a44      	ldr	r2, [pc, #272]	; (8003df0 <HAL_GPIO_Init+0x2d0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00d      	beq.n	8003cfe <HAL_GPIO_Init+0x1de>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a43      	ldr	r2, [pc, #268]	; (8003df4 <HAL_GPIO_Init+0x2d4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d007      	beq.n	8003cfa <HAL_GPIO_Init+0x1da>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a42      	ldr	r2, [pc, #264]	; (8003df8 <HAL_GPIO_Init+0x2d8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d101      	bne.n	8003cf6 <HAL_GPIO_Init+0x1d6>
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e006      	b.n	8003d04 <HAL_GPIO_Init+0x1e4>
 8003cf6:	2305      	movs	r3, #5
 8003cf8:	e004      	b.n	8003d04 <HAL_GPIO_Init+0x1e4>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e002      	b.n	8003d04 <HAL_GPIO_Init+0x1e4>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_GPIO_Init+0x1e4>
 8003d02:	2300      	movs	r3, #0
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	2103      	movs	r1, #3
 8003d08:	400a      	ands	r2, r1
 8003d0a:	0092      	lsls	r2, r2, #2
 8003d0c:	4093      	lsls	r3, r2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d14:	4935      	ldr	r1, [pc, #212]	; (8003dec <HAL_GPIO_Init+0x2cc>)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	089b      	lsrs	r3, r3, #2
 8003d1a:	3302      	adds	r3, #2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d22:	4b36      	ldr	r3, [pc, #216]	; (8003dfc <HAL_GPIO_Init+0x2dc>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	43da      	mvns	r2, r3
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	035b      	lsls	r3, r3, #13
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003d46:	4b2d      	ldr	r3, [pc, #180]	; (8003dfc <HAL_GPIO_Init+0x2dc>)
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003d4c:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <HAL_GPIO_Init+0x2dc>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	43da      	mvns	r2, r3
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	039b      	lsls	r3, r3, #14
 8003d64:	4013      	ands	r3, r2
 8003d66:	d003      	beq.n	8003d70 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d70:	4b22      	ldr	r3, [pc, #136]	; (8003dfc <HAL_GPIO_Init+0x2dc>)
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003d76:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <HAL_GPIO_Init+0x2dc>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	43da      	mvns	r2, r3
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	029b      	lsls	r3, r3, #10
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d9a:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <HAL_GPIO_Init+0x2dc>)
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003da0:	4b16      	ldr	r3, [pc, #88]	; (8003dfc <HAL_GPIO_Init+0x2dc>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	43da      	mvns	r2, r3
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4013      	ands	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	2380      	movs	r3, #128	; 0x80
 8003db6:	025b      	lsls	r3, r3, #9
 8003db8:	4013      	ands	r3, r2
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003dc4:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <HAL_GPIO_Init+0x2dc>)
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	40da      	lsrs	r2, r3
 8003dd8:	1e13      	subs	r3, r2, #0
 8003dda:	d000      	beq.n	8003dde <HAL_GPIO_Init+0x2be>
 8003ddc:	e6a8      	b.n	8003b30 <HAL_GPIO_Init+0x10>
  } 
}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b006      	add	sp, #24
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40021000 	.word	0x40021000
 8003dec:	40010000 	.word	0x40010000
 8003df0:	48000400 	.word	0x48000400
 8003df4:	48000800 	.word	0x48000800
 8003df8:	48000c00 	.word	0x48000c00
 8003dfc:	40010400 	.word	0x40010400

08003e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	0008      	movs	r0, r1
 8003e0a:	0011      	movs	r1, r2
 8003e0c:	1cbb      	adds	r3, r7, #2
 8003e0e:	1c02      	adds	r2, r0, #0
 8003e10:	801a      	strh	r2, [r3, #0]
 8003e12:	1c7b      	adds	r3, r7, #1
 8003e14:	1c0a      	adds	r2, r1, #0
 8003e16:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e18:	1c7b      	adds	r3, r7, #1
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d004      	beq.n	8003e2a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e20:	1cbb      	adds	r3, r7, #2
 8003e22:	881a      	ldrh	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e28:	e003      	b.n	8003e32 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e2a:	1cbb      	adds	r3, r7, #2
 8003e2c:	881a      	ldrh	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b002      	add	sp, #8
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e301      	b.n	8004452 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2201      	movs	r2, #1
 8003e54:	4013      	ands	r3, r2
 8003e56:	d100      	bne.n	8003e5a <HAL_RCC_OscConfig+0x1e>
 8003e58:	e08d      	b.n	8003f76 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e5a:	4bc3      	ldr	r3, [pc, #780]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	220c      	movs	r2, #12
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d00e      	beq.n	8003e84 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e66:	4bc0      	ldr	r3, [pc, #768]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	220c      	movs	r2, #12
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d116      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x64>
 8003e72:	4bbd      	ldr	r3, [pc, #756]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	025b      	lsls	r3, r3, #9
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	025b      	lsls	r3, r3, #9
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d10d      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e84:	4bb8      	ldr	r3, [pc, #736]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	029b      	lsls	r3, r3, #10
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d100      	bne.n	8003e92 <HAL_RCC_OscConfig+0x56>
 8003e90:	e070      	b.n	8003f74 <HAL_RCC_OscConfig+0x138>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d000      	beq.n	8003e9c <HAL_RCC_OscConfig+0x60>
 8003e9a:	e06b      	b.n	8003f74 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e2d8      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d107      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x7c>
 8003ea8:	4baf      	ldr	r3, [pc, #700]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4bae      	ldr	r3, [pc, #696]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	0249      	lsls	r1, r1, #9
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	e02f      	b.n	8003f18 <HAL_RCC_OscConfig+0xdc>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10c      	bne.n	8003eda <HAL_RCC_OscConfig+0x9e>
 8003ec0:	4ba9      	ldr	r3, [pc, #676]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4ba8      	ldr	r3, [pc, #672]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ec6:	49a9      	ldr	r1, [pc, #676]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003ec8:	400a      	ands	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	4ba6      	ldr	r3, [pc, #664]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4ba5      	ldr	r3, [pc, #660]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ed2:	49a7      	ldr	r1, [pc, #668]	; (8004170 <HAL_RCC_OscConfig+0x334>)
 8003ed4:	400a      	ands	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	e01e      	b.n	8003f18 <HAL_RCC_OscConfig+0xdc>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b05      	cmp	r3, #5
 8003ee0:	d10e      	bne.n	8003f00 <HAL_RCC_OscConfig+0xc4>
 8003ee2:	4ba1      	ldr	r3, [pc, #644]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	4ba0      	ldr	r3, [pc, #640]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ee8:	2180      	movs	r1, #128	; 0x80
 8003eea:	02c9      	lsls	r1, r1, #11
 8003eec:	430a      	orrs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	4b9d      	ldr	r3, [pc, #628]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b9c      	ldr	r3, [pc, #624]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	0249      	lsls	r1, r1, #9
 8003efa:	430a      	orrs	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e00b      	b.n	8003f18 <HAL_RCC_OscConfig+0xdc>
 8003f00:	4b99      	ldr	r3, [pc, #612]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	4b98      	ldr	r3, [pc, #608]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003f06:	4999      	ldr	r1, [pc, #612]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003f08:	400a      	ands	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	4b96      	ldr	r3, [pc, #600]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	4b95      	ldr	r3, [pc, #596]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003f12:	4997      	ldr	r1, [pc, #604]	; (8004170 <HAL_RCC_OscConfig+0x334>)
 8003f14:	400a      	ands	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d014      	beq.n	8003f4a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f20:	f7fe ffa6 	bl	8002e70 <HAL_GetTick>
 8003f24:	0003      	movs	r3, r0
 8003f26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f2a:	f7fe ffa1 	bl	8002e70 <HAL_GetTick>
 8003f2e:	0002      	movs	r2, r0
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b64      	cmp	r3, #100	; 0x64
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e28a      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3c:	4b8a      	ldr	r3, [pc, #552]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	029b      	lsls	r3, r3, #10
 8003f44:	4013      	ands	r3, r2
 8003f46:	d0f0      	beq.n	8003f2a <HAL_RCC_OscConfig+0xee>
 8003f48:	e015      	b.n	8003f76 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4a:	f7fe ff91 	bl	8002e70 <HAL_GetTick>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f54:	f7fe ff8c 	bl	8002e70 <HAL_GetTick>
 8003f58:	0002      	movs	r2, r0
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	; 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e275      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f66:	4b80      	ldr	r3, [pc, #512]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	029b      	lsls	r3, r3, #10
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x118>
 8003f72:	e000      	b.n	8003f76 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f74:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d100      	bne.n	8003f82 <HAL_RCC_OscConfig+0x146>
 8003f80:	e069      	b.n	8004056 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f82:	4b79      	ldr	r3, [pc, #484]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	220c      	movs	r2, #12
 8003f88:	4013      	ands	r3, r2
 8003f8a:	d00b      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f8c:	4b76      	ldr	r3, [pc, #472]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	220c      	movs	r2, #12
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d11c      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x196>
 8003f98:	4b73      	ldr	r3, [pc, #460]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	025b      	lsls	r3, r3, #9
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d116      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fa4:	4b70      	ldr	r3, [pc, #448]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	4013      	ands	r3, r2
 8003fac:	d005      	beq.n	8003fba <HAL_RCC_OscConfig+0x17e>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d001      	beq.n	8003fba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e24b      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fba:	4b6b      	ldr	r3, [pc, #428]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	22f8      	movs	r2, #248	; 0xf8
 8003fc0:	4393      	bics	r3, r2
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	00da      	lsls	r2, r3, #3
 8003fca:	4b67      	ldr	r3, [pc, #412]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd0:	e041      	b.n	8004056 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d024      	beq.n	8004024 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fda:	4b63      	ldr	r3, [pc, #396]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b62      	ldr	r3, [pc, #392]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe6:	f7fe ff43 	bl	8002e70 <HAL_GetTick>
 8003fea:	0003      	movs	r3, r0
 8003fec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff0:	f7fe ff3e 	bl	8002e70 <HAL_GetTick>
 8003ff4:	0002      	movs	r2, r0
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e227      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004002:	4b59      	ldr	r3, [pc, #356]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2202      	movs	r2, #2
 8004008:	4013      	ands	r3, r2
 800400a:	d0f1      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400c:	4b56      	ldr	r3, [pc, #344]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	22f8      	movs	r2, #248	; 0xf8
 8004012:	4393      	bics	r3, r2
 8004014:	0019      	movs	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	00da      	lsls	r2, r3, #3
 800401c:	4b52      	ldr	r3, [pc, #328]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 800401e:	430a      	orrs	r2, r1
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e018      	b.n	8004056 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004024:	4b50      	ldr	r3, [pc, #320]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4b4f      	ldr	r3, [pc, #316]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 800402a:	2101      	movs	r1, #1
 800402c:	438a      	bics	r2, r1
 800402e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fe ff1e 	bl	8002e70 <HAL_GetTick>
 8004034:	0003      	movs	r3, r0
 8004036:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800403a:	f7fe ff19 	bl	8002e70 <HAL_GetTick>
 800403e:	0002      	movs	r2, r0
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e202      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800404c:	4b46      	ldr	r3, [pc, #280]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2202      	movs	r2, #2
 8004052:	4013      	ands	r3, r2
 8004054:	d1f1      	bne.n	800403a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2208      	movs	r2, #8
 800405c:	4013      	ands	r3, r2
 800405e:	d036      	beq.n	80040ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d019      	beq.n	800409c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004068:	4b3f      	ldr	r3, [pc, #252]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 800406a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800406c:	4b3e      	ldr	r3, [pc, #248]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 800406e:	2101      	movs	r1, #1
 8004070:	430a      	orrs	r2, r1
 8004072:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004074:	f7fe fefc 	bl	8002e70 <HAL_GetTick>
 8004078:	0003      	movs	r3, r0
 800407a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800407e:	f7fe fef7 	bl	8002e70 <HAL_GetTick>
 8004082:	0002      	movs	r2, r0
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e1e0      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004090:	4b35      	ldr	r3, [pc, #212]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	2202      	movs	r2, #2
 8004096:	4013      	ands	r3, r2
 8004098:	d0f1      	beq.n	800407e <HAL_RCC_OscConfig+0x242>
 800409a:	e018      	b.n	80040ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800409c:	4b32      	ldr	r3, [pc, #200]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 800409e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040a0:	4b31      	ldr	r3, [pc, #196]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 80040a2:	2101      	movs	r1, #1
 80040a4:	438a      	bics	r2, r1
 80040a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a8:	f7fe fee2 	bl	8002e70 <HAL_GetTick>
 80040ac:	0003      	movs	r3, r0
 80040ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b2:	f7fe fedd 	bl	8002e70 <HAL_GetTick>
 80040b6:	0002      	movs	r2, r0
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e1c6      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c4:	4b28      	ldr	r3, [pc, #160]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	2202      	movs	r2, #2
 80040ca:	4013      	ands	r3, r2
 80040cc:	d1f1      	bne.n	80040b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2204      	movs	r2, #4
 80040d4:	4013      	ands	r3, r2
 80040d6:	d100      	bne.n	80040da <HAL_RCC_OscConfig+0x29e>
 80040d8:	e0b4      	b.n	8004244 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040da:	201f      	movs	r0, #31
 80040dc:	183b      	adds	r3, r7, r0
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040e2:	4b21      	ldr	r3, [pc, #132]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 80040e4:	69da      	ldr	r2, [r3, #28]
 80040e6:	2380      	movs	r3, #128	; 0x80
 80040e8:	055b      	lsls	r3, r3, #21
 80040ea:	4013      	ands	r3, r2
 80040ec:	d110      	bne.n	8004110 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ee:	4b1e      	ldr	r3, [pc, #120]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 80040f0:	69da      	ldr	r2, [r3, #28]
 80040f2:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 80040f4:	2180      	movs	r1, #128	; 0x80
 80040f6:	0549      	lsls	r1, r1, #21
 80040f8:	430a      	orrs	r2, r1
 80040fa:	61da      	str	r2, [r3, #28]
 80040fc:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	055b      	lsls	r3, r3, #21
 8004104:	4013      	ands	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800410a:	183b      	adds	r3, r7, r0
 800410c:	2201      	movs	r2, #1
 800410e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004110:	4b18      	ldr	r3, [pc, #96]	; (8004174 <HAL_RCC_OscConfig+0x338>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	4013      	ands	r3, r2
 800411a:	d11a      	bne.n	8004152 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800411c:	4b15      	ldr	r3, [pc, #84]	; (8004174 <HAL_RCC_OscConfig+0x338>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4b14      	ldr	r3, [pc, #80]	; (8004174 <HAL_RCC_OscConfig+0x338>)
 8004122:	2180      	movs	r1, #128	; 0x80
 8004124:	0049      	lsls	r1, r1, #1
 8004126:	430a      	orrs	r2, r1
 8004128:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800412a:	f7fe fea1 	bl	8002e70 <HAL_GetTick>
 800412e:	0003      	movs	r3, r0
 8004130:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004134:	f7fe fe9c 	bl	8002e70 <HAL_GetTick>
 8004138:	0002      	movs	r2, r0
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b64      	cmp	r3, #100	; 0x64
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e185      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004146:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCC_OscConfig+0x338>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	4013      	ands	r3, r2
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d10e      	bne.n	8004178 <HAL_RCC_OscConfig+0x33c>
 800415a:	4b03      	ldr	r3, [pc, #12]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 800415c:	6a1a      	ldr	r2, [r3, #32]
 800415e:	4b02      	ldr	r3, [pc, #8]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8004160:	2101      	movs	r1, #1
 8004162:	430a      	orrs	r2, r1
 8004164:	621a      	str	r2, [r3, #32]
 8004166:	e035      	b.n	80041d4 <HAL_RCC_OscConfig+0x398>
 8004168:	40021000 	.word	0x40021000
 800416c:	fffeffff 	.word	0xfffeffff
 8004170:	fffbffff 	.word	0xfffbffff
 8004174:	40007000 	.word	0x40007000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10c      	bne.n	800419a <HAL_RCC_OscConfig+0x35e>
 8004180:	4bb6      	ldr	r3, [pc, #728]	; (800445c <HAL_RCC_OscConfig+0x620>)
 8004182:	6a1a      	ldr	r2, [r3, #32]
 8004184:	4bb5      	ldr	r3, [pc, #724]	; (800445c <HAL_RCC_OscConfig+0x620>)
 8004186:	2101      	movs	r1, #1
 8004188:	438a      	bics	r2, r1
 800418a:	621a      	str	r2, [r3, #32]
 800418c:	4bb3      	ldr	r3, [pc, #716]	; (800445c <HAL_RCC_OscConfig+0x620>)
 800418e:	6a1a      	ldr	r2, [r3, #32]
 8004190:	4bb2      	ldr	r3, [pc, #712]	; (800445c <HAL_RCC_OscConfig+0x620>)
 8004192:	2104      	movs	r1, #4
 8004194:	438a      	bics	r2, r1
 8004196:	621a      	str	r2, [r3, #32]
 8004198:	e01c      	b.n	80041d4 <HAL_RCC_OscConfig+0x398>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b05      	cmp	r3, #5
 80041a0:	d10c      	bne.n	80041bc <HAL_RCC_OscConfig+0x380>
 80041a2:	4bae      	ldr	r3, [pc, #696]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80041a4:	6a1a      	ldr	r2, [r3, #32]
 80041a6:	4bad      	ldr	r3, [pc, #692]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80041a8:	2104      	movs	r1, #4
 80041aa:	430a      	orrs	r2, r1
 80041ac:	621a      	str	r2, [r3, #32]
 80041ae:	4bab      	ldr	r3, [pc, #684]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80041b0:	6a1a      	ldr	r2, [r3, #32]
 80041b2:	4baa      	ldr	r3, [pc, #680]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80041b4:	2101      	movs	r1, #1
 80041b6:	430a      	orrs	r2, r1
 80041b8:	621a      	str	r2, [r3, #32]
 80041ba:	e00b      	b.n	80041d4 <HAL_RCC_OscConfig+0x398>
 80041bc:	4ba7      	ldr	r3, [pc, #668]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80041be:	6a1a      	ldr	r2, [r3, #32]
 80041c0:	4ba6      	ldr	r3, [pc, #664]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80041c2:	2101      	movs	r1, #1
 80041c4:	438a      	bics	r2, r1
 80041c6:	621a      	str	r2, [r3, #32]
 80041c8:	4ba4      	ldr	r3, [pc, #656]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80041ca:	6a1a      	ldr	r2, [r3, #32]
 80041cc:	4ba3      	ldr	r3, [pc, #652]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80041ce:	2104      	movs	r1, #4
 80041d0:	438a      	bics	r2, r1
 80041d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d014      	beq.n	8004206 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041dc:	f7fe fe48 	bl	8002e70 <HAL_GetTick>
 80041e0:	0003      	movs	r3, r0
 80041e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e4:	e009      	b.n	80041fa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fe fe43 	bl	8002e70 <HAL_GetTick>
 80041ea:	0002      	movs	r2, r0
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	4a9b      	ldr	r2, [pc, #620]	; (8004460 <HAL_RCC_OscConfig+0x624>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e12b      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fa:	4b98      	ldr	r3, [pc, #608]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	2202      	movs	r2, #2
 8004200:	4013      	ands	r3, r2
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x3aa>
 8004204:	e013      	b.n	800422e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004206:	f7fe fe33 	bl	8002e70 <HAL_GetTick>
 800420a:	0003      	movs	r3, r0
 800420c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800420e:	e009      	b.n	8004224 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004210:	f7fe fe2e 	bl	8002e70 <HAL_GetTick>
 8004214:	0002      	movs	r2, r0
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	4a91      	ldr	r2, [pc, #580]	; (8004460 <HAL_RCC_OscConfig+0x624>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e116      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004224:	4b8d      	ldr	r3, [pc, #564]	; (800445c <HAL_RCC_OscConfig+0x620>)
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	2202      	movs	r2, #2
 800422a:	4013      	ands	r3, r2
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800422e:	231f      	movs	r3, #31
 8004230:	18fb      	adds	r3, r7, r3
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d105      	bne.n	8004244 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004238:	4b88      	ldr	r3, [pc, #544]	; (800445c <HAL_RCC_OscConfig+0x620>)
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	4b87      	ldr	r3, [pc, #540]	; (800445c <HAL_RCC_OscConfig+0x620>)
 800423e:	4989      	ldr	r1, [pc, #548]	; (8004464 <HAL_RCC_OscConfig+0x628>)
 8004240:	400a      	ands	r2, r1
 8004242:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2210      	movs	r2, #16
 800424a:	4013      	ands	r3, r2
 800424c:	d063      	beq.n	8004316 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d12a      	bne.n	80042ac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004256:	4b81      	ldr	r3, [pc, #516]	; (800445c <HAL_RCC_OscConfig+0x620>)
 8004258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800425a:	4b80      	ldr	r3, [pc, #512]	; (800445c <HAL_RCC_OscConfig+0x620>)
 800425c:	2104      	movs	r1, #4
 800425e:	430a      	orrs	r2, r1
 8004260:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004262:	4b7e      	ldr	r3, [pc, #504]	; (800445c <HAL_RCC_OscConfig+0x620>)
 8004264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004266:	4b7d      	ldr	r3, [pc, #500]	; (800445c <HAL_RCC_OscConfig+0x620>)
 8004268:	2101      	movs	r1, #1
 800426a:	430a      	orrs	r2, r1
 800426c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426e:	f7fe fdff 	bl	8002e70 <HAL_GetTick>
 8004272:	0003      	movs	r3, r0
 8004274:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004278:	f7fe fdfa 	bl	8002e70 <HAL_GetTick>
 800427c:	0002      	movs	r2, r0
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e0e3      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800428a:	4b74      	ldr	r3, [pc, #464]	; (800445c <HAL_RCC_OscConfig+0x620>)
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	2202      	movs	r2, #2
 8004290:	4013      	ands	r3, r2
 8004292:	d0f1      	beq.n	8004278 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004294:	4b71      	ldr	r3, [pc, #452]	; (800445c <HAL_RCC_OscConfig+0x620>)
 8004296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004298:	22f8      	movs	r2, #248	; 0xf8
 800429a:	4393      	bics	r3, r2
 800429c:	0019      	movs	r1, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	00da      	lsls	r2, r3, #3
 80042a4:	4b6d      	ldr	r3, [pc, #436]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80042a6:	430a      	orrs	r2, r1
 80042a8:	635a      	str	r2, [r3, #52]	; 0x34
 80042aa:	e034      	b.n	8004316 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	3305      	adds	r3, #5
 80042b2:	d111      	bne.n	80042d8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80042b4:	4b69      	ldr	r3, [pc, #420]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80042b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042b8:	4b68      	ldr	r3, [pc, #416]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80042ba:	2104      	movs	r1, #4
 80042bc:	438a      	bics	r2, r1
 80042be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80042c0:	4b66      	ldr	r3, [pc, #408]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80042c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c4:	22f8      	movs	r2, #248	; 0xf8
 80042c6:	4393      	bics	r3, r2
 80042c8:	0019      	movs	r1, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	00da      	lsls	r2, r3, #3
 80042d0:	4b62      	ldr	r3, [pc, #392]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80042d2:	430a      	orrs	r2, r1
 80042d4:	635a      	str	r2, [r3, #52]	; 0x34
 80042d6:	e01e      	b.n	8004316 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80042d8:	4b60      	ldr	r3, [pc, #384]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80042da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042dc:	4b5f      	ldr	r3, [pc, #380]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80042de:	2104      	movs	r1, #4
 80042e0:	430a      	orrs	r2, r1
 80042e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80042e4:	4b5d      	ldr	r3, [pc, #372]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80042e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e8:	4b5c      	ldr	r3, [pc, #368]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80042ea:	2101      	movs	r1, #1
 80042ec:	438a      	bics	r2, r1
 80042ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f0:	f7fe fdbe 	bl	8002e70 <HAL_GetTick>
 80042f4:	0003      	movs	r3, r0
 80042f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80042fa:	f7fe fdb9 	bl	8002e70 <HAL_GetTick>
 80042fe:	0002      	movs	r2, r0
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e0a2      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800430c:	4b53      	ldr	r3, [pc, #332]	; (800445c <HAL_RCC_OscConfig+0x620>)
 800430e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004310:	2202      	movs	r2, #2
 8004312:	4013      	ands	r3, r2
 8004314:	d1f1      	bne.n	80042fa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d100      	bne.n	8004320 <HAL_RCC_OscConfig+0x4e4>
 800431e:	e097      	b.n	8004450 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004320:	4b4e      	ldr	r3, [pc, #312]	; (800445c <HAL_RCC_OscConfig+0x620>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	220c      	movs	r2, #12
 8004326:	4013      	ands	r3, r2
 8004328:	2b08      	cmp	r3, #8
 800432a:	d100      	bne.n	800432e <HAL_RCC_OscConfig+0x4f2>
 800432c:	e06b      	b.n	8004406 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d14c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004336:	4b49      	ldr	r3, [pc, #292]	; (800445c <HAL_RCC_OscConfig+0x620>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b48      	ldr	r3, [pc, #288]	; (800445c <HAL_RCC_OscConfig+0x620>)
 800433c:	494a      	ldr	r1, [pc, #296]	; (8004468 <HAL_RCC_OscConfig+0x62c>)
 800433e:	400a      	ands	r2, r1
 8004340:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004342:	f7fe fd95 	bl	8002e70 <HAL_GetTick>
 8004346:	0003      	movs	r3, r0
 8004348:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434c:	f7fe fd90 	bl	8002e70 <HAL_GetTick>
 8004350:	0002      	movs	r2, r0
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e079      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800435e:	4b3f      	ldr	r3, [pc, #252]	; (800445c <HAL_RCC_OscConfig+0x620>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	2380      	movs	r3, #128	; 0x80
 8004364:	049b      	lsls	r3, r3, #18
 8004366:	4013      	ands	r3, r2
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800436a:	4b3c      	ldr	r3, [pc, #240]	; (800445c <HAL_RCC_OscConfig+0x620>)
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	220f      	movs	r2, #15
 8004370:	4393      	bics	r3, r2
 8004372:	0019      	movs	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004378:	4b38      	ldr	r3, [pc, #224]	; (800445c <HAL_RCC_OscConfig+0x620>)
 800437a:	430a      	orrs	r2, r1
 800437c:	62da      	str	r2, [r3, #44]	; 0x2c
 800437e:	4b37      	ldr	r3, [pc, #220]	; (800445c <HAL_RCC_OscConfig+0x620>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4a3a      	ldr	r2, [pc, #232]	; (800446c <HAL_RCC_OscConfig+0x630>)
 8004384:	4013      	ands	r3, r2
 8004386:	0019      	movs	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	431a      	orrs	r2, r3
 8004392:	4b32      	ldr	r3, [pc, #200]	; (800445c <HAL_RCC_OscConfig+0x620>)
 8004394:	430a      	orrs	r2, r1
 8004396:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004398:	4b30      	ldr	r3, [pc, #192]	; (800445c <HAL_RCC_OscConfig+0x620>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	4b2f      	ldr	r3, [pc, #188]	; (800445c <HAL_RCC_OscConfig+0x620>)
 800439e:	2180      	movs	r1, #128	; 0x80
 80043a0:	0449      	lsls	r1, r1, #17
 80043a2:	430a      	orrs	r2, r1
 80043a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a6:	f7fe fd63 	bl	8002e70 <HAL_GetTick>
 80043aa:	0003      	movs	r3, r0
 80043ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b0:	f7fe fd5e 	bl	8002e70 <HAL_GetTick>
 80043b4:	0002      	movs	r2, r0
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e047      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043c2:	4b26      	ldr	r3, [pc, #152]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	049b      	lsls	r3, r3, #18
 80043ca:	4013      	ands	r3, r2
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0x574>
 80043ce:	e03f      	b.n	8004450 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d0:	4b22      	ldr	r3, [pc, #136]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4b21      	ldr	r3, [pc, #132]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80043d6:	4924      	ldr	r1, [pc, #144]	; (8004468 <HAL_RCC_OscConfig+0x62c>)
 80043d8:	400a      	ands	r2, r1
 80043da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fe fd48 	bl	8002e70 <HAL_GetTick>
 80043e0:	0003      	movs	r3, r0
 80043e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e6:	f7fe fd43 	bl	8002e70 <HAL_GetTick>
 80043ea:	0002      	movs	r2, r0
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e02c      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043f8:	4b18      	ldr	r3, [pc, #96]	; (800445c <HAL_RCC_OscConfig+0x620>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	049b      	lsls	r3, r3, #18
 8004400:	4013      	ands	r3, r2
 8004402:	d1f0      	bne.n	80043e6 <HAL_RCC_OscConfig+0x5aa>
 8004404:	e024      	b.n	8004450 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e01f      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004412:	4b12      	ldr	r3, [pc, #72]	; (800445c <HAL_RCC_OscConfig+0x620>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004418:	4b10      	ldr	r3, [pc, #64]	; (800445c <HAL_RCC_OscConfig+0x620>)
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	025b      	lsls	r3, r3, #9
 8004424:	401a      	ands	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	429a      	cmp	r2, r3
 800442c:	d10e      	bne.n	800444c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	220f      	movs	r2, #15
 8004432:	401a      	ands	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004438:	429a      	cmp	r2, r3
 800443a:	d107      	bne.n	800444c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	23f0      	movs	r3, #240	; 0xf0
 8004440:	039b      	lsls	r3, r3, #14
 8004442:	401a      	ands	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d001      	beq.n	8004450 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	0018      	movs	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	b008      	add	sp, #32
 8004458:	bd80      	pop	{r7, pc}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	40021000 	.word	0x40021000
 8004460:	00001388 	.word	0x00001388
 8004464:	efffffff 	.word	0xefffffff
 8004468:	feffffff 	.word	0xfeffffff
 800446c:	ffc2ffff 	.word	0xffc2ffff

08004470 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0b3      	b.n	80045ec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004484:	4b5b      	ldr	r3, [pc, #364]	; (80045f4 <HAL_RCC_ClockConfig+0x184>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2201      	movs	r2, #1
 800448a:	4013      	ands	r3, r2
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d911      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004492:	4b58      	ldr	r3, [pc, #352]	; (80045f4 <HAL_RCC_ClockConfig+0x184>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2201      	movs	r2, #1
 8004498:	4393      	bics	r3, r2
 800449a:	0019      	movs	r1, r3
 800449c:	4b55      	ldr	r3, [pc, #340]	; (80045f4 <HAL_RCC_ClockConfig+0x184>)
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a4:	4b53      	ldr	r3, [pc, #332]	; (80045f4 <HAL_RCC_ClockConfig+0x184>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2201      	movs	r2, #1
 80044aa:	4013      	ands	r3, r2
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d001      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e09a      	b.n	80045ec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2202      	movs	r2, #2
 80044bc:	4013      	ands	r3, r2
 80044be:	d015      	beq.n	80044ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2204      	movs	r2, #4
 80044c6:	4013      	ands	r3, r2
 80044c8:	d006      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80044ca:	4b4b      	ldr	r3, [pc, #300]	; (80045f8 <HAL_RCC_ClockConfig+0x188>)
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	4b4a      	ldr	r3, [pc, #296]	; (80045f8 <HAL_RCC_ClockConfig+0x188>)
 80044d0:	21e0      	movs	r1, #224	; 0xe0
 80044d2:	00c9      	lsls	r1, r1, #3
 80044d4:	430a      	orrs	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d8:	4b47      	ldr	r3, [pc, #284]	; (80045f8 <HAL_RCC_ClockConfig+0x188>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	22f0      	movs	r2, #240	; 0xf0
 80044de:	4393      	bics	r3, r2
 80044e0:	0019      	movs	r1, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	4b44      	ldr	r3, [pc, #272]	; (80045f8 <HAL_RCC_ClockConfig+0x188>)
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2201      	movs	r2, #1
 80044f2:	4013      	ands	r3, r2
 80044f4:	d040      	beq.n	8004578 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d107      	bne.n	800450e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b3e      	ldr	r3, [pc, #248]	; (80045f8 <HAL_RCC_ClockConfig+0x188>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	029b      	lsls	r3, r3, #10
 8004506:	4013      	ands	r3, r2
 8004508:	d114      	bne.n	8004534 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e06e      	b.n	80045ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d107      	bne.n	8004526 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004516:	4b38      	ldr	r3, [pc, #224]	; (80045f8 <HAL_RCC_ClockConfig+0x188>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	2380      	movs	r3, #128	; 0x80
 800451c:	049b      	lsls	r3, r3, #18
 800451e:	4013      	ands	r3, r2
 8004520:	d108      	bne.n	8004534 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e062      	b.n	80045ec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004526:	4b34      	ldr	r3, [pc, #208]	; (80045f8 <HAL_RCC_ClockConfig+0x188>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2202      	movs	r2, #2
 800452c:	4013      	ands	r3, r2
 800452e:	d101      	bne.n	8004534 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e05b      	b.n	80045ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004534:	4b30      	ldr	r3, [pc, #192]	; (80045f8 <HAL_RCC_ClockConfig+0x188>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2203      	movs	r2, #3
 800453a:	4393      	bics	r3, r2
 800453c:	0019      	movs	r1, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	4b2d      	ldr	r3, [pc, #180]	; (80045f8 <HAL_RCC_ClockConfig+0x188>)
 8004544:	430a      	orrs	r2, r1
 8004546:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004548:	f7fe fc92 	bl	8002e70 <HAL_GetTick>
 800454c:	0003      	movs	r3, r0
 800454e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004550:	e009      	b.n	8004566 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004552:	f7fe fc8d 	bl	8002e70 <HAL_GetTick>
 8004556:	0002      	movs	r2, r0
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	4a27      	ldr	r2, [pc, #156]	; (80045fc <HAL_RCC_ClockConfig+0x18c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e042      	b.n	80045ec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004566:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <HAL_RCC_ClockConfig+0x188>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	220c      	movs	r2, #12
 800456c:	401a      	ands	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	429a      	cmp	r2, r3
 8004576:	d1ec      	bne.n	8004552 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004578:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <HAL_RCC_ClockConfig+0x184>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2201      	movs	r2, #1
 800457e:	4013      	ands	r3, r2
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d211      	bcs.n	80045aa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004586:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <HAL_RCC_ClockConfig+0x184>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2201      	movs	r2, #1
 800458c:	4393      	bics	r3, r2
 800458e:	0019      	movs	r1, r3
 8004590:	4b18      	ldr	r3, [pc, #96]	; (80045f4 <HAL_RCC_ClockConfig+0x184>)
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004598:	4b16      	ldr	r3, [pc, #88]	; (80045f4 <HAL_RCC_ClockConfig+0x184>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2201      	movs	r2, #1
 800459e:	4013      	ands	r3, r2
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d001      	beq.n	80045aa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e020      	b.n	80045ec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2204      	movs	r2, #4
 80045b0:	4013      	ands	r3, r2
 80045b2:	d009      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80045b4:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <HAL_RCC_ClockConfig+0x188>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	4a11      	ldr	r2, [pc, #68]	; (8004600 <HAL_RCC_ClockConfig+0x190>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	0019      	movs	r1, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <HAL_RCC_ClockConfig+0x188>)
 80045c4:	430a      	orrs	r2, r1
 80045c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80045c8:	f000 f820 	bl	800460c <HAL_RCC_GetSysClockFreq>
 80045cc:	0001      	movs	r1, r0
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <HAL_RCC_ClockConfig+0x188>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	091b      	lsrs	r3, r3, #4
 80045d4:	220f      	movs	r2, #15
 80045d6:	4013      	ands	r3, r2
 80045d8:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <HAL_RCC_ClockConfig+0x194>)
 80045da:	5cd3      	ldrb	r3, [r2, r3]
 80045dc:	000a      	movs	r2, r1
 80045de:	40da      	lsrs	r2, r3
 80045e0:	4b09      	ldr	r3, [pc, #36]	; (8004608 <HAL_RCC_ClockConfig+0x198>)
 80045e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80045e4:	2003      	movs	r0, #3
 80045e6:	f7fe fbfd 	bl	8002de4 <HAL_InitTick>
  
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	0018      	movs	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b004      	add	sp, #16
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40022000 	.word	0x40022000
 80045f8:	40021000 	.word	0x40021000
 80045fc:	00001388 	.word	0x00001388
 8004600:	fffff8ff 	.word	0xfffff8ff
 8004604:	08004f10 	.word	0x08004f10
 8004608:	20000004 	.word	0x20000004

0800460c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	2300      	movs	r3, #0
 8004618:	60bb      	str	r3, [r7, #8]
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004626:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	220c      	movs	r2, #12
 8004630:	4013      	ands	r3, r2
 8004632:	2b04      	cmp	r3, #4
 8004634:	d002      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0x30>
 8004636:	2b08      	cmp	r3, #8
 8004638:	d003      	beq.n	8004642 <HAL_RCC_GetSysClockFreq+0x36>
 800463a:	e02c      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800463c:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800463e:	613b      	str	r3, [r7, #16]
      break;
 8004640:	e02c      	b.n	800469c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	0c9b      	lsrs	r3, r3, #18
 8004646:	220f      	movs	r2, #15
 8004648:	4013      	ands	r3, r2
 800464a:	4a19      	ldr	r2, [pc, #100]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800464c:	5cd3      	ldrb	r3, [r2, r3]
 800464e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004650:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	220f      	movs	r2, #15
 8004656:	4013      	ands	r3, r2
 8004658:	4a16      	ldr	r2, [pc, #88]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800465a:	5cd3      	ldrb	r3, [r2, r3]
 800465c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	2380      	movs	r3, #128	; 0x80
 8004662:	025b      	lsls	r3, r3, #9
 8004664:	4013      	ands	r3, r2
 8004666:	d009      	beq.n	800467c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	4810      	ldr	r0, [pc, #64]	; (80046ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800466c:	f7fb fd4c 	bl	8000108 <__udivsi3>
 8004670:	0003      	movs	r3, r0
 8004672:	001a      	movs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4353      	muls	r3, r2
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	e009      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	000a      	movs	r2, r1
 8004680:	0152      	lsls	r2, r2, #5
 8004682:	1a52      	subs	r2, r2, r1
 8004684:	0193      	lsls	r3, r2, #6
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	185b      	adds	r3, r3, r1
 800468c:	021b      	lsls	r3, r3, #8
 800468e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	613b      	str	r3, [r7, #16]
      break;
 8004694:	e002      	b.n	800469c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8004698:	613b      	str	r3, [r7, #16]
      break;
 800469a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800469c:	693b      	ldr	r3, [r7, #16]
}
 800469e:	0018      	movs	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b006      	add	sp, #24
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	40021000 	.word	0x40021000
 80046ac:	007a1200 	.word	0x007a1200
 80046b0:	08004f20 	.word	0x08004f20
 80046b4:	08004f30 	.word	0x08004f30

080046b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e042      	b.n	8004750 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	223d      	movs	r2, #61	; 0x3d
 80046ce:	5c9b      	ldrb	r3, [r3, r2]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d107      	bne.n	80046e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	223c      	movs	r2, #60	; 0x3c
 80046da:	2100      	movs	r1, #0
 80046dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	0018      	movs	r0, r3
 80046e2:	f7fe f95d 	bl	80029a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	223d      	movs	r2, #61	; 0x3d
 80046ea:	2102      	movs	r1, #2
 80046ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3304      	adds	r3, #4
 80046f6:	0019      	movs	r1, r3
 80046f8:	0010      	movs	r0, r2
 80046fa:	f000 fa55 	bl	8004ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2246      	movs	r2, #70	; 0x46
 8004702:	2101      	movs	r1, #1
 8004704:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	223e      	movs	r2, #62	; 0x3e
 800470a:	2101      	movs	r1, #1
 800470c:	5499      	strb	r1, [r3, r2]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	223f      	movs	r2, #63	; 0x3f
 8004712:	2101      	movs	r1, #1
 8004714:	5499      	strb	r1, [r3, r2]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2240      	movs	r2, #64	; 0x40
 800471a:	2101      	movs	r1, #1
 800471c:	5499      	strb	r1, [r3, r2]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2241      	movs	r2, #65	; 0x41
 8004722:	2101      	movs	r1, #1
 8004724:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2242      	movs	r2, #66	; 0x42
 800472a:	2101      	movs	r1, #1
 800472c:	5499      	strb	r1, [r3, r2]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2243      	movs	r2, #67	; 0x43
 8004732:	2101      	movs	r1, #1
 8004734:	5499      	strb	r1, [r3, r2]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2244      	movs	r2, #68	; 0x44
 800473a:	2101      	movs	r1, #1
 800473c:	5499      	strb	r1, [r3, r2]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2245      	movs	r2, #69	; 0x45
 8004742:	2101      	movs	r1, #1
 8004744:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	223d      	movs	r2, #61	; 0x3d
 800474a:	2101      	movs	r1, #1
 800474c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	0018      	movs	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	b002      	add	sp, #8
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	223d      	movs	r2, #61	; 0x3d
 8004764:	5c9b      	ldrb	r3, [r3, r2]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b01      	cmp	r3, #1
 800476a:	d001      	beq.n	8004770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e030      	b.n	80047d2 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	223d      	movs	r2, #61	; 0x3d
 8004774:	2102      	movs	r1, #2
 8004776:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2101      	movs	r1, #1
 8004784:	430a      	orrs	r2, r1
 8004786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a13      	ldr	r2, [pc, #76]	; (80047dc <HAL_TIM_Base_Start_IT+0x84>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d004      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x44>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a12      	ldr	r2, [pc, #72]	; (80047e0 <HAL_TIM_Base_Start_IT+0x88>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d111      	bne.n	80047c0 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2207      	movs	r2, #7
 80047a4:	4013      	ands	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b06      	cmp	r3, #6
 80047ac:	d010      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2101      	movs	r1, #1
 80047ba:	430a      	orrs	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047be:	e007      	b.n	80047d0 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2101      	movs	r1, #1
 80047cc:	430a      	orrs	r2, r1
 80047ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	0018      	movs	r0, r3
 80047d4:	46bd      	mov	sp, r7
 80047d6:	b004      	add	sp, #16
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40000400 	.word	0x40000400

080047e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2202      	movs	r2, #2
 8004800:	4013      	ands	r3, r2
 8004802:	d021      	beq.n	8004848 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2202      	movs	r2, #2
 8004808:	4013      	ands	r3, r2
 800480a:	d01d      	beq.n	8004848 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2203      	movs	r2, #3
 8004812:	4252      	negs	r2, r2
 8004814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2203      	movs	r2, #3
 8004824:	4013      	ands	r3, r2
 8004826:	d004      	beq.n	8004832 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	0018      	movs	r0, r3
 800482c:	f000 f9a4 	bl	8004b78 <HAL_TIM_IC_CaptureCallback>
 8004830:	e007      	b.n	8004842 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	0018      	movs	r0, r3
 8004836:	f000 f997 	bl	8004b68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	0018      	movs	r0, r3
 800483e:	f000 f9a3 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2204      	movs	r2, #4
 800484c:	4013      	ands	r3, r2
 800484e:	d022      	beq.n	8004896 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2204      	movs	r2, #4
 8004854:	4013      	ands	r3, r2
 8004856:	d01e      	beq.n	8004896 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2205      	movs	r2, #5
 800485e:	4252      	negs	r2, r2
 8004860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	23c0      	movs	r3, #192	; 0xc0
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4013      	ands	r3, r2
 8004874:	d004      	beq.n	8004880 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	0018      	movs	r0, r3
 800487a:	f000 f97d 	bl	8004b78 <HAL_TIM_IC_CaptureCallback>
 800487e:	e007      	b.n	8004890 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	0018      	movs	r0, r3
 8004884:	f000 f970 	bl	8004b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	0018      	movs	r0, r3
 800488c:	f000 f97c 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2208      	movs	r2, #8
 800489a:	4013      	ands	r3, r2
 800489c:	d021      	beq.n	80048e2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2208      	movs	r2, #8
 80048a2:	4013      	ands	r3, r2
 80048a4:	d01d      	beq.n	80048e2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2209      	movs	r2, #9
 80048ac:	4252      	negs	r2, r2
 80048ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2204      	movs	r2, #4
 80048b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	2203      	movs	r2, #3
 80048be:	4013      	ands	r3, r2
 80048c0:	d004      	beq.n	80048cc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	0018      	movs	r0, r3
 80048c6:	f000 f957 	bl	8004b78 <HAL_TIM_IC_CaptureCallback>
 80048ca:	e007      	b.n	80048dc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	0018      	movs	r0, r3
 80048d0:	f000 f94a 	bl	8004b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	0018      	movs	r0, r3
 80048d8:	f000 f956 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2210      	movs	r2, #16
 80048e6:	4013      	ands	r3, r2
 80048e8:	d022      	beq.n	8004930 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2210      	movs	r2, #16
 80048ee:	4013      	ands	r3, r2
 80048f0:	d01e      	beq.n	8004930 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2211      	movs	r2, #17
 80048f8:	4252      	negs	r2, r2
 80048fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2208      	movs	r2, #8
 8004900:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	23c0      	movs	r3, #192	; 0xc0
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4013      	ands	r3, r2
 800490e:	d004      	beq.n	800491a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	0018      	movs	r0, r3
 8004914:	f000 f930 	bl	8004b78 <HAL_TIM_IC_CaptureCallback>
 8004918:	e007      	b.n	800492a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	0018      	movs	r0, r3
 800491e:	f000 f923 	bl	8004b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	0018      	movs	r0, r3
 8004926:	f000 f92f 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2201      	movs	r2, #1
 8004934:	4013      	ands	r3, r2
 8004936:	d00c      	beq.n	8004952 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	4013      	ands	r3, r2
 800493e:	d008      	beq.n	8004952 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2202      	movs	r2, #2
 8004946:	4252      	negs	r2, r2
 8004948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	0018      	movs	r0, r3
 800494e:	f7fe f84d 	bl	80029ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2280      	movs	r2, #128	; 0x80
 8004956:	4013      	ands	r3, r2
 8004958:	d00c      	beq.n	8004974 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2280      	movs	r2, #128	; 0x80
 800495e:	4013      	ands	r3, r2
 8004960:	d008      	beq.n	8004974 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2281      	movs	r2, #129	; 0x81
 8004968:	4252      	negs	r2, r2
 800496a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	0018      	movs	r0, r3
 8004970:	f000 fa88 	bl	8004e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2240      	movs	r2, #64	; 0x40
 8004978:	4013      	ands	r3, r2
 800497a:	d00c      	beq.n	8004996 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2240      	movs	r2, #64	; 0x40
 8004980:	4013      	ands	r3, r2
 8004982:	d008      	beq.n	8004996 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2241      	movs	r2, #65	; 0x41
 800498a:	4252      	negs	r2, r2
 800498c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	0018      	movs	r0, r3
 8004992:	f000 f901 	bl	8004b98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2220      	movs	r2, #32
 800499a:	4013      	ands	r3, r2
 800499c:	d00c      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2220      	movs	r2, #32
 80049a2:	4013      	ands	r3, r2
 80049a4:	d008      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2221      	movs	r2, #33	; 0x21
 80049ac:	4252      	negs	r2, r2
 80049ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	0018      	movs	r0, r3
 80049b4:	f000 fa5e 	bl	8004e74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049b8:	46c0      	nop			; (mov r8, r8)
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b004      	add	sp, #16
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ca:	230f      	movs	r3, #15
 80049cc:	18fb      	adds	r3, r7, r3
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	223c      	movs	r2, #60	; 0x3c
 80049d6:	5c9b      	ldrb	r3, [r3, r2]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_TIM_ConfigClockSource+0x20>
 80049dc:	2302      	movs	r3, #2
 80049de:	e0bc      	b.n	8004b5a <HAL_TIM_ConfigClockSource+0x19a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	223c      	movs	r2, #60	; 0x3c
 80049e4:	2101      	movs	r1, #1
 80049e6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	223d      	movs	r2, #61	; 0x3d
 80049ec:	2102      	movs	r1, #2
 80049ee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2277      	movs	r2, #119	; 0x77
 80049fc:	4393      	bics	r3, r2
 80049fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4a58      	ldr	r2, [pc, #352]	; (8004b64 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2280      	movs	r2, #128	; 0x80
 8004a16:	0192      	lsls	r2, r2, #6
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d040      	beq.n	8004a9e <HAL_TIM_ConfigClockSource+0xde>
 8004a1c:	2280      	movs	r2, #128	; 0x80
 8004a1e:	0192      	lsls	r2, r2, #6
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d900      	bls.n	8004a26 <HAL_TIM_ConfigClockSource+0x66>
 8004a24:	e088      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x178>
 8004a26:	2280      	movs	r2, #128	; 0x80
 8004a28:	0152      	lsls	r2, r2, #5
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d100      	bne.n	8004a30 <HAL_TIM_ConfigClockSource+0x70>
 8004a2e:	e088      	b.n	8004b42 <HAL_TIM_ConfigClockSource+0x182>
 8004a30:	2280      	movs	r2, #128	; 0x80
 8004a32:	0152      	lsls	r2, r2, #5
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d900      	bls.n	8004a3a <HAL_TIM_ConfigClockSource+0x7a>
 8004a38:	e07e      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x178>
 8004a3a:	2b70      	cmp	r3, #112	; 0x70
 8004a3c:	d018      	beq.n	8004a70 <HAL_TIM_ConfigClockSource+0xb0>
 8004a3e:	d900      	bls.n	8004a42 <HAL_TIM_ConfigClockSource+0x82>
 8004a40:	e07a      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x178>
 8004a42:	2b60      	cmp	r3, #96	; 0x60
 8004a44:	d04f      	beq.n	8004ae6 <HAL_TIM_ConfigClockSource+0x126>
 8004a46:	d900      	bls.n	8004a4a <HAL_TIM_ConfigClockSource+0x8a>
 8004a48:	e076      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x178>
 8004a4a:	2b50      	cmp	r3, #80	; 0x50
 8004a4c:	d03b      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0x106>
 8004a4e:	d900      	bls.n	8004a52 <HAL_TIM_ConfigClockSource+0x92>
 8004a50:	e072      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x178>
 8004a52:	2b40      	cmp	r3, #64	; 0x40
 8004a54:	d057      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0x146>
 8004a56:	d900      	bls.n	8004a5a <HAL_TIM_ConfigClockSource+0x9a>
 8004a58:	e06e      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x178>
 8004a5a:	2b30      	cmp	r3, #48	; 0x30
 8004a5c:	d063      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x166>
 8004a5e:	d86b      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x178>
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d060      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x166>
 8004a64:	d868      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x178>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d05d      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x166>
 8004a6a:	2b10      	cmp	r3, #16
 8004a6c:	d05b      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x166>
 8004a6e:	e063      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a80:	f000 f986 	bl	8004d90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2277      	movs	r2, #119	; 0x77
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	609a      	str	r2, [r3, #8]
      break;
 8004a9c:	e052      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004aae:	f000 f96f 	bl	8004d90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2180      	movs	r1, #128	; 0x80
 8004abe:	01c9      	lsls	r1, r1, #7
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]
      break;
 8004ac4:	e03e      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad2:	001a      	movs	r2, r3
 8004ad4:	f000 f8e2 	bl	8004c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2150      	movs	r1, #80	; 0x50
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f000 f93c 	bl	8004d5c <TIM_ITRx_SetConfig>
      break;
 8004ae4:	e02e      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004af2:	001a      	movs	r2, r3
 8004af4:	f000 f900 	bl	8004cf8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2160      	movs	r1, #96	; 0x60
 8004afe:	0018      	movs	r0, r3
 8004b00:	f000 f92c 	bl	8004d5c <TIM_ITRx_SetConfig>
      break;
 8004b04:	e01e      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b12:	001a      	movs	r2, r3
 8004b14:	f000 f8c2 	bl	8004c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2140      	movs	r1, #64	; 0x40
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f000 f91c 	bl	8004d5c <TIM_ITRx_SetConfig>
      break;
 8004b24:	e00e      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	0019      	movs	r1, r3
 8004b30:	0010      	movs	r0, r2
 8004b32:	f000 f913 	bl	8004d5c <TIM_ITRx_SetConfig>
      break;
 8004b36:	e005      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004b38:	230f      	movs	r3, #15
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	701a      	strb	r2, [r3, #0]
      break;
 8004b40:	e000      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004b42:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	223d      	movs	r2, #61	; 0x3d
 8004b48:	2101      	movs	r1, #1
 8004b4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	223c      	movs	r2, #60	; 0x3c
 8004b50:	2100      	movs	r1, #0
 8004b52:	5499      	strb	r1, [r3, r2]

  return status;
 8004b54:	230f      	movs	r3, #15
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	781b      	ldrb	r3, [r3, #0]
}
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b004      	add	sp, #16
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	ffff00ff 	.word	0xffff00ff

08004b68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b70:	46c0      	nop			; (mov r8, r8)
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b002      	add	sp, #8
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b80:	46c0      	nop			; (mov r8, r8)
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b002      	add	sp, #8
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b90:	46c0      	nop			; (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b002      	add	sp, #8
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ba0:	46c0      	nop			; (mov r8, r8)
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b002      	add	sp, #8
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a32      	ldr	r2, [pc, #200]	; (8004c84 <TIM_Base_SetConfig+0xdc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_Base_SetConfig+0x20>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a31      	ldr	r2, [pc, #196]	; (8004c88 <TIM_Base_SetConfig+0xe0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d108      	bne.n	8004bda <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2270      	movs	r2, #112	; 0x70
 8004bcc:	4393      	bics	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a29      	ldr	r2, [pc, #164]	; (8004c84 <TIM_Base_SetConfig+0xdc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00f      	beq.n	8004c02 <TIM_Base_SetConfig+0x5a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a28      	ldr	r2, [pc, #160]	; (8004c88 <TIM_Base_SetConfig+0xe0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00b      	beq.n	8004c02 <TIM_Base_SetConfig+0x5a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a27      	ldr	r2, [pc, #156]	; (8004c8c <TIM_Base_SetConfig+0xe4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <TIM_Base_SetConfig+0x5a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a26      	ldr	r2, [pc, #152]	; (8004c90 <TIM_Base_SetConfig+0xe8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <TIM_Base_SetConfig+0x5a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a25      	ldr	r2, [pc, #148]	; (8004c94 <TIM_Base_SetConfig+0xec>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d108      	bne.n	8004c14 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4a24      	ldr	r2, [pc, #144]	; (8004c98 <TIM_Base_SetConfig+0xf0>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2280      	movs	r2, #128	; 0x80
 8004c18:	4393      	bics	r3, r2
 8004c1a:	001a      	movs	r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a11      	ldr	r2, [pc, #68]	; (8004c84 <TIM_Base_SetConfig+0xdc>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d007      	beq.n	8004c52 <TIM_Base_SetConfig+0xaa>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a12      	ldr	r2, [pc, #72]	; (8004c90 <TIM_Base_SetConfig+0xe8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d003      	beq.n	8004c52 <TIM_Base_SetConfig+0xaa>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a11      	ldr	r2, [pc, #68]	; (8004c94 <TIM_Base_SetConfig+0xec>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d103      	bne.n	8004c5a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2201      	movs	r2, #1
 8004c66:	4013      	ands	r3, r2
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d106      	bne.n	8004c7a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2201      	movs	r2, #1
 8004c72:	4393      	bics	r3, r2
 8004c74:	001a      	movs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	611a      	str	r2, [r3, #16]
  }
}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b004      	add	sp, #16
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	40012c00 	.word	0x40012c00
 8004c88:	40000400 	.word	0x40000400
 8004c8c:	40002000 	.word	0x40002000
 8004c90:	40014400 	.word	0x40014400
 8004c94:	40014800 	.word	0x40014800
 8004c98:	fffffcff 	.word	0xfffffcff

08004c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	4393      	bics	r3, r2
 8004cb6:	001a      	movs	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	22f0      	movs	r2, #240	; 0xf0
 8004cc6:	4393      	bics	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	220a      	movs	r2, #10
 8004cd8:	4393      	bics	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	621a      	str	r2, [r3, #32]
}
 8004cf0:	46c0      	nop			; (mov r8, r8)
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b006      	add	sp, #24
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	2210      	movs	r2, #16
 8004d10:	4393      	bics	r3, r2
 8004d12:	001a      	movs	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	4a0d      	ldr	r2, [pc, #52]	; (8004d58 <TIM_TI2_ConfigInputStage+0x60>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	031b      	lsls	r3, r3, #12
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	22a0      	movs	r2, #160	; 0xa0
 8004d34:	4393      	bics	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	621a      	str	r2, [r3, #32]
}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	46bd      	mov	sp, r7
 8004d52:	b006      	add	sp, #24
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	ffff0fff 	.word	0xffff0fff

08004d5c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2270      	movs	r2, #112	; 0x70
 8004d70:	4393      	bics	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	2207      	movs	r2, #7
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	609a      	str	r2, [r3, #8]
}
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b004      	add	sp, #16
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
 8004d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	4a09      	ldr	r2, [pc, #36]	; (8004dcc <TIM_ETR_SetConfig+0x3c>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	021a      	lsls	r2, r3, #8
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	609a      	str	r2, [r3, #8]
}
 8004dc4:	46c0      	nop			; (mov r8, r8)
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b006      	add	sp, #24
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	ffff00ff 	.word	0xffff00ff

08004dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	223c      	movs	r2, #60	; 0x3c
 8004dde:	5c9b      	ldrb	r3, [r3, r2]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e03c      	b.n	8004e62 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	223c      	movs	r2, #60	; 0x3c
 8004dec:	2101      	movs	r1, #1
 8004dee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	223d      	movs	r2, #61	; 0x3d
 8004df4:	2102      	movs	r1, #2
 8004df6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2270      	movs	r2, #112	; 0x70
 8004e0c:	4393      	bics	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a11      	ldr	r2, [pc, #68]	; (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a0f      	ldr	r2, [pc, #60]	; (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d10c      	bne.n	8004e50 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2280      	movs	r2, #128	; 0x80
 8004e3a:	4393      	bics	r3, r2
 8004e3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	223d      	movs	r2, #61	; 0x3d
 8004e54:	2101      	movs	r1, #1
 8004e56:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	223c      	movs	r2, #60	; 0x3c
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	0018      	movs	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b004      	add	sp, #16
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	40012c00 	.word	0x40012c00
 8004e70:	40000400 	.word	0x40000400

08004e74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b002      	add	sp, #8
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e8c:	46c0      	nop			; (mov r8, r8)
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	b002      	add	sp, #8
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <memset>:
 8004e94:	0003      	movs	r3, r0
 8004e96:	1882      	adds	r2, r0, r2
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d100      	bne.n	8004e9e <memset+0xa>
 8004e9c:	4770      	bx	lr
 8004e9e:	7019      	strb	r1, [r3, #0]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	e7f9      	b.n	8004e98 <memset+0x4>

08004ea4 <__libc_init_array>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	2600      	movs	r6, #0
 8004ea8:	4c0c      	ldr	r4, [pc, #48]	; (8004edc <__libc_init_array+0x38>)
 8004eaa:	4d0d      	ldr	r5, [pc, #52]	; (8004ee0 <__libc_init_array+0x3c>)
 8004eac:	1b64      	subs	r4, r4, r5
 8004eae:	10a4      	asrs	r4, r4, #2
 8004eb0:	42a6      	cmp	r6, r4
 8004eb2:	d109      	bne.n	8004ec8 <__libc_init_array+0x24>
 8004eb4:	2600      	movs	r6, #0
 8004eb6:	f000 f819 	bl	8004eec <_init>
 8004eba:	4c0a      	ldr	r4, [pc, #40]	; (8004ee4 <__libc_init_array+0x40>)
 8004ebc:	4d0a      	ldr	r5, [pc, #40]	; (8004ee8 <__libc_init_array+0x44>)
 8004ebe:	1b64      	subs	r4, r4, r5
 8004ec0:	10a4      	asrs	r4, r4, #2
 8004ec2:	42a6      	cmp	r6, r4
 8004ec4:	d105      	bne.n	8004ed2 <__libc_init_array+0x2e>
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}
 8004ec8:	00b3      	lsls	r3, r6, #2
 8004eca:	58eb      	ldr	r3, [r5, r3]
 8004ecc:	4798      	blx	r3
 8004ece:	3601      	adds	r6, #1
 8004ed0:	e7ee      	b.n	8004eb0 <__libc_init_array+0xc>
 8004ed2:	00b3      	lsls	r3, r6, #2
 8004ed4:	58eb      	ldr	r3, [r5, r3]
 8004ed6:	4798      	blx	r3
 8004ed8:	3601      	adds	r6, #1
 8004eda:	e7f2      	b.n	8004ec2 <__libc_init_array+0x1e>
 8004edc:	08004f40 	.word	0x08004f40
 8004ee0:	08004f40 	.word	0x08004f40
 8004ee4:	08004f44 	.word	0x08004f44
 8004ee8:	08004f40 	.word	0x08004f40

08004eec <_init>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef2:	bc08      	pop	{r3}
 8004ef4:	469e      	mov	lr, r3
 8004ef6:	4770      	bx	lr

08004ef8 <_fini>:
 8004ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004efe:	bc08      	pop	{r3}
 8004f00:	469e      	mov	lr, r3
 8004f02:	4770      	bx	lr
