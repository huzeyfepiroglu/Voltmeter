
Voltmeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000338c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003488  08003488  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003488  08003488  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003488  08003488  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003488  08003488  00013488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800348c  0800348c  0001348c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  0800349c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  0800349c  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a17a  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002117  00000000  00000000  0002a1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  0002c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000875  00000000  00000000  0002ce10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010242  00000000  00000000  0002d685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eca6  00000000  00000000  0003d8c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005f3a7  00000000  00000000  0004c56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002714  00000000  00000000  000ab914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000ae028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003434 	.word	0x08003434

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003434 	.word	0x08003434

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f8b7 	bl	800039c <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f843 	bl	80002c4 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f8a9 	bl	800039c <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f89f 	bl	800039c <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f84f 	bl	8000310 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f845 	bl	8000310 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	; 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fbab 	bl	8000a00 <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	; 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 fa05 	bl	80006c0 <__aeabi_fsub>
 80002b6:	f000 fba3 	bl	8000a00 <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__eqsf2>:
 80002c4:	b570      	push	{r4, r5, r6, lr}
 80002c6:	0042      	lsls	r2, r0, #1
 80002c8:	0245      	lsls	r5, r0, #9
 80002ca:	024e      	lsls	r6, r1, #9
 80002cc:	004c      	lsls	r4, r1, #1
 80002ce:	0fc3      	lsrs	r3, r0, #31
 80002d0:	0a6d      	lsrs	r5, r5, #9
 80002d2:	2001      	movs	r0, #1
 80002d4:	0e12      	lsrs	r2, r2, #24
 80002d6:	0a76      	lsrs	r6, r6, #9
 80002d8:	0e24      	lsrs	r4, r4, #24
 80002da:	0fc9      	lsrs	r1, r1, #31
 80002dc:	2aff      	cmp	r2, #255	; 0xff
 80002de:	d006      	beq.n	80002ee <__eqsf2+0x2a>
 80002e0:	2cff      	cmp	r4, #255	; 0xff
 80002e2:	d003      	beq.n	80002ec <__eqsf2+0x28>
 80002e4:	42a2      	cmp	r2, r4
 80002e6:	d101      	bne.n	80002ec <__eqsf2+0x28>
 80002e8:	42b5      	cmp	r5, r6
 80002ea:	d006      	beq.n	80002fa <__eqsf2+0x36>
 80002ec:	bd70      	pop	{r4, r5, r6, pc}
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d1fc      	bne.n	80002ec <__eqsf2+0x28>
 80002f2:	2cff      	cmp	r4, #255	; 0xff
 80002f4:	d1fa      	bne.n	80002ec <__eqsf2+0x28>
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d1f8      	bne.n	80002ec <__eqsf2+0x28>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d006      	beq.n	800030c <__eqsf2+0x48>
 80002fe:	2001      	movs	r0, #1
 8000300:	2a00      	cmp	r2, #0
 8000302:	d1f3      	bne.n	80002ec <__eqsf2+0x28>
 8000304:	0028      	movs	r0, r5
 8000306:	1e43      	subs	r3, r0, #1
 8000308:	4198      	sbcs	r0, r3
 800030a:	e7ef      	b.n	80002ec <__eqsf2+0x28>
 800030c:	2000      	movs	r0, #0
 800030e:	e7ed      	b.n	80002ec <__eqsf2+0x28>

08000310 <__gesf2>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	0042      	lsls	r2, r0, #1
 8000314:	0245      	lsls	r5, r0, #9
 8000316:	024e      	lsls	r6, r1, #9
 8000318:	004c      	lsls	r4, r1, #1
 800031a:	0fc3      	lsrs	r3, r0, #31
 800031c:	0a6d      	lsrs	r5, r5, #9
 800031e:	0e12      	lsrs	r2, r2, #24
 8000320:	0a76      	lsrs	r6, r6, #9
 8000322:	0e24      	lsrs	r4, r4, #24
 8000324:	0fc8      	lsrs	r0, r1, #31
 8000326:	2aff      	cmp	r2, #255	; 0xff
 8000328:	d01b      	beq.n	8000362 <__gesf2+0x52>
 800032a:	2cff      	cmp	r4, #255	; 0xff
 800032c:	d00e      	beq.n	800034c <__gesf2+0x3c>
 800032e:	2a00      	cmp	r2, #0
 8000330:	d11b      	bne.n	800036a <__gesf2+0x5a>
 8000332:	2c00      	cmp	r4, #0
 8000334:	d101      	bne.n	800033a <__gesf2+0x2a>
 8000336:	2e00      	cmp	r6, #0
 8000338:	d01c      	beq.n	8000374 <__gesf2+0x64>
 800033a:	2d00      	cmp	r5, #0
 800033c:	d00c      	beq.n	8000358 <__gesf2+0x48>
 800033e:	4283      	cmp	r3, r0
 8000340:	d01c      	beq.n	800037c <__gesf2+0x6c>
 8000342:	2102      	movs	r1, #2
 8000344:	1e58      	subs	r0, r3, #1
 8000346:	4008      	ands	r0, r1
 8000348:	3801      	subs	r0, #1
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	2e00      	cmp	r6, #0
 800034e:	d122      	bne.n	8000396 <__gesf2+0x86>
 8000350:	2a00      	cmp	r2, #0
 8000352:	d1f4      	bne.n	800033e <__gesf2+0x2e>
 8000354:	2d00      	cmp	r5, #0
 8000356:	d1f2      	bne.n	800033e <__gesf2+0x2e>
 8000358:	2800      	cmp	r0, #0
 800035a:	d1f6      	bne.n	800034a <__gesf2+0x3a>
 800035c:	2001      	movs	r0, #1
 800035e:	4240      	negs	r0, r0
 8000360:	e7f3      	b.n	800034a <__gesf2+0x3a>
 8000362:	2d00      	cmp	r5, #0
 8000364:	d117      	bne.n	8000396 <__gesf2+0x86>
 8000366:	2cff      	cmp	r4, #255	; 0xff
 8000368:	d0f0      	beq.n	800034c <__gesf2+0x3c>
 800036a:	2c00      	cmp	r4, #0
 800036c:	d1e7      	bne.n	800033e <__gesf2+0x2e>
 800036e:	2e00      	cmp	r6, #0
 8000370:	d1e5      	bne.n	800033e <__gesf2+0x2e>
 8000372:	e7e6      	b.n	8000342 <__gesf2+0x32>
 8000374:	2000      	movs	r0, #0
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e7      	beq.n	800034a <__gesf2+0x3a>
 800037a:	e7e2      	b.n	8000342 <__gesf2+0x32>
 800037c:	42a2      	cmp	r2, r4
 800037e:	dc05      	bgt.n	800038c <__gesf2+0x7c>
 8000380:	dbea      	blt.n	8000358 <__gesf2+0x48>
 8000382:	42b5      	cmp	r5, r6
 8000384:	d802      	bhi.n	800038c <__gesf2+0x7c>
 8000386:	d3e7      	bcc.n	8000358 <__gesf2+0x48>
 8000388:	2000      	movs	r0, #0
 800038a:	e7de      	b.n	800034a <__gesf2+0x3a>
 800038c:	4243      	negs	r3, r0
 800038e:	4158      	adcs	r0, r3
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	3801      	subs	r0, #1
 8000394:	e7d9      	b.n	800034a <__gesf2+0x3a>
 8000396:	2002      	movs	r0, #2
 8000398:	4240      	negs	r0, r0
 800039a:	e7d6      	b.n	800034a <__gesf2+0x3a>

0800039c <__lesf2>:
 800039c:	b570      	push	{r4, r5, r6, lr}
 800039e:	0042      	lsls	r2, r0, #1
 80003a0:	0245      	lsls	r5, r0, #9
 80003a2:	024e      	lsls	r6, r1, #9
 80003a4:	004c      	lsls	r4, r1, #1
 80003a6:	0fc3      	lsrs	r3, r0, #31
 80003a8:	0a6d      	lsrs	r5, r5, #9
 80003aa:	0e12      	lsrs	r2, r2, #24
 80003ac:	0a76      	lsrs	r6, r6, #9
 80003ae:	0e24      	lsrs	r4, r4, #24
 80003b0:	0fc8      	lsrs	r0, r1, #31
 80003b2:	2aff      	cmp	r2, #255	; 0xff
 80003b4:	d00b      	beq.n	80003ce <__lesf2+0x32>
 80003b6:	2cff      	cmp	r4, #255	; 0xff
 80003b8:	d00d      	beq.n	80003d6 <__lesf2+0x3a>
 80003ba:	2a00      	cmp	r2, #0
 80003bc:	d11f      	bne.n	80003fe <__lesf2+0x62>
 80003be:	2c00      	cmp	r4, #0
 80003c0:	d116      	bne.n	80003f0 <__lesf2+0x54>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d114      	bne.n	80003f0 <__lesf2+0x54>
 80003c6:	2000      	movs	r0, #0
 80003c8:	2d00      	cmp	r5, #0
 80003ca:	d010      	beq.n	80003ee <__lesf2+0x52>
 80003cc:	e009      	b.n	80003e2 <__lesf2+0x46>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d10c      	bne.n	80003ec <__lesf2+0x50>
 80003d2:	2cff      	cmp	r4, #255	; 0xff
 80003d4:	d113      	bne.n	80003fe <__lesf2+0x62>
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d108      	bne.n	80003ec <__lesf2+0x50>
 80003da:	2a00      	cmp	r2, #0
 80003dc:	d008      	beq.n	80003f0 <__lesf2+0x54>
 80003de:	4283      	cmp	r3, r0
 80003e0:	d012      	beq.n	8000408 <__lesf2+0x6c>
 80003e2:	2102      	movs	r1, #2
 80003e4:	1e58      	subs	r0, r3, #1
 80003e6:	4008      	ands	r0, r1
 80003e8:	3801      	subs	r0, #1
 80003ea:	e000      	b.n	80003ee <__lesf2+0x52>
 80003ec:	2002      	movs	r0, #2
 80003ee:	bd70      	pop	{r4, r5, r6, pc}
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d1f4      	bne.n	80003de <__lesf2+0x42>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	d1fa      	bne.n	80003ee <__lesf2+0x52>
 80003f8:	2001      	movs	r0, #1
 80003fa:	4240      	negs	r0, r0
 80003fc:	e7f7      	b.n	80003ee <__lesf2+0x52>
 80003fe:	2c00      	cmp	r4, #0
 8000400:	d1ed      	bne.n	80003de <__lesf2+0x42>
 8000402:	2e00      	cmp	r6, #0
 8000404:	d1eb      	bne.n	80003de <__lesf2+0x42>
 8000406:	e7ec      	b.n	80003e2 <__lesf2+0x46>
 8000408:	42a2      	cmp	r2, r4
 800040a:	dc05      	bgt.n	8000418 <__lesf2+0x7c>
 800040c:	dbf2      	blt.n	80003f4 <__lesf2+0x58>
 800040e:	42b5      	cmp	r5, r6
 8000410:	d802      	bhi.n	8000418 <__lesf2+0x7c>
 8000412:	d3ef      	bcc.n	80003f4 <__lesf2+0x58>
 8000414:	2000      	movs	r0, #0
 8000416:	e7ea      	b.n	80003ee <__lesf2+0x52>
 8000418:	4243      	negs	r3, r0
 800041a:	4158      	adcs	r0, r3
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	3801      	subs	r0, #1
 8000420:	e7e5      	b.n	80003ee <__lesf2+0x52>
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_fmul>:
 8000424:	0243      	lsls	r3, r0, #9
 8000426:	0a5b      	lsrs	r3, r3, #9
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	464f      	mov	r7, r9
 800042c:	4646      	mov	r6, r8
 800042e:	4699      	mov	r9, r3
 8000430:	46d6      	mov	lr, sl
 8000432:	0fc3      	lsrs	r3, r0, #31
 8000434:	0045      	lsls	r5, r0, #1
 8000436:	4698      	mov	r8, r3
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	464b      	mov	r3, r9
 800043c:	1c0f      	adds	r7, r1, #0
 800043e:	0e2d      	lsrs	r5, r5, #24
 8000440:	d100      	bne.n	8000444 <__aeabi_fmul+0x20>
 8000442:	e0cb      	b.n	80005dc <__aeabi_fmul+0x1b8>
 8000444:	2dff      	cmp	r5, #255	; 0xff
 8000446:	d100      	bne.n	800044a <__aeabi_fmul+0x26>
 8000448:	e0cf      	b.n	80005ea <__aeabi_fmul+0x1c6>
 800044a:	2280      	movs	r2, #128	; 0x80
 800044c:	00db      	lsls	r3, r3, #3
 800044e:	04d2      	lsls	r2, r2, #19
 8000450:	431a      	orrs	r2, r3
 8000452:	2300      	movs	r3, #0
 8000454:	4691      	mov	r9, r2
 8000456:	2600      	movs	r6, #0
 8000458:	469a      	mov	sl, r3
 800045a:	3d7f      	subs	r5, #127	; 0x7f
 800045c:	027c      	lsls	r4, r7, #9
 800045e:	007b      	lsls	r3, r7, #1
 8000460:	0a64      	lsrs	r4, r4, #9
 8000462:	0e1b      	lsrs	r3, r3, #24
 8000464:	0fff      	lsrs	r7, r7, #31
 8000466:	2b00      	cmp	r3, #0
 8000468:	d100      	bne.n	800046c <__aeabi_fmul+0x48>
 800046a:	e0a9      	b.n	80005c0 <__aeabi_fmul+0x19c>
 800046c:	2bff      	cmp	r3, #255	; 0xff
 800046e:	d011      	beq.n	8000494 <__aeabi_fmul+0x70>
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	00e4      	lsls	r4, r4, #3
 8000474:	04d2      	lsls	r2, r2, #19
 8000476:	4314      	orrs	r4, r2
 8000478:	4642      	mov	r2, r8
 800047a:	3b7f      	subs	r3, #127	; 0x7f
 800047c:	195b      	adds	r3, r3, r5
 800047e:	407a      	eors	r2, r7
 8000480:	2000      	movs	r0, #0
 8000482:	b2d2      	uxtb	r2, r2
 8000484:	1c5d      	adds	r5, r3, #1
 8000486:	2e0a      	cmp	r6, #10
 8000488:	dd13      	ble.n	80004b2 <__aeabi_fmul+0x8e>
 800048a:	003a      	movs	r2, r7
 800048c:	2e0b      	cmp	r6, #11
 800048e:	d047      	beq.n	8000520 <__aeabi_fmul+0xfc>
 8000490:	4647      	mov	r7, r8
 8000492:	e03f      	b.n	8000514 <__aeabi_fmul+0xf0>
 8000494:	002b      	movs	r3, r5
 8000496:	33ff      	adds	r3, #255	; 0xff
 8000498:	2c00      	cmp	r4, #0
 800049a:	d11e      	bne.n	80004da <__aeabi_fmul+0xb6>
 800049c:	2202      	movs	r2, #2
 800049e:	4316      	orrs	r6, r2
 80004a0:	4642      	mov	r2, r8
 80004a2:	3501      	adds	r5, #1
 80004a4:	407a      	eors	r2, r7
 80004a6:	b2d2      	uxtb	r2, r2
 80004a8:	35ff      	adds	r5, #255	; 0xff
 80004aa:	2e0a      	cmp	r6, #10
 80004ac:	dd00      	ble.n	80004b0 <__aeabi_fmul+0x8c>
 80004ae:	e0e4      	b.n	800067a <__aeabi_fmul+0x256>
 80004b0:	2002      	movs	r0, #2
 80004b2:	2e02      	cmp	r6, #2
 80004b4:	dc1c      	bgt.n	80004f0 <__aeabi_fmul+0xcc>
 80004b6:	3e01      	subs	r6, #1
 80004b8:	2e01      	cmp	r6, #1
 80004ba:	d842      	bhi.n	8000542 <__aeabi_fmul+0x11e>
 80004bc:	2802      	cmp	r0, #2
 80004be:	d03d      	beq.n	800053c <__aeabi_fmul+0x118>
 80004c0:	2801      	cmp	r0, #1
 80004c2:	d166      	bne.n	8000592 <__aeabi_fmul+0x16e>
 80004c4:	2000      	movs	r0, #0
 80004c6:	2100      	movs	r1, #0
 80004c8:	05c0      	lsls	r0, r0, #23
 80004ca:	4308      	orrs	r0, r1
 80004cc:	07d2      	lsls	r2, r2, #31
 80004ce:	4310      	orrs	r0, r2
 80004d0:	bce0      	pop	{r5, r6, r7}
 80004d2:	46ba      	mov	sl, r7
 80004d4:	46b1      	mov	r9, r6
 80004d6:	46a8      	mov	r8, r5
 80004d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004da:	2203      	movs	r2, #3
 80004dc:	4316      	orrs	r6, r2
 80004de:	4642      	mov	r2, r8
 80004e0:	3501      	adds	r5, #1
 80004e2:	407a      	eors	r2, r7
 80004e4:	b2d2      	uxtb	r2, r2
 80004e6:	35ff      	adds	r5, #255	; 0xff
 80004e8:	2e0a      	cmp	r6, #10
 80004ea:	dd00      	ble.n	80004ee <__aeabi_fmul+0xca>
 80004ec:	e0e4      	b.n	80006b8 <__aeabi_fmul+0x294>
 80004ee:	2003      	movs	r0, #3
 80004f0:	2101      	movs	r1, #1
 80004f2:	40b1      	lsls	r1, r6
 80004f4:	26a6      	movs	r6, #166	; 0xa6
 80004f6:	00f6      	lsls	r6, r6, #3
 80004f8:	4231      	tst	r1, r6
 80004fa:	d10a      	bne.n	8000512 <__aeabi_fmul+0xee>
 80004fc:	2690      	movs	r6, #144	; 0x90
 80004fe:	00b6      	lsls	r6, r6, #2
 8000500:	4231      	tst	r1, r6
 8000502:	d116      	bne.n	8000532 <__aeabi_fmul+0x10e>
 8000504:	3eb9      	subs	r6, #185	; 0xb9
 8000506:	3eff      	subs	r6, #255	; 0xff
 8000508:	420e      	tst	r6, r1
 800050a:	d01a      	beq.n	8000542 <__aeabi_fmul+0x11e>
 800050c:	46a1      	mov	r9, r4
 800050e:	4682      	mov	sl, r0
 8000510:	e000      	b.n	8000514 <__aeabi_fmul+0xf0>
 8000512:	0017      	movs	r7, r2
 8000514:	4653      	mov	r3, sl
 8000516:	003a      	movs	r2, r7
 8000518:	2b02      	cmp	r3, #2
 800051a:	d00f      	beq.n	800053c <__aeabi_fmul+0x118>
 800051c:	464c      	mov	r4, r9
 800051e:	4650      	mov	r0, sl
 8000520:	2803      	cmp	r0, #3
 8000522:	d1cd      	bne.n	80004c0 <__aeabi_fmul+0x9c>
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	03c9      	lsls	r1, r1, #15
 8000528:	4321      	orrs	r1, r4
 800052a:	0249      	lsls	r1, r1, #9
 800052c:	20ff      	movs	r0, #255	; 0xff
 800052e:	0a49      	lsrs	r1, r1, #9
 8000530:	e7ca      	b.n	80004c8 <__aeabi_fmul+0xa4>
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	2200      	movs	r2, #0
 8000536:	20ff      	movs	r0, #255	; 0xff
 8000538:	03c9      	lsls	r1, r1, #15
 800053a:	e7c5      	b.n	80004c8 <__aeabi_fmul+0xa4>
 800053c:	20ff      	movs	r0, #255	; 0xff
 800053e:	2100      	movs	r1, #0
 8000540:	e7c2      	b.n	80004c8 <__aeabi_fmul+0xa4>
 8000542:	0c20      	lsrs	r0, r4, #16
 8000544:	4649      	mov	r1, r9
 8000546:	0424      	lsls	r4, r4, #16
 8000548:	0c24      	lsrs	r4, r4, #16
 800054a:	0027      	movs	r7, r4
 800054c:	0c0e      	lsrs	r6, r1, #16
 800054e:	0409      	lsls	r1, r1, #16
 8000550:	0c09      	lsrs	r1, r1, #16
 8000552:	4374      	muls	r4, r6
 8000554:	434f      	muls	r7, r1
 8000556:	4346      	muls	r6, r0
 8000558:	4348      	muls	r0, r1
 800055a:	0c39      	lsrs	r1, r7, #16
 800055c:	1900      	adds	r0, r0, r4
 800055e:	1809      	adds	r1, r1, r0
 8000560:	428c      	cmp	r4, r1
 8000562:	d903      	bls.n	800056c <__aeabi_fmul+0x148>
 8000564:	2080      	movs	r0, #128	; 0x80
 8000566:	0240      	lsls	r0, r0, #9
 8000568:	4684      	mov	ip, r0
 800056a:	4466      	add	r6, ip
 800056c:	043f      	lsls	r7, r7, #16
 800056e:	0408      	lsls	r0, r1, #16
 8000570:	0c3f      	lsrs	r7, r7, #16
 8000572:	19c0      	adds	r0, r0, r7
 8000574:	0184      	lsls	r4, r0, #6
 8000576:	1e67      	subs	r7, r4, #1
 8000578:	41bc      	sbcs	r4, r7
 800057a:	0c09      	lsrs	r1, r1, #16
 800057c:	0e80      	lsrs	r0, r0, #26
 800057e:	1989      	adds	r1, r1, r6
 8000580:	4304      	orrs	r4, r0
 8000582:	0189      	lsls	r1, r1, #6
 8000584:	430c      	orrs	r4, r1
 8000586:	0109      	lsls	r1, r1, #4
 8000588:	d571      	bpl.n	800066e <__aeabi_fmul+0x24a>
 800058a:	2301      	movs	r3, #1
 800058c:	0861      	lsrs	r1, r4, #1
 800058e:	401c      	ands	r4, r3
 8000590:	430c      	orrs	r4, r1
 8000592:	002b      	movs	r3, r5
 8000594:	337f      	adds	r3, #127	; 0x7f
 8000596:	2b00      	cmp	r3, #0
 8000598:	dd51      	ble.n	800063e <__aeabi_fmul+0x21a>
 800059a:	0761      	lsls	r1, r4, #29
 800059c:	d004      	beq.n	80005a8 <__aeabi_fmul+0x184>
 800059e:	210f      	movs	r1, #15
 80005a0:	4021      	ands	r1, r4
 80005a2:	2904      	cmp	r1, #4
 80005a4:	d000      	beq.n	80005a8 <__aeabi_fmul+0x184>
 80005a6:	3404      	adds	r4, #4
 80005a8:	0121      	lsls	r1, r4, #4
 80005aa:	d503      	bpl.n	80005b4 <__aeabi_fmul+0x190>
 80005ac:	4b43      	ldr	r3, [pc, #268]	; (80006bc <__aeabi_fmul+0x298>)
 80005ae:	401c      	ands	r4, r3
 80005b0:	002b      	movs	r3, r5
 80005b2:	3380      	adds	r3, #128	; 0x80
 80005b4:	2bfe      	cmp	r3, #254	; 0xfe
 80005b6:	dcc1      	bgt.n	800053c <__aeabi_fmul+0x118>
 80005b8:	01a1      	lsls	r1, r4, #6
 80005ba:	0a49      	lsrs	r1, r1, #9
 80005bc:	b2d8      	uxtb	r0, r3
 80005be:	e783      	b.n	80004c8 <__aeabi_fmul+0xa4>
 80005c0:	2c00      	cmp	r4, #0
 80005c2:	d12c      	bne.n	800061e <__aeabi_fmul+0x1fa>
 80005c4:	2301      	movs	r3, #1
 80005c6:	4642      	mov	r2, r8
 80005c8:	431e      	orrs	r6, r3
 80005ca:	002b      	movs	r3, r5
 80005cc:	407a      	eors	r2, r7
 80005ce:	2001      	movs	r0, #1
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	1c5d      	adds	r5, r3, #1
 80005d4:	2e0a      	cmp	r6, #10
 80005d6:	dd00      	ble.n	80005da <__aeabi_fmul+0x1b6>
 80005d8:	e757      	b.n	800048a <__aeabi_fmul+0x66>
 80005da:	e76a      	b.n	80004b2 <__aeabi_fmul+0x8e>
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d110      	bne.n	8000602 <__aeabi_fmul+0x1de>
 80005e0:	2301      	movs	r3, #1
 80005e2:	2604      	movs	r6, #4
 80005e4:	2500      	movs	r5, #0
 80005e6:	469a      	mov	sl, r3
 80005e8:	e738      	b.n	800045c <__aeabi_fmul+0x38>
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fmul+0x1d4>
 80005ee:	2302      	movs	r3, #2
 80005f0:	2608      	movs	r6, #8
 80005f2:	25ff      	movs	r5, #255	; 0xff
 80005f4:	469a      	mov	sl, r3
 80005f6:	e731      	b.n	800045c <__aeabi_fmul+0x38>
 80005f8:	2303      	movs	r3, #3
 80005fa:	260c      	movs	r6, #12
 80005fc:	25ff      	movs	r5, #255	; 0xff
 80005fe:	469a      	mov	sl, r3
 8000600:	e72c      	b.n	800045c <__aeabi_fmul+0x38>
 8000602:	4648      	mov	r0, r9
 8000604:	f000 fa1c 	bl	8000a40 <__clzsi2>
 8000608:	464a      	mov	r2, r9
 800060a:	1f43      	subs	r3, r0, #5
 800060c:	2576      	movs	r5, #118	; 0x76
 800060e:	409a      	lsls	r2, r3
 8000610:	2300      	movs	r3, #0
 8000612:	426d      	negs	r5, r5
 8000614:	4691      	mov	r9, r2
 8000616:	2600      	movs	r6, #0
 8000618:	469a      	mov	sl, r3
 800061a:	1a2d      	subs	r5, r5, r0
 800061c:	e71e      	b.n	800045c <__aeabi_fmul+0x38>
 800061e:	0020      	movs	r0, r4
 8000620:	f000 fa0e 	bl	8000a40 <__clzsi2>
 8000624:	4642      	mov	r2, r8
 8000626:	1f43      	subs	r3, r0, #5
 8000628:	409c      	lsls	r4, r3
 800062a:	1a2b      	subs	r3, r5, r0
 800062c:	3b76      	subs	r3, #118	; 0x76
 800062e:	407a      	eors	r2, r7
 8000630:	2000      	movs	r0, #0
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	1c5d      	adds	r5, r3, #1
 8000636:	2e0a      	cmp	r6, #10
 8000638:	dd00      	ble.n	800063c <__aeabi_fmul+0x218>
 800063a:	e726      	b.n	800048a <__aeabi_fmul+0x66>
 800063c:	e739      	b.n	80004b2 <__aeabi_fmul+0x8e>
 800063e:	2101      	movs	r1, #1
 8000640:	1acb      	subs	r3, r1, r3
 8000642:	2b1b      	cmp	r3, #27
 8000644:	dd00      	ble.n	8000648 <__aeabi_fmul+0x224>
 8000646:	e73d      	b.n	80004c4 <__aeabi_fmul+0xa0>
 8000648:	359e      	adds	r5, #158	; 0x9e
 800064a:	0021      	movs	r1, r4
 800064c:	40ac      	lsls	r4, r5
 800064e:	40d9      	lsrs	r1, r3
 8000650:	1e63      	subs	r3, r4, #1
 8000652:	419c      	sbcs	r4, r3
 8000654:	4321      	orrs	r1, r4
 8000656:	074b      	lsls	r3, r1, #29
 8000658:	d004      	beq.n	8000664 <__aeabi_fmul+0x240>
 800065a:	230f      	movs	r3, #15
 800065c:	400b      	ands	r3, r1
 800065e:	2b04      	cmp	r3, #4
 8000660:	d000      	beq.n	8000664 <__aeabi_fmul+0x240>
 8000662:	3104      	adds	r1, #4
 8000664:	014b      	lsls	r3, r1, #5
 8000666:	d504      	bpl.n	8000672 <__aeabi_fmul+0x24e>
 8000668:	2001      	movs	r0, #1
 800066a:	2100      	movs	r1, #0
 800066c:	e72c      	b.n	80004c8 <__aeabi_fmul+0xa4>
 800066e:	001d      	movs	r5, r3
 8000670:	e78f      	b.n	8000592 <__aeabi_fmul+0x16e>
 8000672:	0189      	lsls	r1, r1, #6
 8000674:	2000      	movs	r0, #0
 8000676:	0a49      	lsrs	r1, r1, #9
 8000678:	e726      	b.n	80004c8 <__aeabi_fmul+0xa4>
 800067a:	2302      	movs	r3, #2
 800067c:	2e0f      	cmp	r6, #15
 800067e:	d10c      	bne.n	800069a <__aeabi_fmul+0x276>
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	464b      	mov	r3, r9
 8000684:	03c9      	lsls	r1, r1, #15
 8000686:	420b      	tst	r3, r1
 8000688:	d00d      	beq.n	80006a6 <__aeabi_fmul+0x282>
 800068a:	420c      	tst	r4, r1
 800068c:	d10b      	bne.n	80006a6 <__aeabi_fmul+0x282>
 800068e:	4321      	orrs	r1, r4
 8000690:	0249      	lsls	r1, r1, #9
 8000692:	003a      	movs	r2, r7
 8000694:	20ff      	movs	r0, #255	; 0xff
 8000696:	0a49      	lsrs	r1, r1, #9
 8000698:	e716      	b.n	80004c8 <__aeabi_fmul+0xa4>
 800069a:	2e0b      	cmp	r6, #11
 800069c:	d000      	beq.n	80006a0 <__aeabi_fmul+0x27c>
 800069e:	e6f7      	b.n	8000490 <__aeabi_fmul+0x6c>
 80006a0:	46a1      	mov	r9, r4
 80006a2:	469a      	mov	sl, r3
 80006a4:	e736      	b.n	8000514 <__aeabi_fmul+0xf0>
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	464b      	mov	r3, r9
 80006aa:	03c9      	lsls	r1, r1, #15
 80006ac:	4319      	orrs	r1, r3
 80006ae:	0249      	lsls	r1, r1, #9
 80006b0:	4642      	mov	r2, r8
 80006b2:	20ff      	movs	r0, #255	; 0xff
 80006b4:	0a49      	lsrs	r1, r1, #9
 80006b6:	e707      	b.n	80004c8 <__aeabi_fmul+0xa4>
 80006b8:	2303      	movs	r3, #3
 80006ba:	e7df      	b.n	800067c <__aeabi_fmul+0x258>
 80006bc:	f7ffffff 	.word	0xf7ffffff

080006c0 <__aeabi_fsub>:
 80006c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c2:	46c6      	mov	lr, r8
 80006c4:	0243      	lsls	r3, r0, #9
 80006c6:	0a5b      	lsrs	r3, r3, #9
 80006c8:	0045      	lsls	r5, r0, #1
 80006ca:	00da      	lsls	r2, r3, #3
 80006cc:	0fc4      	lsrs	r4, r0, #31
 80006ce:	0248      	lsls	r0, r1, #9
 80006d0:	004f      	lsls	r7, r1, #1
 80006d2:	4694      	mov	ip, r2
 80006d4:	0a42      	lsrs	r2, r0, #9
 80006d6:	001e      	movs	r6, r3
 80006d8:	4690      	mov	r8, r2
 80006da:	b500      	push	{lr}
 80006dc:	0e2d      	lsrs	r5, r5, #24
 80006de:	0e3f      	lsrs	r7, r7, #24
 80006e0:	0fc9      	lsrs	r1, r1, #31
 80006e2:	0980      	lsrs	r0, r0, #6
 80006e4:	2fff      	cmp	r7, #255	; 0xff
 80006e6:	d059      	beq.n	800079c <__aeabi_fsub+0xdc>
 80006e8:	2201      	movs	r2, #1
 80006ea:	4051      	eors	r1, r2
 80006ec:	428c      	cmp	r4, r1
 80006ee:	d039      	beq.n	8000764 <__aeabi_fsub+0xa4>
 80006f0:	1bea      	subs	r2, r5, r7
 80006f2:	2a00      	cmp	r2, #0
 80006f4:	dd58      	ble.n	80007a8 <__aeabi_fsub+0xe8>
 80006f6:	2f00      	cmp	r7, #0
 80006f8:	d068      	beq.n	80007cc <__aeabi_fsub+0x10c>
 80006fa:	2dff      	cmp	r5, #255	; 0xff
 80006fc:	d100      	bne.n	8000700 <__aeabi_fsub+0x40>
 80006fe:	e0d1      	b.n	80008a4 <__aeabi_fsub+0x1e4>
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	04db      	lsls	r3, r3, #19
 8000704:	4318      	orrs	r0, r3
 8000706:	2a1b      	cmp	r2, #27
 8000708:	dc00      	bgt.n	800070c <__aeabi_fsub+0x4c>
 800070a:	e0e3      	b.n	80008d4 <__aeabi_fsub+0x214>
 800070c:	2301      	movs	r3, #1
 800070e:	4662      	mov	r2, ip
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	015a      	lsls	r2, r3, #5
 8000714:	d400      	bmi.n	8000718 <__aeabi_fsub+0x58>
 8000716:	e0ac      	b.n	8000872 <__aeabi_fsub+0x1b2>
 8000718:	019b      	lsls	r3, r3, #6
 800071a:	099e      	lsrs	r6, r3, #6
 800071c:	0030      	movs	r0, r6
 800071e:	f000 f98f 	bl	8000a40 <__clzsi2>
 8000722:	0033      	movs	r3, r6
 8000724:	3805      	subs	r0, #5
 8000726:	4083      	lsls	r3, r0
 8000728:	4285      	cmp	r5, r0
 800072a:	dc00      	bgt.n	800072e <__aeabi_fsub+0x6e>
 800072c:	e0c6      	b.n	80008bc <__aeabi_fsub+0x1fc>
 800072e:	4ab2      	ldr	r2, [pc, #712]	; (80009f8 <__aeabi_fsub+0x338>)
 8000730:	1a2d      	subs	r5, r5, r0
 8000732:	4013      	ands	r3, r2
 8000734:	075a      	lsls	r2, r3, #29
 8000736:	d004      	beq.n	8000742 <__aeabi_fsub+0x82>
 8000738:	220f      	movs	r2, #15
 800073a:	401a      	ands	r2, r3
 800073c:	2a04      	cmp	r2, #4
 800073e:	d000      	beq.n	8000742 <__aeabi_fsub+0x82>
 8000740:	3304      	adds	r3, #4
 8000742:	015a      	lsls	r2, r3, #5
 8000744:	d400      	bmi.n	8000748 <__aeabi_fsub+0x88>
 8000746:	e097      	b.n	8000878 <__aeabi_fsub+0x1b8>
 8000748:	1c6a      	adds	r2, r5, #1
 800074a:	2dfe      	cmp	r5, #254	; 0xfe
 800074c:	d100      	bne.n	8000750 <__aeabi_fsub+0x90>
 800074e:	e084      	b.n	800085a <__aeabi_fsub+0x19a>
 8000750:	019b      	lsls	r3, r3, #6
 8000752:	0a5e      	lsrs	r6, r3, #9
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	05d0      	lsls	r0, r2, #23
 8000758:	4330      	orrs	r0, r6
 800075a:	07e4      	lsls	r4, r4, #31
 800075c:	4320      	orrs	r0, r4
 800075e:	bc80      	pop	{r7}
 8000760:	46b8      	mov	r8, r7
 8000762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000764:	1bea      	subs	r2, r5, r7
 8000766:	2a00      	cmp	r2, #0
 8000768:	dd41      	ble.n	80007ee <__aeabi_fsub+0x12e>
 800076a:	2f00      	cmp	r7, #0
 800076c:	d06b      	beq.n	8000846 <__aeabi_fsub+0x186>
 800076e:	2dff      	cmp	r5, #255	; 0xff
 8000770:	d100      	bne.n	8000774 <__aeabi_fsub+0xb4>
 8000772:	e097      	b.n	80008a4 <__aeabi_fsub+0x1e4>
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	04db      	lsls	r3, r3, #19
 8000778:	4318      	orrs	r0, r3
 800077a:	2a1b      	cmp	r2, #27
 800077c:	dc00      	bgt.n	8000780 <__aeabi_fsub+0xc0>
 800077e:	e0cc      	b.n	800091a <__aeabi_fsub+0x25a>
 8000780:	2301      	movs	r3, #1
 8000782:	4463      	add	r3, ip
 8000784:	015a      	lsls	r2, r3, #5
 8000786:	d574      	bpl.n	8000872 <__aeabi_fsub+0x1b2>
 8000788:	3501      	adds	r5, #1
 800078a:	2dff      	cmp	r5, #255	; 0xff
 800078c:	d065      	beq.n	800085a <__aeabi_fsub+0x19a>
 800078e:	2201      	movs	r2, #1
 8000790:	499a      	ldr	r1, [pc, #616]	; (80009fc <__aeabi_fsub+0x33c>)
 8000792:	401a      	ands	r2, r3
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	400b      	ands	r3, r1
 8000798:	4313      	orrs	r3, r2
 800079a:	e7cb      	b.n	8000734 <__aeabi_fsub+0x74>
 800079c:	2800      	cmp	r0, #0
 800079e:	d01f      	beq.n	80007e0 <__aeabi_fsub+0x120>
 80007a0:	428c      	cmp	r4, r1
 80007a2:	d022      	beq.n	80007ea <__aeabi_fsub+0x12a>
 80007a4:	002a      	movs	r2, r5
 80007a6:	3aff      	subs	r2, #255	; 0xff
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	d035      	beq.n	8000818 <__aeabi_fsub+0x158>
 80007ac:	1b7a      	subs	r2, r7, r5
 80007ae:	2d00      	cmp	r5, #0
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fsub+0xf4>
 80007b2:	e099      	b.n	80008e8 <__aeabi_fsub+0x228>
 80007b4:	4663      	mov	r3, ip
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_fsub+0xfc>
 80007ba:	e0dd      	b.n	8000978 <__aeabi_fsub+0x2b8>
 80007bc:	1e53      	subs	r3, r2, #1
 80007be:	2a01      	cmp	r2, #1
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fsub+0x104>
 80007c2:	e105      	b.n	80009d0 <__aeabi_fsub+0x310>
 80007c4:	2aff      	cmp	r2, #255	; 0xff
 80007c6:	d06b      	beq.n	80008a0 <__aeabi_fsub+0x1e0>
 80007c8:	001a      	movs	r2, r3
 80007ca:	e094      	b.n	80008f6 <__aeabi_fsub+0x236>
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d073      	beq.n	80008b8 <__aeabi_fsub+0x1f8>
 80007d0:	1e51      	subs	r1, r2, #1
 80007d2:	2a01      	cmp	r2, #1
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fsub+0x118>
 80007d6:	e0df      	b.n	8000998 <__aeabi_fsub+0x2d8>
 80007d8:	2aff      	cmp	r2, #255	; 0xff
 80007da:	d063      	beq.n	80008a4 <__aeabi_fsub+0x1e4>
 80007dc:	000a      	movs	r2, r1
 80007de:	e792      	b.n	8000706 <__aeabi_fsub+0x46>
 80007e0:	2201      	movs	r2, #1
 80007e2:	4051      	eors	r1, r2
 80007e4:	42a1      	cmp	r1, r4
 80007e6:	d000      	beq.n	80007ea <__aeabi_fsub+0x12a>
 80007e8:	e782      	b.n	80006f0 <__aeabi_fsub+0x30>
 80007ea:	002a      	movs	r2, r5
 80007ec:	3aff      	subs	r2, #255	; 0xff
 80007ee:	2a00      	cmp	r2, #0
 80007f0:	d036      	beq.n	8000860 <__aeabi_fsub+0x1a0>
 80007f2:	1b7a      	subs	r2, r7, r5
 80007f4:	2d00      	cmp	r5, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_fsub+0x13a>
 80007f8:	e0aa      	b.n	8000950 <__aeabi_fsub+0x290>
 80007fa:	2fff      	cmp	r7, #255	; 0xff
 80007fc:	d100      	bne.n	8000800 <__aeabi_fsub+0x140>
 80007fe:	e0da      	b.n	80009b6 <__aeabi_fsub+0x2f6>
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	4661      	mov	r1, ip
 8000804:	04db      	lsls	r3, r3, #19
 8000806:	4319      	orrs	r1, r3
 8000808:	468c      	mov	ip, r1
 800080a:	2a1b      	cmp	r2, #27
 800080c:	dc00      	bgt.n	8000810 <__aeabi_fsub+0x150>
 800080e:	e0d4      	b.n	80009ba <__aeabi_fsub+0x2fa>
 8000810:	2301      	movs	r3, #1
 8000812:	003d      	movs	r5, r7
 8000814:	181b      	adds	r3, r3, r0
 8000816:	e7b5      	b.n	8000784 <__aeabi_fsub+0xc4>
 8000818:	27fe      	movs	r7, #254	; 0xfe
 800081a:	1c6a      	adds	r2, r5, #1
 800081c:	4217      	tst	r7, r2
 800081e:	d171      	bne.n	8000904 <__aeabi_fsub+0x244>
 8000820:	2d00      	cmp	r5, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_fsub+0x166>
 8000824:	e09e      	b.n	8000964 <__aeabi_fsub+0x2a4>
 8000826:	4663      	mov	r3, ip
 8000828:	2b00      	cmp	r3, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fsub+0x16e>
 800082c:	e0d5      	b.n	80009da <__aeabi_fsub+0x31a>
 800082e:	2200      	movs	r2, #0
 8000830:	2800      	cmp	r0, #0
 8000832:	d100      	bne.n	8000836 <__aeabi_fsub+0x176>
 8000834:	e78f      	b.n	8000756 <__aeabi_fsub+0x96>
 8000836:	1a1b      	subs	r3, r3, r0
 8000838:	015e      	lsls	r6, r3, #5
 800083a:	d400      	bmi.n	800083e <__aeabi_fsub+0x17e>
 800083c:	e0d6      	b.n	80009ec <__aeabi_fsub+0x32c>
 800083e:	4663      	mov	r3, ip
 8000840:	000c      	movs	r4, r1
 8000842:	1ac3      	subs	r3, r0, r3
 8000844:	e776      	b.n	8000734 <__aeabi_fsub+0x74>
 8000846:	2800      	cmp	r0, #0
 8000848:	d036      	beq.n	80008b8 <__aeabi_fsub+0x1f8>
 800084a:	1e51      	subs	r1, r2, #1
 800084c:	2a01      	cmp	r2, #1
 800084e:	d100      	bne.n	8000852 <__aeabi_fsub+0x192>
 8000850:	e09a      	b.n	8000988 <__aeabi_fsub+0x2c8>
 8000852:	2aff      	cmp	r2, #255	; 0xff
 8000854:	d026      	beq.n	80008a4 <__aeabi_fsub+0x1e4>
 8000856:	000a      	movs	r2, r1
 8000858:	e78f      	b.n	800077a <__aeabi_fsub+0xba>
 800085a:	22ff      	movs	r2, #255	; 0xff
 800085c:	2600      	movs	r6, #0
 800085e:	e77a      	b.n	8000756 <__aeabi_fsub+0x96>
 8000860:	27fe      	movs	r7, #254	; 0xfe
 8000862:	1c6a      	adds	r2, r5, #1
 8000864:	4217      	tst	r7, r2
 8000866:	d062      	beq.n	800092e <__aeabi_fsub+0x26e>
 8000868:	2aff      	cmp	r2, #255	; 0xff
 800086a:	d0f6      	beq.n	800085a <__aeabi_fsub+0x19a>
 800086c:	0015      	movs	r5, r2
 800086e:	4460      	add	r0, ip
 8000870:	0843      	lsrs	r3, r0, #1
 8000872:	075a      	lsls	r2, r3, #29
 8000874:	d000      	beq.n	8000878 <__aeabi_fsub+0x1b8>
 8000876:	e75f      	b.n	8000738 <__aeabi_fsub+0x78>
 8000878:	08db      	lsrs	r3, r3, #3
 800087a:	2dff      	cmp	r5, #255	; 0xff
 800087c:	d012      	beq.n	80008a4 <__aeabi_fsub+0x1e4>
 800087e:	025b      	lsls	r3, r3, #9
 8000880:	0a5e      	lsrs	r6, r3, #9
 8000882:	b2ea      	uxtb	r2, r5
 8000884:	e767      	b.n	8000756 <__aeabi_fsub+0x96>
 8000886:	4662      	mov	r2, ip
 8000888:	2a00      	cmp	r2, #0
 800088a:	d100      	bne.n	800088e <__aeabi_fsub+0x1ce>
 800088c:	e093      	b.n	80009b6 <__aeabi_fsub+0x2f6>
 800088e:	2800      	cmp	r0, #0
 8000890:	d008      	beq.n	80008a4 <__aeabi_fsub+0x1e4>
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	03d2      	lsls	r2, r2, #15
 8000896:	4213      	tst	r3, r2
 8000898:	d004      	beq.n	80008a4 <__aeabi_fsub+0x1e4>
 800089a:	4640      	mov	r0, r8
 800089c:	4210      	tst	r0, r2
 800089e:	d101      	bne.n	80008a4 <__aeabi_fsub+0x1e4>
 80008a0:	000c      	movs	r4, r1
 80008a2:	4643      	mov	r3, r8
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0d8      	beq.n	800085a <__aeabi_fsub+0x19a>
 80008a8:	2680      	movs	r6, #128	; 0x80
 80008aa:	03f6      	lsls	r6, r6, #15
 80008ac:	431e      	orrs	r6, r3
 80008ae:	0276      	lsls	r6, r6, #9
 80008b0:	22ff      	movs	r2, #255	; 0xff
 80008b2:	0a76      	lsrs	r6, r6, #9
 80008b4:	e74f      	b.n	8000756 <__aeabi_fsub+0x96>
 80008b6:	4643      	mov	r3, r8
 80008b8:	0015      	movs	r5, r2
 80008ba:	e7de      	b.n	800087a <__aeabi_fsub+0x1ba>
 80008bc:	2220      	movs	r2, #32
 80008be:	1b40      	subs	r0, r0, r5
 80008c0:	3001      	adds	r0, #1
 80008c2:	1a12      	subs	r2, r2, r0
 80008c4:	0019      	movs	r1, r3
 80008c6:	4093      	lsls	r3, r2
 80008c8:	40c1      	lsrs	r1, r0
 80008ca:	1e5a      	subs	r2, r3, #1
 80008cc:	4193      	sbcs	r3, r2
 80008ce:	2500      	movs	r5, #0
 80008d0:	430b      	orrs	r3, r1
 80008d2:	e72f      	b.n	8000734 <__aeabi_fsub+0x74>
 80008d4:	2320      	movs	r3, #32
 80008d6:	1a9b      	subs	r3, r3, r2
 80008d8:	0001      	movs	r1, r0
 80008da:	4098      	lsls	r0, r3
 80008dc:	0003      	movs	r3, r0
 80008de:	40d1      	lsrs	r1, r2
 80008e0:	1e5a      	subs	r2, r3, #1
 80008e2:	4193      	sbcs	r3, r2
 80008e4:	430b      	orrs	r3, r1
 80008e6:	e712      	b.n	800070e <__aeabi_fsub+0x4e>
 80008e8:	2fff      	cmp	r7, #255	; 0xff
 80008ea:	d0d9      	beq.n	80008a0 <__aeabi_fsub+0x1e0>
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	4664      	mov	r4, ip
 80008f0:	04db      	lsls	r3, r3, #19
 80008f2:	431c      	orrs	r4, r3
 80008f4:	46a4      	mov	ip, r4
 80008f6:	2a1b      	cmp	r2, #27
 80008f8:	dd52      	ble.n	80009a0 <__aeabi_fsub+0x2e0>
 80008fa:	2301      	movs	r3, #1
 80008fc:	000c      	movs	r4, r1
 80008fe:	003d      	movs	r5, r7
 8000900:	1ac3      	subs	r3, r0, r3
 8000902:	e706      	b.n	8000712 <__aeabi_fsub+0x52>
 8000904:	4663      	mov	r3, ip
 8000906:	1a1e      	subs	r6, r3, r0
 8000908:	0173      	lsls	r3, r6, #5
 800090a:	d439      	bmi.n	8000980 <__aeabi_fsub+0x2c0>
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_fsub+0x252>
 8000910:	e704      	b.n	800071c <__aeabi_fsub+0x5c>
 8000912:	2400      	movs	r4, #0
 8000914:	2200      	movs	r2, #0
 8000916:	2600      	movs	r6, #0
 8000918:	e71d      	b.n	8000756 <__aeabi_fsub+0x96>
 800091a:	2320      	movs	r3, #32
 800091c:	1a9b      	subs	r3, r3, r2
 800091e:	0001      	movs	r1, r0
 8000920:	4098      	lsls	r0, r3
 8000922:	0003      	movs	r3, r0
 8000924:	40d1      	lsrs	r1, r2
 8000926:	1e5a      	subs	r2, r3, #1
 8000928:	4193      	sbcs	r3, r2
 800092a:	430b      	orrs	r3, r1
 800092c:	e729      	b.n	8000782 <__aeabi_fsub+0xc2>
 800092e:	2d00      	cmp	r5, #0
 8000930:	d1a9      	bne.n	8000886 <__aeabi_fsub+0x1c6>
 8000932:	4663      	mov	r3, ip
 8000934:	2b00      	cmp	r3, #0
 8000936:	d056      	beq.n	80009e6 <__aeabi_fsub+0x326>
 8000938:	2200      	movs	r2, #0
 800093a:	2800      	cmp	r0, #0
 800093c:	d100      	bne.n	8000940 <__aeabi_fsub+0x280>
 800093e:	e70a      	b.n	8000756 <__aeabi_fsub+0x96>
 8000940:	0003      	movs	r3, r0
 8000942:	4463      	add	r3, ip
 8000944:	015a      	lsls	r2, r3, #5
 8000946:	d594      	bpl.n	8000872 <__aeabi_fsub+0x1b2>
 8000948:	4a2b      	ldr	r2, [pc, #172]	; (80009f8 <__aeabi_fsub+0x338>)
 800094a:	3501      	adds	r5, #1
 800094c:	4013      	ands	r3, r2
 800094e:	e790      	b.n	8000872 <__aeabi_fsub+0x1b2>
 8000950:	4663      	mov	r3, ip
 8000952:	2b00      	cmp	r3, #0
 8000954:	d0af      	beq.n	80008b6 <__aeabi_fsub+0x1f6>
 8000956:	1e53      	subs	r3, r2, #1
 8000958:	2a01      	cmp	r2, #1
 800095a:	d015      	beq.n	8000988 <__aeabi_fsub+0x2c8>
 800095c:	2aff      	cmp	r2, #255	; 0xff
 800095e:	d02a      	beq.n	80009b6 <__aeabi_fsub+0x2f6>
 8000960:	001a      	movs	r2, r3
 8000962:	e752      	b.n	800080a <__aeabi_fsub+0x14a>
 8000964:	4662      	mov	r2, ip
 8000966:	2a00      	cmp	r2, #0
 8000968:	d191      	bne.n	800088e <__aeabi_fsub+0x1ce>
 800096a:	2800      	cmp	r0, #0
 800096c:	d198      	bne.n	80008a0 <__aeabi_fsub+0x1e0>
 800096e:	2680      	movs	r6, #128	; 0x80
 8000970:	2400      	movs	r4, #0
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	03f6      	lsls	r6, r6, #15
 8000976:	e6ee      	b.n	8000756 <__aeabi_fsub+0x96>
 8000978:	000c      	movs	r4, r1
 800097a:	4643      	mov	r3, r8
 800097c:	0015      	movs	r5, r2
 800097e:	e77c      	b.n	800087a <__aeabi_fsub+0x1ba>
 8000980:	4663      	mov	r3, ip
 8000982:	000c      	movs	r4, r1
 8000984:	1ac6      	subs	r6, r0, r3
 8000986:	e6c9      	b.n	800071c <__aeabi_fsub+0x5c>
 8000988:	0003      	movs	r3, r0
 800098a:	4463      	add	r3, ip
 800098c:	2501      	movs	r5, #1
 800098e:	015a      	lsls	r2, r3, #5
 8000990:	d400      	bmi.n	8000994 <__aeabi_fsub+0x2d4>
 8000992:	e76e      	b.n	8000872 <__aeabi_fsub+0x1b2>
 8000994:	2502      	movs	r5, #2
 8000996:	e6fa      	b.n	800078e <__aeabi_fsub+0xce>
 8000998:	4663      	mov	r3, ip
 800099a:	2501      	movs	r5, #1
 800099c:	1a1b      	subs	r3, r3, r0
 800099e:	e6b8      	b.n	8000712 <__aeabi_fsub+0x52>
 80009a0:	4664      	mov	r4, ip
 80009a2:	2320      	movs	r3, #32
 80009a4:	40d4      	lsrs	r4, r2
 80009a6:	1a9b      	subs	r3, r3, r2
 80009a8:	4662      	mov	r2, ip
 80009aa:	409a      	lsls	r2, r3
 80009ac:	0013      	movs	r3, r2
 80009ae:	1e5a      	subs	r2, r3, #1
 80009b0:	4193      	sbcs	r3, r2
 80009b2:	4323      	orrs	r3, r4
 80009b4:	e7a2      	b.n	80008fc <__aeabi_fsub+0x23c>
 80009b6:	4643      	mov	r3, r8
 80009b8:	e774      	b.n	80008a4 <__aeabi_fsub+0x1e4>
 80009ba:	4661      	mov	r1, ip
 80009bc:	2320      	movs	r3, #32
 80009be:	40d1      	lsrs	r1, r2
 80009c0:	1a9b      	subs	r3, r3, r2
 80009c2:	4662      	mov	r2, ip
 80009c4:	409a      	lsls	r2, r3
 80009c6:	0013      	movs	r3, r2
 80009c8:	1e5a      	subs	r2, r3, #1
 80009ca:	4193      	sbcs	r3, r2
 80009cc:	430b      	orrs	r3, r1
 80009ce:	e720      	b.n	8000812 <__aeabi_fsub+0x152>
 80009d0:	4663      	mov	r3, ip
 80009d2:	000c      	movs	r4, r1
 80009d4:	2501      	movs	r5, #1
 80009d6:	1ac3      	subs	r3, r0, r3
 80009d8:	e69b      	b.n	8000712 <__aeabi_fsub+0x52>
 80009da:	2800      	cmp	r0, #0
 80009dc:	d099      	beq.n	8000912 <__aeabi_fsub+0x252>
 80009de:	000c      	movs	r4, r1
 80009e0:	4646      	mov	r6, r8
 80009e2:	2200      	movs	r2, #0
 80009e4:	e6b7      	b.n	8000756 <__aeabi_fsub+0x96>
 80009e6:	4646      	mov	r6, r8
 80009e8:	2200      	movs	r2, #0
 80009ea:	e6b4      	b.n	8000756 <__aeabi_fsub+0x96>
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d000      	beq.n	80009f2 <__aeabi_fsub+0x332>
 80009f0:	e73f      	b.n	8000872 <__aeabi_fsub+0x1b2>
 80009f2:	2400      	movs	r4, #0
 80009f4:	2600      	movs	r6, #0
 80009f6:	e6ae      	b.n	8000756 <__aeabi_fsub+0x96>
 80009f8:	fbffffff 	.word	0xfbffffff
 80009fc:	7dffffff 	.word	0x7dffffff

08000a00 <__aeabi_f2iz>:
 8000a00:	0241      	lsls	r1, r0, #9
 8000a02:	0042      	lsls	r2, r0, #1
 8000a04:	0fc3      	lsrs	r3, r0, #31
 8000a06:	0a49      	lsrs	r1, r1, #9
 8000a08:	2000      	movs	r0, #0
 8000a0a:	0e12      	lsrs	r2, r2, #24
 8000a0c:	2a7e      	cmp	r2, #126	; 0x7e
 8000a0e:	dd03      	ble.n	8000a18 <__aeabi_f2iz+0x18>
 8000a10:	2a9d      	cmp	r2, #157	; 0x9d
 8000a12:	dd02      	ble.n	8000a1a <__aeabi_f2iz+0x1a>
 8000a14:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <__aeabi_f2iz+0x3c>)
 8000a16:	1898      	adds	r0, r3, r2
 8000a18:	4770      	bx	lr
 8000a1a:	2080      	movs	r0, #128	; 0x80
 8000a1c:	0400      	lsls	r0, r0, #16
 8000a1e:	4301      	orrs	r1, r0
 8000a20:	2a95      	cmp	r2, #149	; 0x95
 8000a22:	dc07      	bgt.n	8000a34 <__aeabi_f2iz+0x34>
 8000a24:	2096      	movs	r0, #150	; 0x96
 8000a26:	1a82      	subs	r2, r0, r2
 8000a28:	40d1      	lsrs	r1, r2
 8000a2a:	4248      	negs	r0, r1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1f3      	bne.n	8000a18 <__aeabi_f2iz+0x18>
 8000a30:	0008      	movs	r0, r1
 8000a32:	e7f1      	b.n	8000a18 <__aeabi_f2iz+0x18>
 8000a34:	3a96      	subs	r2, #150	; 0x96
 8000a36:	4091      	lsls	r1, r2
 8000a38:	e7f7      	b.n	8000a2a <__aeabi_f2iz+0x2a>
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	7fffffff 	.word	0x7fffffff

08000a40 <__clzsi2>:
 8000a40:	211c      	movs	r1, #28
 8000a42:	2301      	movs	r3, #1
 8000a44:	041b      	lsls	r3, r3, #16
 8000a46:	4298      	cmp	r0, r3
 8000a48:	d301      	bcc.n	8000a4e <__clzsi2+0xe>
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	3910      	subs	r1, #16
 8000a4e:	0a1b      	lsrs	r3, r3, #8
 8000a50:	4298      	cmp	r0, r3
 8000a52:	d301      	bcc.n	8000a58 <__clzsi2+0x18>
 8000a54:	0a00      	lsrs	r0, r0, #8
 8000a56:	3908      	subs	r1, #8
 8000a58:	091b      	lsrs	r3, r3, #4
 8000a5a:	4298      	cmp	r0, r3
 8000a5c:	d301      	bcc.n	8000a62 <__clzsi2+0x22>
 8000a5e:	0900      	lsrs	r0, r0, #4
 8000a60:	3904      	subs	r1, #4
 8000a62:	a202      	add	r2, pc, #8	; (adr r2, 8000a6c <__clzsi2+0x2c>)
 8000a64:	5c10      	ldrb	r0, [r2, r0]
 8000a66:	1840      	adds	r0, r0, r1
 8000a68:	4770      	bx	lr
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	02020304 	.word	0x02020304
 8000a70:	01010101 	.word	0x01010101
	...

08000a7c <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	0018      	movs	r0, r3
 8000a86:	230c      	movs	r3, #12
 8000a88:	001a      	movs	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f002 fca6 	bl	80033dc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000a90:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <MX_ADC_Init+0xac>)
 8000a92:	4a26      	ldr	r2, [pc, #152]	; (8000b2c <MX_ADC_Init+0xb0>)
 8000a94:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a96:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <MX_ADC_Init+0xac>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <MX_ADC_Init+0xac>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_ADC_Init+0xac>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_ADC_Init+0xac>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_ADC_Init+0xac>)
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_ADC_Init+0xac>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_ADC_Init+0xac>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_ADC_Init+0xac>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_ADC_Init+0xac>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_ADC_Init+0xac>)
 8000ace:	22c2      	movs	r2, #194	; 0xc2
 8000ad0:	32ff      	adds	r2, #255	; 0xff
 8000ad2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_ADC_Init+0xac>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_ADC_Init+0xac>)
 8000adc:	2224      	movs	r2, #36	; 0x24
 8000ade:	2101      	movs	r1, #1
 8000ae0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_ADC_Init+0xac>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_ADC_Init+0xac>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 fd8c 	bl	8001608 <HAL_ADC_Init>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000af4:	f000 f996 	bl	8000e24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2209      	movs	r2, #9
 8000afc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	0152      	lsls	r2, r2, #5
 8000b04:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2207      	movs	r2, #7
 8000b0a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b0c:	1d3a      	adds	r2, r7, #4
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_ADC_Init+0xac>)
 8000b10:	0011      	movs	r1, r2
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 ff52 	bl	80019bc <HAL_ADC_ConfigChannel>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000b1c:	f000 f982 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b004      	add	sp, #16
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000028 	.word	0x20000028
 8000b2c:	40012400 	.word	0x40012400

08000b30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b08b      	sub	sp, #44	; 0x2c
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	2414      	movs	r4, #20
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	2314      	movs	r3, #20
 8000b40:	001a      	movs	r2, r3
 8000b42:	2100      	movs	r1, #0
 8000b44:	f002 fc4a 	bl	80033dc <memset>
  if(adcHandle->Instance==ADC1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a2d      	ldr	r2, [pc, #180]	; (8000c04 <HAL_ADC_MspInit+0xd4>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d153      	bne.n	8000bfa <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b52:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <HAL_ADC_MspInit+0xd8>)
 8000b54:	699a      	ldr	r2, [r3, #24]
 8000b56:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <HAL_ADC_MspInit+0xd8>)
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	0089      	lsls	r1, r1, #2
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	619a      	str	r2, [r3, #24]
 8000b60:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <HAL_ADC_MspInit+0xd8>)
 8000b62:	699a      	ldr	r2, [r3, #24]
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <HAL_ADC_MspInit+0xd8>)
 8000b70:	695a      	ldr	r2, [r3, #20]
 8000b72:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <HAL_ADC_MspInit+0xd8>)
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	02c9      	lsls	r1, r1, #11
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <HAL_ADC_MspInit+0xd8>)
 8000b7e:	695a      	ldr	r2, [r3, #20]
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	02db      	lsls	r3, r3, #11
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = CHECK_VOLTAGE_Pin;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	2203      	movs	r2, #3
 8000b94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(CHECK_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <HAL_ADC_MspInit+0xdc>)
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	0010      	movs	r0, r2
 8000ba4:	f001 fb7e 	bl	80022a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <HAL_ADC_MspInit+0xe0>)
 8000baa:	4a1a      	ldr	r2, [pc, #104]	; (8000c14 <HAL_ADC_MspInit+0xe4>)
 8000bac:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_ADC_MspInit+0xe0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <HAL_ADC_MspInit+0xe0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_ADC_MspInit+0xe0>)
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <HAL_ADC_MspInit+0xe0>)
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	0052      	lsls	r2, r2, #1
 8000bc6:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_ADC_MspInit+0xe0>)
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	00d2      	lsls	r2, r2, #3
 8000bce:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_ADC_MspInit+0xe0>)
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_ADC_MspInit+0xe0>)
 8000bd8:	2280      	movs	r2, #128	; 0x80
 8000bda:	0152      	lsls	r2, r2, #5
 8000bdc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <HAL_ADC_MspInit+0xe0>)
 8000be0:	0018      	movs	r0, r3
 8000be2:	f001 f9c7 	bl	8001f74 <HAL_DMA_Init>
 8000be6:	1e03      	subs	r3, r0, #0
 8000be8:	d001      	beq.n	8000bee <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000bea:	f000 f91b 	bl	8000e24 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_ADC_MspInit+0xe0>)
 8000bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_ADC_MspInit+0xe0>)
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b00b      	add	sp, #44	; 0x2c
 8000c00:	bd90      	pop	{r4, r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	40012400 	.word	0x40012400
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	48000400 	.word	0x48000400
 8000c10:	20000068 	.word	0x20000068
 8000c14:	40020008 	.word	0x40020008

08000c18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_DMA_Init+0x38>)
 8000c20:	695a      	ldr	r2, [r3, #20]
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_DMA_Init+0x38>)
 8000c24:	2101      	movs	r1, #1
 8000c26:	430a      	orrs	r2, r1
 8000c28:	615a      	str	r2, [r3, #20]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_DMA_Init+0x38>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4013      	ands	r3, r2
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2009      	movs	r0, #9
 8000c3c:	f001 f968 	bl	8001f10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c40:	2009      	movs	r0, #9
 8000c42:	f001 f97a 	bl	8001f3a <HAL_NVIC_EnableIRQ>

}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	40021000 	.word	0x40021000

08000c54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	240c      	movs	r4, #12
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	0018      	movs	r0, r3
 8000c60:	2314      	movs	r3, #20
 8000c62:	001a      	movs	r2, r3
 8000c64:	2100      	movs	r1, #0
 8000c66:	f002 fbb9 	bl	80033dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <MX_GPIO_Init+0xbc>)
 8000c6c:	695a      	ldr	r2, [r3, #20]
 8000c6e:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <MX_GPIO_Init+0xbc>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	0289      	lsls	r1, r1, #10
 8000c74:	430a      	orrs	r2, r1
 8000c76:	615a      	str	r2, [r3, #20]
 8000c78:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <MX_GPIO_Init+0xbc>)
 8000c7a:	695a      	ldr	r2, [r3, #20]
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	029b      	lsls	r3, r3, #10
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <MX_GPIO_Init+0xbc>)
 8000c88:	695a      	ldr	r2, [r3, #20]
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_GPIO_Init+0xbc>)
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	02c9      	lsls	r1, r1, #11
 8000c90:	430a      	orrs	r2, r1
 8000c92:	615a      	str	r2, [r3, #20]
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <MX_GPIO_Init+0xbc>)
 8000c96:	695a      	ldr	r2, [r3, #20]
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	02db      	lsls	r3, r3, #11
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIGIT_4_Pin|SEG_C_Pin|SEG_G_Pin|DIGIT_3_Pin
 8000ca2:	491c      	ldr	r1, [pc, #112]	; (8000d14 <MX_GPIO_Init+0xc0>)
 8000ca4:	2390      	movs	r3, #144	; 0x90
 8000ca6:	05db      	lsls	r3, r3, #23
 8000ca8:	2200      	movs	r2, #0
 8000caa:	0018      	movs	r0, r3
 8000cac:	f001 fc6a 	bl	8002584 <HAL_GPIO_WritePin>
                          |DIGIT_2_Pin|SEG_B_Pin|SEG_F_Pin|SEG_A_Pin
                          |DIGIT_1_Pin|SEG_D_Pin|SEG_DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_GPIO_Init+0xc4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2108      	movs	r1, #8
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f001 fc64 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DIGIT_4_Pin|SEG_C_Pin|SEG_G_Pin|DIGIT_3_Pin
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <MX_GPIO_Init+0xc0>)
 8000cc0:	601a      	str	r2, [r3, #0]
                          |DIGIT_2_Pin|SEG_B_Pin|SEG_F_Pin|SEG_A_Pin
                          |DIGIT_1_Pin|SEG_D_Pin|SEG_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	193a      	adds	r2, r7, r4
 8000cd6:	2390      	movs	r3, #144	; 0x90
 8000cd8:	05db      	lsls	r3, r3, #23
 8000cda:	0011      	movs	r1, r2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f001 fae1 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_E_Pin;
 8000ce2:	0021      	movs	r1, r4
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2208      	movs	r2, #8
 8000ce8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2201      	movs	r2, #1
 8000cee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SEG_E_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <MX_GPIO_Init+0xc4>)
 8000d00:	0019      	movs	r1, r3
 8000d02:	0010      	movs	r0, r2
 8000d04:	f001 face 	bl	80022a4 <HAL_GPIO_Init>

}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b009      	add	sp, #36	; 0x24
 8000d0e:	bd90      	pop	{r4, r7, pc}
 8000d10:	40021000 	.word	0x40021000
 8000d14:	00001f7e 	.word	0x00001f7e
 8000d18:	48000400 	.word	0x48000400

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	voltmeter.adcValue = 0;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <main+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	801a      	strh	r2, [r3, #0]
	voltmeter.mode = true;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <main+0x58>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	709a      	strb	r2, [r3, #2]
	voltmeter.blinkFlag = false;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <main+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	721a      	strb	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d32:	f000 fc05 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d36:	f000 f825 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3a:	f7ff ff8b 	bl	8000c54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d3e:	f7ff ff6b 	bl	8000c18 <MX_DMA_Init>
  MX_ADC_Init();
 8000d42:	f7ff fe9b 	bl	8000a7c <MX_ADC_Init>
  MX_TIM3_Init();
 8000d46:	f000 fa95 	bl	8001274 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)&voltmeter.adcValue, 1);
 8000d4a:	490a      	ldr	r1, [pc, #40]	; (8000d74 <main+0x58>)
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <main+0x5c>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	0018      	movs	r0, r3
 8000d52:	f000 fd99 	bl	8001888 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <main+0x60>)
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f002 f8bf 	bl	8002edc <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  startTimeScanFlags();
 8000d5e:	f000 fafb 	bl	8001358 <startTimeScanFlags>
//	    SEGMENT_CONTROL(SEG_G,SEGMENT_OFF);
//	    SEGMENT_CONTROL(SEG_DP,SEGMENT_OFF);

	  //float deneme = low_pass_filter();
	  //sevenSegmentDisplaySetNumbers(low_pass_filter());
	  sevenSegmentDisplaySetNumbers(11.10);
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <main+0x64>)
 8000d64:	1c18      	adds	r0, r3, #0
 8000d66:	f000 f9e7 	bl	8001138 <sevenSegmentDisplaySetNumbers>

//	  sevenSegmentDisplaySetDigit(0, 0, 2);
//	  sevenSegmentDisplaySetDigit(1, 9, 2);
//	  sevenSegmentDisplaySetDigit(2, 9, 2);
//	  sevenSegmentDisplaySetDigit(3, 0, 2);
	  sevenSegmentDisplayUpdate();
 8000d6a:	f000 f9af 	bl	80010cc <sevenSegmentDisplayUpdate>


	  clearTimeScanFlags();
 8000d6e:	f000 fb85 	bl	800147c <clearTimeScanFlags>
	  startTimeScanFlags();
 8000d72:	e7f4      	b.n	8000d5e <main+0x42>
 8000d74:	200000ac 	.word	0x200000ac
 8000d78:	20000028 	.word	0x20000028
 8000d7c:	200000c0 	.word	0x200000c0
 8000d80:	4131999a 	.word	0x4131999a

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b091      	sub	sp, #68	; 0x44
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	2410      	movs	r4, #16
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	0018      	movs	r0, r3
 8000d90:	2330      	movs	r3, #48	; 0x30
 8000d92:	001a      	movs	r2, r3
 8000d94:	2100      	movs	r1, #0
 8000d96:	f002 fb21 	bl	80033dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	2310      	movs	r3, #16
 8000da0:	001a      	movs	r2, r3
 8000da2:	2100      	movs	r1, #0
 8000da4:	f002 fb1a 	bl	80033dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000da8:	0021      	movs	r1, r4
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2212      	movs	r2, #18
 8000dae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2201      	movs	r2, #1
 8000db4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2201      	movs	r2, #1
 8000dba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2210      	movs	r2, #16
 8000dc0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2210      	movs	r2, #16
 8000dc6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2202      	movs	r2, #2
 8000dcc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	0352      	lsls	r2, r2, #13
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	0018      	movs	r0, r3
 8000de6:	f001 fbeb 	bl	80025c0 <HAL_RCC_OscConfig>
 8000dea:	1e03      	subs	r3, r0, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dee:	f000 f819 	bl	8000e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df2:	003b      	movs	r3, r7
 8000df4:	2207      	movs	r2, #7
 8000df6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df8:	003b      	movs	r3, r7
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfe:	003b      	movs	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e04:	003b      	movs	r3, r7
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e0a:	003b      	movs	r3, r7
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f001 fef0 	bl	8002bf4 <HAL_RCC_ClockConfig>
 8000e14:	1e03      	subs	r3, r0, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e18:	f000 f804 	bl	8000e24 <Error_Handler>
  }
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b011      	add	sp, #68	; 0x44
 8000e22:	bd90      	pop	{r4, r7, pc}

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <Error_Handler+0x8>
	...

08000e30 <sevenSegmentDisplaySetDigit>:

volatile uint8_t currentDigit = 0;
volatile uint8_t digits[4] = {0, 0, 0, 0};

void sevenSegmentDisplaySetDigit(uint8_t digitPosition, uint8_t number, uint8_t decimalPosition)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	0004      	movs	r4, r0
 8000e38:	0008      	movs	r0, r1
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	1c22      	adds	r2, r4, #0
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	1dbb      	adds	r3, r7, #6
 8000e44:	1c02      	adds	r2, r0, #0
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	1d7b      	adds	r3, r7, #5
 8000e4a:	1c0a      	adds	r2, r1, #0
 8000e4c:	701a      	strb	r2, [r3, #0]

    if (!voltmeter.blinkFlag && !voltmeter.mode)
 8000e4e:	4b9c      	ldr	r3, [pc, #624]	; (80010c0 <sevenSegmentDisplaySetDigit+0x290>)
 8000e50:	7a1b      	ldrb	r3, [r3, #8]
 8000e52:	2201      	movs	r2, #1
 8000e54:	4053      	eors	r3, r2
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d060      	beq.n	8000f1e <sevenSegmentDisplaySetDigit+0xee>
 8000e5c:	4b98      	ldr	r3, [pc, #608]	; (80010c0 <sevenSegmentDisplaySetDigit+0x290>)
 8000e5e:	789b      	ldrb	r3, [r3, #2]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2201      	movs	r2, #1
 8000e64:	4053      	eors	r3, r2
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d058      	beq.n	8000f1e <sevenSegmentDisplaySetDigit+0xee>
    {
        DIGIT_CONTROL(DIGIT_1,DIGIT_OFF);
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	00d9      	lsls	r1, r3, #3
 8000e70:	2390      	movs	r3, #144	; 0x90
 8000e72:	05db      	lsls	r3, r3, #23
 8000e74:	2200      	movs	r2, #0
 8000e76:	0018      	movs	r0, r3
 8000e78:	f001 fb84 	bl	8002584 <HAL_GPIO_WritePin>
        DIGIT_CONTROL(DIGIT_2,DIGIT_OFF);
 8000e7c:	2390      	movs	r3, #144	; 0x90
 8000e7e:	05db      	lsls	r3, r3, #23
 8000e80:	2200      	movs	r2, #0
 8000e82:	2120      	movs	r1, #32
 8000e84:	0018      	movs	r0, r3
 8000e86:	f001 fb7d 	bl	8002584 <HAL_GPIO_WritePin>
        DIGIT_CONTROL(DIGIT_3,DIGIT_OFF);
 8000e8a:	2390      	movs	r3, #144	; 0x90
 8000e8c:	05db      	lsls	r3, r3, #23
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2110      	movs	r1, #16
 8000e92:	0018      	movs	r0, r3
 8000e94:	f001 fb76 	bl	8002584 <HAL_GPIO_WritePin>
        DIGIT_CONTROL(DIGIT_4,DIGIT_OFF);
 8000e98:	2390      	movs	r3, #144	; 0x90
 8000e9a:	05db      	lsls	r3, r3, #23
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f001 fb6f 	bl	8002584 <HAL_GPIO_WritePin>
        SEGMENT_CONTROL(SEG_A, SEGMENT_OFF);
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	0099      	lsls	r1, r3, #2
 8000eaa:	2390      	movs	r3, #144	; 0x90
 8000eac:	05db      	lsls	r3, r3, #23
 8000eae:	2201      	movs	r2, #1
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f001 fb67 	bl	8002584 <HAL_GPIO_WritePin>
        SEGMENT_CONTROL(SEG_B, SEGMENT_OFF);
 8000eb6:	2390      	movs	r3, #144	; 0x90
 8000eb8:	05db      	lsls	r3, r3, #23
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2140      	movs	r1, #64	; 0x40
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f001 fb60 	bl	8002584 <HAL_GPIO_WritePin>
        SEGMENT_CONTROL(SEG_C, SEGMENT_OFF);
 8000ec4:	2390      	movs	r3, #144	; 0x90
 8000ec6:	05db      	lsls	r3, r3, #23
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2104      	movs	r1, #4
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f001 fb59 	bl	8002584 <HAL_GPIO_WritePin>
        SEGMENT_CONTROL(SEG_D, SEGMENT_OFF);
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	0119      	lsls	r1, r3, #4
 8000ed6:	2390      	movs	r3, #144	; 0x90
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	2201      	movs	r2, #1
 8000edc:	0018      	movs	r0, r3
 8000ede:	f001 fb51 	bl	8002584 <HAL_GPIO_WritePin>
        SEGMENT_CONTROL(SEG_E, SEGMENT_OFF);
 8000ee2:	4b78      	ldr	r3, [pc, #480]	; (80010c4 <sevenSegmentDisplaySetDigit+0x294>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2108      	movs	r1, #8
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f001 fb4b 	bl	8002584 <HAL_GPIO_WritePin>
        SEGMENT_CONTROL(SEG_F, SEGMENT_OFF);
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	0059      	lsls	r1, r3, #1
 8000ef2:	2390      	movs	r3, #144	; 0x90
 8000ef4:	05db      	lsls	r3, r3, #23
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f001 fb43 	bl	8002584 <HAL_GPIO_WritePin>
        SEGMENT_CONTROL(SEG_G, SEGMENT_OFF);
 8000efe:	2390      	movs	r3, #144	; 0x90
 8000f00:	05db      	lsls	r3, r3, #23
 8000f02:	2201      	movs	r2, #1
 8000f04:	2108      	movs	r1, #8
 8000f06:	0018      	movs	r0, r3
 8000f08:	f001 fb3c 	bl	8002584 <HAL_GPIO_WritePin>
        SEGMENT_CONTROL(SEG_DP, SEGMENT_OFF);
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	0159      	lsls	r1, r3, #5
 8000f10:	2390      	movs	r3, #144	; 0x90
 8000f12:	05db      	lsls	r3, r3, #23
 8000f14:	2201      	movs	r2, #1
 8000f16:	0018      	movs	r0, r3
 8000f18:	f001 fb34 	bl	8002584 <HAL_GPIO_WritePin>
        return;
 8000f1c:	e0cd      	b.n	80010ba <sevenSegmentDisplaySetDigit+0x28a>
    }

    uint8_t segmentPositions = COMMON_CATHODE_SEGMENT_MAP[number];
 8000f1e:	1dbb      	adds	r3, r7, #6
 8000f20:	781a      	ldrb	r2, [r3, #0]
 8000f22:	240f      	movs	r4, #15
 8000f24:	193b      	adds	r3, r7, r4
 8000f26:	4968      	ldr	r1, [pc, #416]	; (80010c8 <sevenSegmentDisplaySetDigit+0x298>)
 8000f28:	5c8a      	ldrb	r2, [r1, r2]
 8000f2a:	701a      	strb	r2, [r3, #0]

    DIGIT_CONTROL(DIGIT_1,DIGIT_OFF);
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	00d9      	lsls	r1, r3, #3
 8000f30:	2390      	movs	r3, #144	; 0x90
 8000f32:	05db      	lsls	r3, r3, #23
 8000f34:	2200      	movs	r2, #0
 8000f36:	0018      	movs	r0, r3
 8000f38:	f001 fb24 	bl	8002584 <HAL_GPIO_WritePin>
    DIGIT_CONTROL(DIGIT_2,DIGIT_OFF);
 8000f3c:	2390      	movs	r3, #144	; 0x90
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	2200      	movs	r2, #0
 8000f42:	2120      	movs	r1, #32
 8000f44:	0018      	movs	r0, r3
 8000f46:	f001 fb1d 	bl	8002584 <HAL_GPIO_WritePin>
    DIGIT_CONTROL(DIGIT_3,DIGIT_OFF);
 8000f4a:	2390      	movs	r3, #144	; 0x90
 8000f4c:	05db      	lsls	r3, r3, #23
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2110      	movs	r1, #16
 8000f52:	0018      	movs	r0, r3
 8000f54:	f001 fb16 	bl	8002584 <HAL_GPIO_WritePin>
    DIGIT_CONTROL(DIGIT_4,DIGIT_OFF);
 8000f58:	2390      	movs	r3, #144	; 0x90
 8000f5a:	05db      	lsls	r3, r3, #23
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2102      	movs	r1, #2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f001 fb0f 	bl	8002584 <HAL_GPIO_WritePin>

    SEGMENT_CONTROL(SEG_A ,(segmentPositions & SEG_A_POSITION) ? SEGMENT_ON : SEGMENT_OFF);
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	425a      	negs	r2, r3
 8000f70:	4153      	adcs	r3, r2
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	001a      	movs	r2, r3
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	0099      	lsls	r1, r3, #2
 8000f7a:	2390      	movs	r3, #144	; 0x90
 8000f7c:	05db      	lsls	r3, r3, #23
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f001 fb00 	bl	8002584 <HAL_GPIO_WritePin>
    SEGMENT_CONTROL(SEG_B ,(segmentPositions & SEG_B_POSITION) ? SEGMENT_ON : SEGMENT_OFF);
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2202      	movs	r2, #2
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	425a      	negs	r2, r3
 8000f8e:	4153      	adcs	r3, r2
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	001a      	movs	r2, r3
 8000f94:	2390      	movs	r3, #144	; 0x90
 8000f96:	05db      	lsls	r3, r3, #23
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f001 faf2 	bl	8002584 <HAL_GPIO_WritePin>
    SEGMENT_CONTROL(SEG_C ,(segmentPositions & SEG_C_POSITION) ? SEGMENT_ON : SEGMENT_OFF);
 8000fa0:	193b      	adds	r3, r7, r4
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	425a      	negs	r2, r3
 8000faa:	4153      	adcs	r3, r2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	001a      	movs	r2, r3
 8000fb0:	2390      	movs	r3, #144	; 0x90
 8000fb2:	05db      	lsls	r3, r3, #23
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f001 fae4 	bl	8002584 <HAL_GPIO_WritePin>
    SEGMENT_CONTROL(SEG_D ,(segmentPositions & SEG_D_POSITION) ? SEGMENT_ON : SEGMENT_OFF);
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	425a      	negs	r2, r3
 8000fc6:	4153      	adcs	r3, r2
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	001a      	movs	r2, r3
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	0119      	lsls	r1, r3, #4
 8000fd0:	2390      	movs	r3, #144	; 0x90
 8000fd2:	05db      	lsls	r3, r3, #23
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f001 fad5 	bl	8002584 <HAL_GPIO_WritePin>
    SEGMENT_CONTROL(SEG_E ,(segmentPositions & SEG_E_POSITION) ? SEGMENT_ON : SEGMENT_OFF);
 8000fda:	193b      	adds	r3, r7, r4
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2210      	movs	r2, #16
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	425a      	negs	r2, r3
 8000fe4:	4153      	adcs	r3, r2
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	001a      	movs	r2, r3
 8000fea:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <sevenSegmentDisplaySetDigit+0x294>)
 8000fec:	2108      	movs	r1, #8
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f001 fac8 	bl	8002584 <HAL_GPIO_WritePin>
    SEGMENT_CONTROL(SEG_F ,(segmentPositions & SEG_F_POSITION) ? SEGMENT_ON : SEGMENT_OFF);
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	425a      	negs	r2, r3
 8000ffe:	4153      	adcs	r3, r2
 8001000:	b2db      	uxtb	r3, r3
 8001002:	001a      	movs	r2, r3
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	0059      	lsls	r1, r3, #1
 8001008:	2390      	movs	r3, #144	; 0x90
 800100a:	05db      	lsls	r3, r3, #23
 800100c:	0018      	movs	r0, r3
 800100e:	f001 fab9 	bl	8002584 <HAL_GPIO_WritePin>
    SEGMENT_CONTROL(SEG_G ,(segmentPositions & SEG_G_POSITION) ? SEGMENT_ON : SEGMENT_OFF);
 8001012:	193b      	adds	r3, r7, r4
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2240      	movs	r2, #64	; 0x40
 8001018:	4013      	ands	r3, r2
 800101a:	425a      	negs	r2, r3
 800101c:	4153      	adcs	r3, r2
 800101e:	b2db      	uxtb	r3, r3
 8001020:	001a      	movs	r2, r3
 8001022:	2390      	movs	r3, #144	; 0x90
 8001024:	05db      	lsls	r3, r3, #23
 8001026:	2108      	movs	r1, #8
 8001028:	0018      	movs	r0, r3
 800102a:	f001 faab 	bl	8002584 <HAL_GPIO_WritePin>
    SEGMENT_CONTROL(SEG_DP,(decimalPosition  & SEG_DP_POSITION)? SEGMENT_ON : SEGMENT_OFF);
 800102e:	1d7b      	adds	r3, r7, #5
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b25b      	sxtb	r3, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	09db      	lsrs	r3, r3, #7
 800103a:	b2db      	uxtb	r3, r3
 800103c:	001a      	movs	r2, r3
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	0159      	lsls	r1, r3, #5
 8001042:	2390      	movs	r3, #144	; 0x90
 8001044:	05db      	lsls	r3, r3, #23
 8001046:	0018      	movs	r0, r3
 8001048:	f001 fa9c 	bl	8002584 <HAL_GPIO_WritePin>
//            default: /*out of range*/ break;
//        }
//    }
//    else if(voltmeter.mode)
//    {
        switch (digitPosition)
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b03      	cmp	r3, #3
 8001052:	d029      	beq.n	80010a8 <sevenSegmentDisplaySetDigit+0x278>
 8001054:	dc30      	bgt.n	80010b8 <sevenSegmentDisplaySetDigit+0x288>
 8001056:	2b02      	cmp	r3, #2
 8001058:	d01e      	beq.n	8001098 <sevenSegmentDisplaySetDigit+0x268>
 800105a:	dc2d      	bgt.n	80010b8 <sevenSegmentDisplaySetDigit+0x288>
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <sevenSegmentDisplaySetDigit+0x236>
 8001060:	2b01      	cmp	r3, #1
 8001062:	d009      	beq.n	8001078 <sevenSegmentDisplaySetDigit+0x248>
            	break;
            case 3:
            	DIGIT_CONTROL(DIGIT_4,DIGIT_ON);
            	//SEGMENT_CONTROL(SEG_DP, SEGMENT_OFF);
            	break;
            default: /*out of range*/ break;
 8001064:	e028      	b.n	80010b8 <sevenSegmentDisplaySetDigit+0x288>
            	DIGIT_CONTROL(DIGIT_1,DIGIT_ON);
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	00d9      	lsls	r1, r3, #3
 800106a:	2390      	movs	r3, #144	; 0x90
 800106c:	05db      	lsls	r3, r3, #23
 800106e:	2201      	movs	r2, #1
 8001070:	0018      	movs	r0, r3
 8001072:	f001 fa87 	bl	8002584 <HAL_GPIO_WritePin>
            	break;
 8001076:	e020      	b.n	80010ba <sevenSegmentDisplaySetDigit+0x28a>
            	DIGIT_CONTROL(DIGIT_2,DIGIT_ON);
 8001078:	2390      	movs	r3, #144	; 0x90
 800107a:	05db      	lsls	r3, r3, #23
 800107c:	2201      	movs	r2, #1
 800107e:	2120      	movs	r1, #32
 8001080:	0018      	movs	r0, r3
 8001082:	f001 fa7f 	bl	8002584 <HAL_GPIO_WritePin>
            	SEGMENT_CONTROL(SEG_DP, SEGMENT_ON);
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	0159      	lsls	r1, r3, #5
 800108a:	2390      	movs	r3, #144	; 0x90
 800108c:	05db      	lsls	r3, r3, #23
 800108e:	2200      	movs	r2, #0
 8001090:	0018      	movs	r0, r3
 8001092:	f001 fa77 	bl	8002584 <HAL_GPIO_WritePin>
            	break;
 8001096:	e010      	b.n	80010ba <sevenSegmentDisplaySetDigit+0x28a>
            	DIGIT_CONTROL(DIGIT_3,DIGIT_ON);
 8001098:	2390      	movs	r3, #144	; 0x90
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	2201      	movs	r2, #1
 800109e:	2110      	movs	r1, #16
 80010a0:	0018      	movs	r0, r3
 80010a2:	f001 fa6f 	bl	8002584 <HAL_GPIO_WritePin>
            	break;
 80010a6:	e008      	b.n	80010ba <sevenSegmentDisplaySetDigit+0x28a>
            	DIGIT_CONTROL(DIGIT_4,DIGIT_ON);
 80010a8:	2390      	movs	r3, #144	; 0x90
 80010aa:	05db      	lsls	r3, r3, #23
 80010ac:	2201      	movs	r2, #1
 80010ae:	2102      	movs	r1, #2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f001 fa67 	bl	8002584 <HAL_GPIO_WritePin>
            	break;
 80010b6:	e000      	b.n	80010ba <sevenSegmentDisplaySetDigit+0x28a>
            default: /*out of range*/ break;
 80010b8:	46c0      	nop			; (mov r8, r8)
        }
 //   }



}
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b005      	add	sp, #20
 80010be:	bd90      	pop	{r4, r7, pc}
 80010c0:	200000ac 	.word	0x200000ac
 80010c4:	48000400 	.word	0x48000400
 80010c8:	0800344c 	.word	0x0800344c

080010cc <sevenSegmentDisplayUpdate>:
void sevenSegmentDisplayUpdate(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	if(_1msFlag)
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <sevenSegmentDisplayUpdate+0x5c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d024      	beq.n	8001122 <sevenSegmentDisplayUpdate+0x56>
	{
			sevenSegmentDisplaySetDigit(currentDigit, digits[currentDigit],2);
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <sevenSegmentDisplayUpdate+0x60>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b2d8      	uxtb	r0, r3
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <sevenSegmentDisplayUpdate+0x60>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	001a      	movs	r2, r3
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <sevenSegmentDisplayUpdate+0x64>)
 80010e8:	5c9b      	ldrb	r3, [r3, r2]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2202      	movs	r2, #2
 80010ee:	0019      	movs	r1, r3
 80010f0:	f7ff fe9e 	bl	8000e30 <sevenSegmentDisplaySetDigit>

			currentDigit = (currentDigit + 1) % 4;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <sevenSegmentDisplayUpdate+0x60>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <sevenSegmentDisplayUpdate+0x68>)
 80010fe:	4013      	ands	r3, r2
 8001100:	d504      	bpl.n	800110c <sevenSegmentDisplayUpdate+0x40>
 8001102:	3b01      	subs	r3, #1
 8001104:	2204      	movs	r2, #4
 8001106:	4252      	negs	r2, r2
 8001108:	4313      	orrs	r3, r2
 800110a:	3301      	adds	r3, #1
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <sevenSegmentDisplayUpdate+0x60>)
 8001110:	701a      	strb	r2, [r3, #0]

			if(currentDigit == 4) currentDigit = 0;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <sevenSegmentDisplayUpdate+0x60>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b04      	cmp	r3, #4
 800111a:	d102      	bne.n	8001122 <sevenSegmentDisplayUpdate+0x56>
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <sevenSegmentDisplayUpdate+0x60>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
	}
}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000113 	.word	0x20000113
 800112c:	200000b8 	.word	0x200000b8
 8001130:	200000bc 	.word	0x200000bc
 8001134:	80000003 	.word	0x80000003

08001138 <sevenSegmentDisplaySetNumbers>:
void sevenSegmentDisplaySetNumbers(float value)
{
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
    uint16_t number = (uint16_t)(value * 100);
 8001140:	4923      	ldr	r1, [pc, #140]	; (80011d0 <sevenSegmentDisplaySetNumbers+0x98>)
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff f96e 	bl	8000424 <__aeabi_fmul>
 8001148:	1c03      	adds	r3, r0, #0
 800114a:	250e      	movs	r5, #14
 800114c:	197c      	adds	r4, r7, r5
 800114e:	1c18      	adds	r0, r3, #0
 8001150:	f7ff f8a0 	bl	8000294 <__aeabi_f2uiz>
 8001154:	0003      	movs	r3, r0
 8001156:	8023      	strh	r3, [r4, #0]

    digits[0] = (number / 1000) % 10;
 8001158:	002c      	movs	r4, r5
 800115a:	193b      	adds	r3, r7, r4
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	22fa      	movs	r2, #250	; 0xfa
 8001160:	0091      	lsls	r1, r2, #2
 8001162:	0018      	movs	r0, r3
 8001164:	f7fe ffd0 	bl	8000108 <__udivsi3>
 8001168:	0003      	movs	r3, r0
 800116a:	b29b      	uxth	r3, r3
 800116c:	210a      	movs	r1, #10
 800116e:	0018      	movs	r0, r3
 8001170:	f7ff f850 	bl	8000214 <__aeabi_uidivmod>
 8001174:	000b      	movs	r3, r1
 8001176:	b29b      	uxth	r3, r3
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <sevenSegmentDisplaySetNumbers+0x9c>)
 800117c:	701a      	strb	r2, [r3, #0]
    digits[1] = (number / 100) % 10;
 800117e:	193b      	adds	r3, r7, r4
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	2164      	movs	r1, #100	; 0x64
 8001184:	0018      	movs	r0, r3
 8001186:	f7fe ffbf 	bl	8000108 <__udivsi3>
 800118a:	0003      	movs	r3, r0
 800118c:	b29b      	uxth	r3, r3
 800118e:	210a      	movs	r1, #10
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff f83f 	bl	8000214 <__aeabi_uidivmod>
 8001196:	000b      	movs	r3, r1
 8001198:	b29b      	uxth	r3, r3
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <sevenSegmentDisplaySetNumbers+0x9c>)
 800119e:	705a      	strb	r2, [r3, #1]
    digits[2] = (number / 10) % 10;
 80011a0:	193b      	adds	r3, r7, r4
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	210a      	movs	r1, #10
 80011a6:	0018      	movs	r0, r3
 80011a8:	f7fe ffae 	bl	8000108 <__udivsi3>
 80011ac:	0003      	movs	r3, r0
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	210a      	movs	r1, #10
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff f82e 	bl	8000214 <__aeabi_uidivmod>
 80011b8:	000b      	movs	r3, r1
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <sevenSegmentDisplaySetNumbers+0x9c>)
 80011c0:	709a      	strb	r2, [r3, #2]
    digits[3] = 0;//(number / 1) % 10;
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <sevenSegmentDisplaySetNumbers+0x9c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	70da      	strb	r2, [r3, #3]

}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b004      	add	sp, #16
 80011ce:	bdb0      	pop	{r4, r5, r7, pc}
 80011d0:	42c80000 	.word	0x42c80000
 80011d4:	200000bc 	.word	0x200000bc

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_MspInit+0x44>)
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_MspInit+0x44>)
 80011e4:	2101      	movs	r1, #1
 80011e6:	430a      	orrs	r2, r1
 80011e8:	619a      	str	r2, [r3, #24]
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_MspInit+0x44>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	2201      	movs	r2, #1
 80011f0:	4013      	ands	r3, r2
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_MspInit+0x44>)
 80011f8:	69da      	ldr	r2, [r3, #28]
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_MspInit+0x44>)
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	0549      	lsls	r1, r1, #21
 8001200:	430a      	orrs	r2, r1
 8001202:	61da      	str	r2, [r3, #28]
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_MspInit+0x44>)
 8001206:	69da      	ldr	r2, [r3, #28]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	055b      	lsls	r3, r3, #21
 800120c:	4013      	ands	r3, r2
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	40021000 	.word	0x40021000

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler+0x4>

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001244:	f000 f9c4 	bl	80015d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <DMA1_Channel1_IRQHandler+0x14>)
 8001256:	0018      	movs	r0, r3
 8001258:	f000 ff3a 	bl	80020d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	20000068 	.word	0x20000068

08001268 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	2308      	movs	r3, #8
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	0018      	movs	r0, r3
 8001280:	2310      	movs	r3, #16
 8001282:	001a      	movs	r2, r3
 8001284:	2100      	movs	r1, #0
 8001286:	f002 f8a9 	bl	80033dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128a:	003b      	movs	r3, r7
 800128c:	0018      	movs	r0, r3
 800128e:	2308      	movs	r3, #8
 8001290:	001a      	movs	r2, r3
 8001292:	2100      	movs	r1, #0
 8001294:	f002 f8a2 	bl	80033dc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <MX_TIM3_Init+0xa0>)
 800129a:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <MX_TIM3_Init+0xa4>)
 800129c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <MX_TIM3_Init+0xa0>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <MX_TIM3_Init+0xa0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_TIM3_Init+0xa0>)
 80012ac:	22fa      	movs	r2, #250	; 0xfa
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_TIM3_Init+0xa0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <MX_TIM3_Init+0xa0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_TIM3_Init+0xa0>)
 80012c0:	0018      	movs	r0, r3
 80012c2:	f001 fdbb 	bl	8002e3c <HAL_TIM_Base_Init>
 80012c6:	1e03      	subs	r3, r0, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80012ca:	f7ff fdab 	bl	8000e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ce:	2108      	movs	r1, #8
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	2280      	movs	r2, #128	; 0x80
 80012d4:	0152      	lsls	r2, r2, #5
 80012d6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012d8:	187a      	adds	r2, r7, r1
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_TIM3_Init+0xa0>)
 80012dc:	0011      	movs	r1, r2
 80012de:	0018      	movs	r0, r3
 80012e0:	f001 fe42 	bl	8002f68 <HAL_TIM_ConfigClockSource>
 80012e4:	1e03      	subs	r3, r0, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80012e8:	f7ff fd9c 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ec:	003b      	movs	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	003b      	movs	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012f8:	003a      	movs	r2, r7
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_TIM3_Init+0xa0>)
 80012fc:	0011      	movs	r1, r2
 80012fe:	0018      	movs	r0, r3
 8001300:	f002 f81a 	bl	8003338 <HAL_TIMEx_MasterConfigSynchronization>
 8001304:	1e03      	subs	r3, r0, #0
 8001306:	d001      	beq.n	800130c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001308:	f7ff fd8c 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	b006      	add	sp, #24
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200000c0 	.word	0x200000c0
 8001318:	40000400 	.word	0x40000400

0800131c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a09      	ldr	r2, [pc, #36]	; (8001350 <HAL_TIM_Base_MspInit+0x34>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d10b      	bne.n	8001346 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_TIM_Base_MspInit+0x38>)
 8001330:	69da      	ldr	r2, [r3, #28]
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_TIM_Base_MspInit+0x38>)
 8001334:	2102      	movs	r1, #2
 8001336:	430a      	orrs	r2, r1
 8001338:	61da      	str	r2, [r3, #28]
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_TIM_Base_MspInit+0x38>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	2202      	movs	r2, #2
 8001340:	4013      	ands	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b004      	add	sp, #16
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	40000400 	.word	0x40000400
 8001354:	40021000 	.word	0x40021000

08001358 <startTimeScanFlags>:
    	}
    }
}

void startTimeScanFlags(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	if(_configurableFlagScanStart)
 800135c:	4b33      	ldr	r3, [pc, #204]	; (800142c <startTimeScanFlags+0xd4>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <startTimeScanFlags+0x18>
	{
		_configurableFlag = true;
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <startTimeScanFlags+0xd8>)
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
		_configurableFlagScanStart = false;
 800136a:	4b30      	ldr	r3, [pc, #192]	; (800142c <startTimeScanFlags+0xd4>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
	}
	if(_1msFlagScanStart)
 8001370:	4b30      	ldr	r3, [pc, #192]	; (8001434 <startTimeScanFlags+0xdc>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <startTimeScanFlags+0x2c>
	{
		_1msFlag = true;
 8001378:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <startTimeScanFlags+0xe0>)
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
		_1msFlagScanStart = false;
 800137e:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <startTimeScanFlags+0xdc>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
	}
	if(_10msFlagScanStart)
 8001384:	4b2d      	ldr	r3, [pc, #180]	; (800143c <startTimeScanFlags+0xe4>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <startTimeScanFlags+0x40>
	{
		_10msFlag = true;
 800138c:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <startTimeScanFlags+0xe8>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
		_10msFlagScanStart = false;
 8001392:	4b2a      	ldr	r3, [pc, #168]	; (800143c <startTimeScanFlags+0xe4>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
	}
	if(_25msFlagScanStart)
 8001398:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <startTimeScanFlags+0xec>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <startTimeScanFlags+0x54>
	{
		_25msFlag = true;
 80013a0:	4b29      	ldr	r3, [pc, #164]	; (8001448 <startTimeScanFlags+0xf0>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
		_25msFlagScanStart = false;
 80013a6:	4b27      	ldr	r3, [pc, #156]	; (8001444 <startTimeScanFlags+0xec>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
	}
	if(_50msFlagScanStart)
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <startTimeScanFlags+0xf4>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <startTimeScanFlags+0x68>
	{
		_50msFlag = true;
 80013b4:	4b26      	ldr	r3, [pc, #152]	; (8001450 <startTimeScanFlags+0xf8>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
		_50msFlagScanStart = false;
 80013ba:	4b24      	ldr	r3, [pc, #144]	; (800144c <startTimeScanFlags+0xf4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
	}
	if(_100msFlagScanStart)
 80013c0:	4b24      	ldr	r3, [pc, #144]	; (8001454 <startTimeScanFlags+0xfc>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <startTimeScanFlags+0x7c>
	{
		_100msFlag = true;
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <startTimeScanFlags+0x100>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
		_100msFlagScanStart = false;
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <startTimeScanFlags+0xfc>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
	}
	if(_250msFlagScanStart)
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <startTimeScanFlags+0x104>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <startTimeScanFlags+0x90>
	{
		_250msFlag = true;
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <startTimeScanFlags+0x108>)
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
		_250msFlagScanStart = false;
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <startTimeScanFlags+0x104>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
	}
	if(_500msFlagScanStart)
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <startTimeScanFlags+0x10c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <startTimeScanFlags+0xa4>
	{
		_500msFlag = true;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <startTimeScanFlags+0x110>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
		_500msFlagScanStart = false;
 80013f6:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <startTimeScanFlags+0x10c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
	}
	if(_1sFlagScanStart)
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <startTimeScanFlags+0x114>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <startTimeScanFlags+0xb8>
	{
		_1sFlag = true;
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <startTimeScanFlags+0x118>)
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
		_1sFlagScanStart = false;
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <startTimeScanFlags+0x114>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
	}
	if(_10sFlagScanStart)
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <startTimeScanFlags+0x11c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <startTimeScanFlags+0xcc>
	{
		_10sFlag = true;
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <startTimeScanFlags+0x120>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
		_10sFlagScanStart = false;
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <startTimeScanFlags+0x11c>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
	}
}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	20000108 	.word	0x20000108
 8001430:	20000112 	.word	0x20000112
 8001434:	20000109 	.word	0x20000109
 8001438:	20000113 	.word	0x20000113
 800143c:	2000010a 	.word	0x2000010a
 8001440:	20000114 	.word	0x20000114
 8001444:	2000010b 	.word	0x2000010b
 8001448:	20000115 	.word	0x20000115
 800144c:	2000010c 	.word	0x2000010c
 8001450:	20000116 	.word	0x20000116
 8001454:	2000010d 	.word	0x2000010d
 8001458:	20000117 	.word	0x20000117
 800145c:	2000010e 	.word	0x2000010e
 8001460:	20000118 	.word	0x20000118
 8001464:	2000010f 	.word	0x2000010f
 8001468:	20000119 	.word	0x20000119
 800146c:	20000110 	.word	0x20000110
 8001470:	2000011a 	.word	0x2000011a
 8001474:	20000111 	.word	0x20000111
 8001478:	2000011b 	.word	0x2000011b

0800147c <clearTimeScanFlags>:

void clearTimeScanFlags(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	_configurableFlag 	= false;
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <clearTimeScanFlags+0x48>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
	_1msFlag 	= false;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <clearTimeScanFlags+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
	_10msFlag 	= false;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <clearTimeScanFlags+0x50>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
	_25msFlag 	= false;
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <clearTimeScanFlags+0x54>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
	_50msFlag 	= false;
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <clearTimeScanFlags+0x58>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
	_100msFlag 	= false;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <clearTimeScanFlags+0x5c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
	_250msFlag 	= false;
 80014a4:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <clearTimeScanFlags+0x60>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
	_500msFlag 	= false;
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <clearTimeScanFlags+0x64>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
	_1sFlag 	= false;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <clearTimeScanFlags+0x68>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
	_10sFlag 	= false;
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <clearTimeScanFlags+0x6c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	20000112 	.word	0x20000112
 80014c8:	20000113 	.word	0x20000113
 80014cc:	20000114 	.word	0x20000114
 80014d0:	20000115 	.word	0x20000115
 80014d4:	20000116 	.word	0x20000116
 80014d8:	20000117 	.word	0x20000117
 80014dc:	20000118 	.word	0x20000118
 80014e0:	20000119 	.word	0x20000119
 80014e4:	2000011a 	.word	0x2000011a
 80014e8:	2000011b 	.word	0x2000011b

080014ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014ec:	480d      	ldr	r0, [pc, #52]	; (8001524 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014ee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014f0:	f7ff feba 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f4:	480c      	ldr	r0, [pc, #48]	; (8001528 <LoopForever+0x6>)
  ldr r1, =_edata
 80014f6:	490d      	ldr	r1, [pc, #52]	; (800152c <LoopForever+0xa>)
  ldr r2, =_sidata
 80014f8:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <LoopForever+0xe>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800150c:	4c0a      	ldr	r4, [pc, #40]	; (8001538 <LoopForever+0x16>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800151a:	f001 ff67 	bl	80033ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800151e:	f7ff fbfd 	bl	8000d1c <main>

08001522 <LoopForever>:

LoopForever:
    b LoopForever
 8001522:	e7fe      	b.n	8001522 <LoopForever>
  ldr   r0, =_estack
 8001524:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001530:	08003490 	.word	0x08003490
  ldr r2, =_sbss
 8001534:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001538:	20000120 	.word	0x20000120

0800153c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC1_IRQHandler>
	...

08001540 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <HAL_Init+0x24>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_Init+0x24>)
 800154a:	2110      	movs	r1, #16
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f809 	bl	8001568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001556:	f7ff fe3f 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	40022000 	.word	0x40022000

08001568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_InitTick+0x5c>)
 8001572:	681c      	ldr	r4, [r3, #0]
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_InitTick+0x60>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	0019      	movs	r1, r3
 800157a:	23fa      	movs	r3, #250	; 0xfa
 800157c:	0098      	lsls	r0, r3, #2
 800157e:	f7fe fdc3 	bl	8000108 <__udivsi3>
 8001582:	0003      	movs	r3, r0
 8001584:	0019      	movs	r1, r3
 8001586:	0020      	movs	r0, r4
 8001588:	f7fe fdbe 	bl	8000108 <__udivsi3>
 800158c:	0003      	movs	r3, r0
 800158e:	0018      	movs	r0, r3
 8001590:	f000 fce3 	bl	8001f5a <HAL_SYSTICK_Config>
 8001594:	1e03      	subs	r3, r0, #0
 8001596:	d001      	beq.n	800159c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e00f      	b.n	80015bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d80b      	bhi.n	80015ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	2301      	movs	r3, #1
 80015a6:	425b      	negs	r3, r3
 80015a8:	2200      	movs	r2, #0
 80015aa:	0018      	movs	r0, r3
 80015ac:	f000 fcb0 	bl	8001f10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_InitTick+0x64>)
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e000      	b.n	80015bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	b003      	add	sp, #12
 80015c2:	bd90      	pop	{r4, r7, pc}
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000008 	.word	0x20000008
 80015cc:	20000004 	.word	0x20000004

080015d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_IncTick+0x1c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	001a      	movs	r2, r3
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_IncTick+0x20>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	18d2      	adds	r2, r2, r3
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_IncTick+0x20>)
 80015e2:	601a      	str	r2, [r3, #0]
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	20000008 	.word	0x20000008
 80015f0:	2000011c 	.word	0x2000011c

080015f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  return uwTick;
 80015f8:	4b02      	ldr	r3, [pc, #8]	; (8001604 <HAL_GetTick+0x10>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	2000011c 	.word	0x2000011c

08001608 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001610:	230f      	movs	r3, #15
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e125      	b.n	8001872 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10a      	bne.n	8001644 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2234      	movs	r2, #52	; 0x34
 8001638:	2100      	movs	r1, #0
 800163a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	0018      	movs	r0, r3
 8001640:	f7ff fa76 	bl	8000b30 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001648:	2210      	movs	r2, #16
 800164a:	4013      	ands	r3, r2
 800164c:	d000      	beq.n	8001650 <HAL_ADC_Init+0x48>
 800164e:	e103      	b.n	8001858 <HAL_ADC_Init+0x250>
 8001650:	230f      	movs	r3, #15
 8001652:	18fb      	adds	r3, r7, r3
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d000      	beq.n	800165c <HAL_ADC_Init+0x54>
 800165a:	e0fd      	b.n	8001858 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2204      	movs	r2, #4
 8001664:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001666:	d000      	beq.n	800166a <HAL_ADC_Init+0x62>
 8001668:	e0f6      	b.n	8001858 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166e:	4a83      	ldr	r2, [pc, #524]	; (800187c <HAL_ADC_Init+0x274>)
 8001670:	4013      	ands	r3, r2
 8001672:	2202      	movs	r2, #2
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2203      	movs	r2, #3
 8001682:	4013      	ands	r3, r2
 8001684:	2b01      	cmp	r3, #1
 8001686:	d112      	bne.n	80016ae <HAL_ADC_Init+0xa6>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2201      	movs	r2, #1
 8001690:	4013      	ands	r3, r2
 8001692:	2b01      	cmp	r3, #1
 8001694:	d009      	beq.n	80016aa <HAL_ADC_Init+0xa2>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	401a      	ands	r2, r3
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d101      	bne.n	80016ae <HAL_ADC_Init+0xa6>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_ADC_Init+0xa8>
 80016ae:	2300      	movs	r3, #0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d116      	bne.n	80016e2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2218      	movs	r2, #24
 80016bc:	4393      	bics	r3, r2
 80016be:	0019      	movs	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	0899      	lsrs	r1, r3, #2
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4964      	ldr	r1, [pc, #400]	; (8001880 <HAL_ADC_Init+0x278>)
 80016ee:	400a      	ands	r2, r1
 80016f0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7e1b      	ldrb	r3, [r3, #24]
 80016f6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7e5b      	ldrb	r3, [r3, #25]
 80016fc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016fe:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7e9b      	ldrb	r3, [r3, #26]
 8001704:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001706:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	2b01      	cmp	r3, #1
 800170e:	d002      	beq.n	8001716 <HAL_ADC_Init+0x10e>
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	015b      	lsls	r3, r3, #5
 8001714:	e000      	b.n	8001718 <HAL_ADC_Init+0x110>
 8001716:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001718:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800171e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d101      	bne.n	800172c <HAL_ADC_Init+0x124>
 8001728:	2304      	movs	r3, #4
 800172a:	e000      	b.n	800172e <HAL_ADC_Init+0x126>
 800172c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800172e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2124      	movs	r1, #36	; 0x24
 8001734:	5c5b      	ldrb	r3, [r3, r1]
 8001736:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001738:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	4313      	orrs	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7edb      	ldrb	r3, [r3, #27]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d115      	bne.n	8001774 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7e9b      	ldrb	r3, [r3, #26]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d105      	bne.n	800175c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	0252      	lsls	r2, r2, #9
 8001756:	4313      	orrs	r3, r2
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	e00b      	b.n	8001774 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001760:	2220      	movs	r2, #32
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176c:	2201      	movs	r2, #1
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69da      	ldr	r2, [r3, #28]
 8001778:	23c2      	movs	r3, #194	; 0xc2
 800177a:	33ff      	adds	r3, #255	; 0xff
 800177c:	429a      	cmp	r2, r3
 800177e:	d007      	beq.n	8001790 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001788:	4313      	orrs	r3, r2
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	4313      	orrs	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68d9      	ldr	r1, [r3, #12]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	430a      	orrs	r2, r1
 800179e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	055b      	lsls	r3, r3, #21
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d01b      	beq.n	80017e4 <HAL_ADC_Init+0x1dc>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d017      	beq.n	80017e4 <HAL_ADC_Init+0x1dc>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d013      	beq.n	80017e4 <HAL_ADC_Init+0x1dc>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d00f      	beq.n	80017e4 <HAL_ADC_Init+0x1dc>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d00b      	beq.n	80017e4 <HAL_ADC_Init+0x1dc>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	d007      	beq.n	80017e4 <HAL_ADC_Init+0x1dc>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	2b06      	cmp	r3, #6
 80017da:	d003      	beq.n	80017e4 <HAL_ADC_Init+0x1dc>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	2b07      	cmp	r3, #7
 80017e2:	d112      	bne.n	800180a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	695a      	ldr	r2, [r3, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2107      	movs	r1, #7
 80017f0:	438a      	bics	r2, r1
 80017f2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6959      	ldr	r1, [r3, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	2207      	movs	r2, #7
 8001800:	401a      	ands	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <HAL_ADC_Init+0x27c>)
 8001812:	4013      	ands	r3, r2
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	429a      	cmp	r2, r3
 8001818:	d10b      	bne.n	8001832 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001824:	2203      	movs	r2, #3
 8001826:	4393      	bics	r3, r2
 8001828:	2201      	movs	r2, #1
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001830:	e01c      	b.n	800186c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001836:	2212      	movs	r2, #18
 8001838:	4393      	bics	r3, r2
 800183a:	2210      	movs	r2, #16
 800183c:	431a      	orrs	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001846:	2201      	movs	r2, #1
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800184e:	230f      	movs	r3, #15
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001856:	e009      	b.n	800186c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185c:	2210      	movs	r2, #16
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001864:	230f      	movs	r3, #15
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800186c:	230f      	movs	r3, #15
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	781b      	ldrb	r3, [r3, #0]
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b004      	add	sp, #16
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	fffffefd 	.word	0xfffffefd
 8001880:	fffe0219 	.word	0xfffe0219
 8001884:	833fffe7 	.word	0x833fffe7

08001888 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001894:	2317      	movs	r3, #23
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2204      	movs	r2, #4
 80018a4:	4013      	ands	r3, r2
 80018a6:	d15e      	bne.n	8001966 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2234      	movs	r2, #52	; 0x34
 80018ac:	5c9b      	ldrb	r3, [r3, r2]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_Start_DMA+0x2e>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e05e      	b.n	8001974 <HAL_ADC_Start_DMA+0xec>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2234      	movs	r2, #52	; 0x34
 80018ba:	2101      	movs	r1, #1
 80018bc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	7e5b      	ldrb	r3, [r3, #25]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d007      	beq.n	80018d6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80018c6:	2317      	movs	r3, #23
 80018c8:	18fc      	adds	r4, r7, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 f96b 	bl	8001ba8 <ADC_Enable>
 80018d2:	0003      	movs	r3, r0
 80018d4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018d6:	2317      	movs	r3, #23
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d146      	bne.n	800196e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e4:	4a25      	ldr	r2, [pc, #148]	; (800197c <HAL_ADC_Start_DMA+0xf4>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	0052      	lsls	r2, r2, #1
 80018ec:	431a      	orrs	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2234      	movs	r2, #52	; 0x34
 80018fc:	2100      	movs	r1, #0
 80018fe:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <HAL_ADC_Start_DMA+0xf8>)
 8001906:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <HAL_ADC_Start_DMA+0xfc>)
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	4a1c      	ldr	r2, [pc, #112]	; (8001988 <HAL_ADC_Start_DMA+0x100>)
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	221c      	movs	r2, #28
 800191e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2110      	movs	r1, #16
 800192c:	430a      	orrs	r2, r1
 800192e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2101      	movs	r1, #1
 800193c:	430a      	orrs	r2, r1
 800193e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3340      	adds	r3, #64	; 0x40
 800194a:	0019      	movs	r1, r3
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f000 fb58 	bl	8002004 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2104      	movs	r1, #4
 8001960:	430a      	orrs	r2, r1
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	e003      	b.n	800196e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001966:	2317      	movs	r3, #23
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	2202      	movs	r2, #2
 800196c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800196e:	2317      	movs	r3, #23
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	781b      	ldrb	r3, [r3, #0]
}
 8001974:	0018      	movs	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	b007      	add	sp, #28
 800197a:	bd90      	pop	{r4, r7, pc}
 800197c:	fffff0fe 	.word	0xfffff0fe
 8001980:	08001cb1 	.word	0x08001cb1
 8001984:	08001d65 	.word	0x08001d65
 8001988:	08001d83 	.word	0x08001d83

0800198c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b002      	add	sp, #8
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b002      	add	sp, #8
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019b4:	46c0      	nop			; (mov r8, r8)
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b002      	add	sp, #8
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c6:	230f      	movs	r3, #15
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	055b      	lsls	r3, r3, #21
 80019da:	429a      	cmp	r2, r3
 80019dc:	d011      	beq.n	8001a02 <HAL_ADC_ConfigChannel+0x46>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d00d      	beq.n	8001a02 <HAL_ADC_ConfigChannel+0x46>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d009      	beq.n	8001a02 <HAL_ADC_ConfigChannel+0x46>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d005      	beq.n	8001a02 <HAL_ADC_ConfigChannel+0x46>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d001      	beq.n	8001a02 <HAL_ADC_ConfigChannel+0x46>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2234      	movs	r2, #52	; 0x34
 8001a06:	5c9b      	ldrb	r3, [r3, r2]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x54>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e0bb      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x1cc>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2234      	movs	r2, #52	; 0x34
 8001a14:	2101      	movs	r1, #1
 8001a16:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2204      	movs	r2, #4
 8001a20:	4013      	ands	r3, r2
 8001a22:	d000      	beq.n	8001a26 <HAL_ADC_ConfigChannel+0x6a>
 8001a24:	e09f      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4a59      	ldr	r2, [pc, #356]	; (8001b90 <HAL_ADC_ConfigChannel+0x1d4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d100      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x76>
 8001a30:	e077      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	055b      	lsls	r3, r3, #21
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d037      	beq.n	8001ac4 <HAL_ADC_ConfigChannel+0x108>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d033      	beq.n	8001ac4 <HAL_ADC_ConfigChannel+0x108>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d02f      	beq.n	8001ac4 <HAL_ADC_ConfigChannel+0x108>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d02b      	beq.n	8001ac4 <HAL_ADC_ConfigChannel+0x108>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d027      	beq.n	8001ac4 <HAL_ADC_ConfigChannel+0x108>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	d023      	beq.n	8001ac4 <HAL_ADC_ConfigChannel+0x108>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	2b06      	cmp	r3, #6
 8001a82:	d01f      	beq.n	8001ac4 <HAL_ADC_ConfigChannel+0x108>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	2b07      	cmp	r3, #7
 8001a8a:	d01b      	beq.n	8001ac4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	2107      	movs	r1, #7
 8001a98:	400b      	ands	r3, r1
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d012      	beq.n	8001ac4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2107      	movs	r1, #7
 8001aaa:	438a      	bics	r2, r1
 8001aac:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6959      	ldr	r1, [r3, #20]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2207      	movs	r2, #7
 8001aba:	401a      	ands	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b10      	cmp	r3, #16
 8001aca:	d003      	beq.n	8001ad4 <HAL_ADC_ConfigChannel+0x118>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b11      	cmp	r3, #17
 8001ad2:	d152      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <HAL_ADC_ConfigChannel+0x1d8>)
 8001ad6:	6819      	ldr	r1, [r3, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d102      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x12a>
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	041b      	lsls	r3, r3, #16
 8001ae4:	e001      	b.n	8001aea <HAL_ADC_ConfigChannel+0x12e>
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	03db      	lsls	r3, r3, #15
 8001aea:	4a2a      	ldr	r2, [pc, #168]	; (8001b94 <HAL_ADC_ConfigChannel+0x1d8>)
 8001aec:	430b      	orrs	r3, r1
 8001aee:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b10      	cmp	r3, #16
 8001af6:	d140      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001af8:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <HAL_ADC_ConfigChannel+0x1dc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4927      	ldr	r1, [pc, #156]	; (8001b9c <HAL_ADC_ConfigChannel+0x1e0>)
 8001afe:	0018      	movs	r0, r3
 8001b00:	f7fe fb02 	bl	8000108 <__udivsi3>
 8001b04:	0003      	movs	r3, r0
 8001b06:	001a      	movs	r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	189b      	adds	r3, r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b12:	e002      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f9      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x158>
 8001b20:	e02b      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	4099      	lsls	r1, r3
 8001b30:	000b      	movs	r3, r1
 8001b32:	43d9      	mvns	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	400a      	ands	r2, r1
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b10      	cmp	r3, #16
 8001b42:	d003      	beq.n	8001b4c <HAL_ADC_ConfigChannel+0x190>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b11      	cmp	r3, #17
 8001b4a:	d116      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_ADC_ConfigChannel+0x1d8>)
 8001b4e:	6819      	ldr	r1, [r3, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b10      	cmp	r3, #16
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x1a0>
 8001b58:	4a11      	ldr	r2, [pc, #68]	; (8001ba0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b5a:	e000      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x1a2>
 8001b5c:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <HAL_ADC_ConfigChannel+0x1d8>)
 8001b60:	400a      	ands	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e009      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001b72:	230f      	movs	r3, #15
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2234      	movs	r2, #52	; 0x34
 8001b7e:	2100      	movs	r1, #0
 8001b80:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001b82:	230f      	movs	r3, #15
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	781b      	ldrb	r3, [r3, #0]
}
 8001b88:	0018      	movs	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b004      	add	sp, #16
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	00001001 	.word	0x00001001
 8001b94:	40012708 	.word	0x40012708
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	000f4240 	.word	0x000f4240
 8001ba0:	ff7fffff 	.word	0xff7fffff
 8001ba4:	ffbfffff 	.word	0xffbfffff

08001ba8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d112      	bne.n	8001bec <ADC_Enable+0x44>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d009      	beq.n	8001be8 <ADC_Enable+0x40>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	401a      	ands	r2, r3
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d101      	bne.n	8001bec <ADC_Enable+0x44>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <ADC_Enable+0x46>
 8001bec:	2300      	movs	r3, #0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d152      	bne.n	8001c98 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a2a      	ldr	r2, [pc, #168]	; (8001ca4 <ADC_Enable+0xfc>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d00d      	beq.n	8001c1a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c02:	2210      	movs	r2, #16
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0e:	2201      	movs	r2, #1
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e03f      	b.n	8001c9a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2101      	movs	r1, #1
 8001c26:	430a      	orrs	r2, r1
 8001c28:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <ADC_Enable+0x100>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	491f      	ldr	r1, [pc, #124]	; (8001cac <ADC_Enable+0x104>)
 8001c30:	0018      	movs	r0, r3
 8001c32:	f7fe fa69 	bl	8000108 <__udivsi3>
 8001c36:	0003      	movs	r3, r0
 8001c38:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c3a:	e002      	b.n	8001c42 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f9      	bne.n	8001c3c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c48:	f7ff fcd4 	bl	80015f4 <HAL_GetTick>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c50:	e01b      	b.n	8001c8a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c52:	f7ff fccf 	bl	80015f4 <HAL_GetTick>
 8001c56:	0002      	movs	r2, r0
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d914      	bls.n	8001c8a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2201      	movs	r2, #1
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d00d      	beq.n	8001c8a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c72:	2210      	movs	r2, #16
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7e:	2201      	movs	r2, #1
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e007      	b.n	8001c9a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2201      	movs	r2, #1
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d1dc      	bne.n	8001c52 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b004      	add	sp, #16
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	80000017 	.word	0x80000017
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	000f4240 	.word	0x000f4240

08001cb0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	2250      	movs	r2, #80	; 0x50
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d140      	bne.n	8001d4a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	0092      	lsls	r2, r2, #2
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	23c0      	movs	r3, #192	; 0xc0
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d12d      	bne.n	8001d40 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d129      	bne.n	8001d40 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d122      	bne.n	8001d40 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2204      	movs	r2, #4
 8001d02:	4013      	ands	r3, r2
 8001d04:	d110      	bne.n	8001d28 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	210c      	movs	r1, #12
 8001d12:	438a      	bics	r2, r1
 8001d14:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1a:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <ADC_DMAConvCplt+0xb0>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2201      	movs	r2, #1
 8001d20:	431a      	orrs	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	639a      	str	r2, [r3, #56]	; 0x38
 8001d26:	e00b      	b.n	8001d40 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d38:	2201      	movs	r2, #1
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	0018      	movs	r0, r3
 8001d44:	f7ff fe22 	bl	800198c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001d48:	e005      	b.n	8001d56 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	0010      	movs	r0, r2
 8001d54:	4798      	blx	r3
}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b004      	add	sp, #16
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	fffffefe 	.word	0xfffffefe

08001d64 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7ff fe11 	bl	800199c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b004      	add	sp, #16
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	431a      	orrs	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	2204      	movs	r2, #4
 8001da2:	431a      	orrs	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	0018      	movs	r0, r3
 8001dac:	f7ff fdfe 	bl	80019ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001db0:	46c0      	nop			; (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b004      	add	sp, #16
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	1dfb      	adds	r3, r7, #7
 8001dc2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dc4:	1dfb      	adds	r3, r7, #7
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8001dca:	d809      	bhi.n	8001de0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dcc:	1dfb      	adds	r3, r7, #7
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	001a      	movs	r2, r3
 8001dd2:	231f      	movs	r3, #31
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <__NVIC_EnableIRQ+0x30>)
 8001dd8:	2101      	movs	r1, #1
 8001dda:	4091      	lsls	r1, r2
 8001ddc:	000a      	movs	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]
  }
}
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b002      	add	sp, #8
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	0002      	movs	r2, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	1dfb      	adds	r3, r7, #7
 8001df8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dfa:	1dfb      	adds	r3, r7, #7
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8001e00:	d828      	bhi.n	8001e54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e02:	4a2f      	ldr	r2, [pc, #188]	; (8001ec0 <__NVIC_SetPriority+0xd4>)
 8001e04:	1dfb      	adds	r3, r7, #7
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b25b      	sxtb	r3, r3
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	33c0      	adds	r3, #192	; 0xc0
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	589b      	ldr	r3, [r3, r2]
 8001e12:	1dfa      	adds	r2, r7, #7
 8001e14:	7812      	ldrb	r2, [r2, #0]
 8001e16:	0011      	movs	r1, r2
 8001e18:	2203      	movs	r2, #3
 8001e1a:	400a      	ands	r2, r1
 8001e1c:	00d2      	lsls	r2, r2, #3
 8001e1e:	21ff      	movs	r1, #255	; 0xff
 8001e20:	4091      	lsls	r1, r2
 8001e22:	000a      	movs	r2, r1
 8001e24:	43d2      	mvns	r2, r2
 8001e26:	401a      	ands	r2, r3
 8001e28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	019b      	lsls	r3, r3, #6
 8001e2e:	22ff      	movs	r2, #255	; 0xff
 8001e30:	401a      	ands	r2, r3
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	0018      	movs	r0, r3
 8001e38:	2303      	movs	r3, #3
 8001e3a:	4003      	ands	r3, r0
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e40:	481f      	ldr	r0, [pc, #124]	; (8001ec0 <__NVIC_SetPriority+0xd4>)
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b25b      	sxtb	r3, r3
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	33c0      	adds	r3, #192	; 0xc0
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e52:	e031      	b.n	8001eb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e54:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <__NVIC_SetPriority+0xd8>)
 8001e56:	1dfb      	adds	r3, r7, #7
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	230f      	movs	r3, #15
 8001e5e:	400b      	ands	r3, r1
 8001e60:	3b08      	subs	r3, #8
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	3306      	adds	r3, #6
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	18d3      	adds	r3, r2, r3
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	1dfa      	adds	r2, r7, #7
 8001e70:	7812      	ldrb	r2, [r2, #0]
 8001e72:	0011      	movs	r1, r2
 8001e74:	2203      	movs	r2, #3
 8001e76:	400a      	ands	r2, r1
 8001e78:	00d2      	lsls	r2, r2, #3
 8001e7a:	21ff      	movs	r1, #255	; 0xff
 8001e7c:	4091      	lsls	r1, r2
 8001e7e:	000a      	movs	r2, r1
 8001e80:	43d2      	mvns	r2, r2
 8001e82:	401a      	ands	r2, r3
 8001e84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	019b      	lsls	r3, r3, #6
 8001e8a:	22ff      	movs	r2, #255	; 0xff
 8001e8c:	401a      	ands	r2, r3
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	0018      	movs	r0, r3
 8001e94:	2303      	movs	r3, #3
 8001e96:	4003      	ands	r3, r0
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e9c:	4809      	ldr	r0, [pc, #36]	; (8001ec4 <__NVIC_SetPriority+0xd8>)
 8001e9e:	1dfb      	adds	r3, r7, #7
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	001c      	movs	r4, r3
 8001ea4:	230f      	movs	r3, #15
 8001ea6:	4023      	ands	r3, r4
 8001ea8:	3b08      	subs	r3, #8
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	430a      	orrs	r2, r1
 8001eae:	3306      	adds	r3, #6
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	18c3      	adds	r3, r0, r3
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	601a      	str	r2, [r3, #0]
}
 8001eb8:	46c0      	nop			; (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b003      	add	sp, #12
 8001ebe:	bd90      	pop	{r4, r7, pc}
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	1e5a      	subs	r2, r3, #1
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	045b      	lsls	r3, r3, #17
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d301      	bcc.n	8001ee0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001edc:	2301      	movs	r3, #1
 8001ede:	e010      	b.n	8001f02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <SysTick_Config+0x44>)
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	3a01      	subs	r2, #1
 8001ee6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee8:	2301      	movs	r3, #1
 8001eea:	425b      	negs	r3, r3
 8001eec:	2103      	movs	r1, #3
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f7ff ff7c 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <SysTick_Config+0x44>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efa:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <SysTick_Config+0x44>)
 8001efc:	2207      	movs	r2, #7
 8001efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	0018      	movs	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b002      	add	sp, #8
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	e000e010 	.word	0xe000e010

08001f10 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	210f      	movs	r1, #15
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	1c02      	adds	r2, r0, #0
 8001f20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	187b      	adds	r3, r7, r1
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b25b      	sxtb	r3, r3
 8001f2a:	0011      	movs	r1, r2
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff ff5d 	bl	8001dec <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b004      	add	sp, #16
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	0002      	movs	r2, r0
 8001f42:	1dfb      	adds	r3, r7, #7
 8001f44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f7ff ff33 	bl	8001db8 <__NVIC_EnableIRQ>
}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b002      	add	sp, #8
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f7ff ffaf 	bl	8001ec8 <SysTick_Config>
 8001f6a:	0003      	movs	r3, r0
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b002      	add	sp, #8
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e036      	b.n	8001ff8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2221      	movs	r2, #33	; 0x21
 8001f8e:	2102      	movs	r1, #2
 8001f90:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4a18      	ldr	r2, [pc, #96]	; (8002000 <HAL_DMA_Init+0x8c>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f000 f946 	bl	800226c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2221      	movs	r2, #33	; 0x21
 8001fea:	2101      	movs	r1, #1
 8001fec:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b004      	add	sp, #16
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	ffffc00f 	.word	0xffffc00f

08002004 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002012:	2317      	movs	r3, #23
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2220      	movs	r2, #32
 800201e:	5c9b      	ldrb	r3, [r3, r2]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_DMA_Start_IT+0x24>
 8002024:	2302      	movs	r3, #2
 8002026:	e04f      	b.n	80020c8 <HAL_DMA_Start_IT+0xc4>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	2101      	movs	r1, #1
 800202e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2221      	movs	r2, #33	; 0x21
 8002034:	5c9b      	ldrb	r3, [r3, r2]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	d13a      	bne.n	80020b2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2221      	movs	r2, #33	; 0x21
 8002040:	2102      	movs	r1, #2
 8002042:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	438a      	bics	r2, r1
 8002058:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f8d7 	bl	8002214 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	2b00      	cmp	r3, #0
 800206c:	d008      	beq.n	8002080 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	210e      	movs	r1, #14
 800207a:	430a      	orrs	r2, r1
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e00f      	b.n	80020a0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	210a      	movs	r1, #10
 800208c:	430a      	orrs	r2, r1
 800208e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2104      	movs	r1, #4
 800209c:	438a      	bics	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2101      	movs	r1, #1
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	e007      	b.n	80020c2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2220      	movs	r2, #32
 80020b6:	2100      	movs	r1, #0
 80020b8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020ba:	2317      	movs	r3, #23
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	2202      	movs	r2, #2
 80020c0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80020c2:	2317      	movs	r3, #23
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	781b      	ldrb	r3, [r3, #0]
}
 80020c8:	0018      	movs	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b006      	add	sp, #24
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	2204      	movs	r2, #4
 80020ee:	409a      	lsls	r2, r3
 80020f0:	0013      	movs	r3, r2
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4013      	ands	r3, r2
 80020f6:	d024      	beq.n	8002142 <HAL_DMA_IRQHandler+0x72>
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2204      	movs	r2, #4
 80020fc:	4013      	ands	r3, r2
 80020fe:	d020      	beq.n	8002142 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2220      	movs	r2, #32
 8002108:	4013      	ands	r3, r2
 800210a:	d107      	bne.n	800211c <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2104      	movs	r1, #4
 8002118:	438a      	bics	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	2104      	movs	r1, #4
 8002126:	4091      	lsls	r1, r2
 8002128:	000a      	movs	r2, r1
 800212a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	2b00      	cmp	r3, #0
 8002132:	d100      	bne.n	8002136 <HAL_DMA_IRQHandler+0x66>
 8002134:	e06a      	b.n	800220c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	0010      	movs	r0, r2
 800213e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002140:	e064      	b.n	800220c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	2202      	movs	r2, #2
 8002148:	409a      	lsls	r2, r3
 800214a:	0013      	movs	r3, r2
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4013      	ands	r3, r2
 8002150:	d02b      	beq.n	80021aa <HAL_DMA_IRQHandler+0xda>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2202      	movs	r2, #2
 8002156:	4013      	ands	r3, r2
 8002158:	d027      	beq.n	80021aa <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2220      	movs	r2, #32
 8002162:	4013      	ands	r3, r2
 8002164:	d10b      	bne.n	800217e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	210a      	movs	r1, #10
 8002172:	438a      	bics	r2, r1
 8002174:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2221      	movs	r2, #33	; 0x21
 800217a:	2101      	movs	r1, #1
 800217c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	2102      	movs	r1, #2
 8002188:	4091      	lsls	r1, r2
 800218a:	000a      	movs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2220      	movs	r2, #32
 8002192:	2100      	movs	r1, #0
 8002194:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	2b00      	cmp	r3, #0
 800219c:	d036      	beq.n	800220c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	0010      	movs	r0, r2
 80021a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80021a8:	e030      	b.n	800220c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	2208      	movs	r2, #8
 80021b0:	409a      	lsls	r2, r3
 80021b2:	0013      	movs	r3, r2
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4013      	ands	r3, r2
 80021b8:	d028      	beq.n	800220c <HAL_DMA_IRQHandler+0x13c>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2208      	movs	r2, #8
 80021be:	4013      	ands	r3, r2
 80021c0:	d024      	beq.n	800220c <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	210e      	movs	r1, #14
 80021ce:	438a      	bics	r2, r1
 80021d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	2101      	movs	r1, #1
 80021dc:	4091      	lsls	r1, r2
 80021de:	000a      	movs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2221      	movs	r2, #33	; 0x21
 80021ec:	2101      	movs	r1, #1
 80021ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	2100      	movs	r1, #0
 80021f6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	0010      	movs	r0, r2
 8002208:	4798      	blx	r3
    }
  }
}
 800220a:	e7ff      	b.n	800220c <HAL_DMA_IRQHandler+0x13c>
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	b004      	add	sp, #16
 8002212:	bd80      	pop	{r7, pc}

08002214 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222a:	2101      	movs	r1, #1
 800222c:	4091      	lsls	r1, r2
 800222e:	000a      	movs	r2, r1
 8002230:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b10      	cmp	r3, #16
 8002240:	d108      	bne.n	8002254 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002252:	e007      	b.n	8002264 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	60da      	str	r2, [r3, #12]
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b004      	add	sp, #16
 800226a:	bd80      	pop	{r7, pc}

0800226c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a08      	ldr	r2, [pc, #32]	; (800229c <DMA_CalcBaseAndBitshift+0x30>)
 800227a:	4694      	mov	ip, r2
 800227c:	4463      	add	r3, ip
 800227e:	2114      	movs	r1, #20
 8002280:	0018      	movs	r0, r3
 8002282:	f7fd ff41 	bl	8000108 <__udivsi3>
 8002286:	0003      	movs	r3, r0
 8002288:	009a      	lsls	r2, r3, #2
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a03      	ldr	r2, [pc, #12]	; (80022a0 <DMA_CalcBaseAndBitshift+0x34>)
 8002292:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}
 800229c:	bffdfff8 	.word	0xbffdfff8
 80022a0:	40020000 	.word	0x40020000

080022a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b2:	e14f      	b.n	8002554 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4091      	lsls	r1, r2
 80022be:	000a      	movs	r2, r1
 80022c0:	4013      	ands	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d100      	bne.n	80022cc <HAL_GPIO_Init+0x28>
 80022ca:	e140      	b.n	800254e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2203      	movs	r2, #3
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d005      	beq.n	80022e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2203      	movs	r2, #3
 80022de:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d130      	bne.n	8002346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	409a      	lsls	r2, r3
 80022f2:	0013      	movs	r3, r2
 80022f4:	43da      	mvns	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	409a      	lsls	r2, r3
 8002306:	0013      	movs	r3, r2
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800231a:	2201      	movs	r2, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	409a      	lsls	r2, r3
 8002320:	0013      	movs	r3, r2
 8002322:	43da      	mvns	r2, r3
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	2201      	movs	r2, #1
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
 8002338:	0013      	movs	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2203      	movs	r2, #3
 800234c:	4013      	ands	r3, r2
 800234e:	2b03      	cmp	r3, #3
 8002350:	d017      	beq.n	8002382 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	409a      	lsls	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	43da      	mvns	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	409a      	lsls	r2, r3
 8002374:	0013      	movs	r3, r2
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2203      	movs	r2, #3
 8002388:	4013      	ands	r3, r2
 800238a:	2b02      	cmp	r3, #2
 800238c:	d123      	bne.n	80023d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	0092      	lsls	r2, r2, #2
 8002398:	58d3      	ldr	r3, [r2, r3]
 800239a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2207      	movs	r2, #7
 80023a0:	4013      	ands	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	43da      	mvns	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2107      	movs	r1, #7
 80023ba:	400b      	ands	r3, r1
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	409a      	lsls	r2, r3
 80023c0:	0013      	movs	r3, r2
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	08da      	lsrs	r2, r3, #3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3208      	adds	r2, #8
 80023d0:	0092      	lsls	r2, r2, #2
 80023d2:	6939      	ldr	r1, [r7, #16]
 80023d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	2203      	movs	r2, #3
 80023e2:	409a      	lsls	r2, r3
 80023e4:	0013      	movs	r3, r2
 80023e6:	43da      	mvns	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2203      	movs	r2, #3
 80023f4:	401a      	ands	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	409a      	lsls	r2, r3
 80023fc:	0013      	movs	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	23c0      	movs	r3, #192	; 0xc0
 8002410:	029b      	lsls	r3, r3, #10
 8002412:	4013      	ands	r3, r2
 8002414:	d100      	bne.n	8002418 <HAL_GPIO_Init+0x174>
 8002416:	e09a      	b.n	800254e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002418:	4b54      	ldr	r3, [pc, #336]	; (800256c <HAL_GPIO_Init+0x2c8>)
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_GPIO_Init+0x2c8>)
 800241e:	2101      	movs	r1, #1
 8002420:	430a      	orrs	r2, r1
 8002422:	619a      	str	r2, [r3, #24]
 8002424:	4b51      	ldr	r3, [pc, #324]	; (800256c <HAL_GPIO_Init+0x2c8>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	2201      	movs	r2, #1
 800242a:	4013      	ands	r3, r2
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002430:	4a4f      	ldr	r2, [pc, #316]	; (8002570 <HAL_GPIO_Init+0x2cc>)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	589b      	ldr	r3, [r3, r2]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2203      	movs	r2, #3
 8002442:	4013      	ands	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	220f      	movs	r2, #15
 8002448:	409a      	lsls	r2, r3
 800244a:	0013      	movs	r3, r2
 800244c:	43da      	mvns	r2, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	2390      	movs	r3, #144	; 0x90
 8002458:	05db      	lsls	r3, r3, #23
 800245a:	429a      	cmp	r2, r3
 800245c:	d013      	beq.n	8002486 <HAL_GPIO_Init+0x1e2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a44      	ldr	r2, [pc, #272]	; (8002574 <HAL_GPIO_Init+0x2d0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00d      	beq.n	8002482 <HAL_GPIO_Init+0x1de>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a43      	ldr	r2, [pc, #268]	; (8002578 <HAL_GPIO_Init+0x2d4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_Init+0x1da>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a42      	ldr	r2, [pc, #264]	; (800257c <HAL_GPIO_Init+0x2d8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_GPIO_Init+0x1d6>
 8002476:	2303      	movs	r3, #3
 8002478:	e006      	b.n	8002488 <HAL_GPIO_Init+0x1e4>
 800247a:	2305      	movs	r3, #5
 800247c:	e004      	b.n	8002488 <HAL_GPIO_Init+0x1e4>
 800247e:	2302      	movs	r3, #2
 8002480:	e002      	b.n	8002488 <HAL_GPIO_Init+0x1e4>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <HAL_GPIO_Init+0x1e4>
 8002486:	2300      	movs	r3, #0
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	2103      	movs	r1, #3
 800248c:	400a      	ands	r2, r1
 800248e:	0092      	lsls	r2, r2, #2
 8002490:	4093      	lsls	r3, r2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002498:	4935      	ldr	r1, [pc, #212]	; (8002570 <HAL_GPIO_Init+0x2cc>)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	3302      	adds	r3, #2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024a6:	4b36      	ldr	r3, [pc, #216]	; (8002580 <HAL_GPIO_Init+0x2dc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	43da      	mvns	r2, r3
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	035b      	lsls	r3, r3, #13
 80024be:	4013      	ands	r3, r2
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024ca:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_GPIO_Init+0x2dc>)
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_GPIO_Init+0x2dc>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43da      	mvns	r2, r3
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	039b      	lsls	r3, r3, #14
 80024e8:	4013      	ands	r3, r2
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024f4:	4b22      	ldr	r3, [pc, #136]	; (8002580 <HAL_GPIO_Init+0x2dc>)
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80024fa:	4b21      	ldr	r3, [pc, #132]	; (8002580 <HAL_GPIO_Init+0x2dc>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43da      	mvns	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	029b      	lsls	r3, r3, #10
 8002512:	4013      	ands	r3, r2
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800251e:	4b18      	ldr	r3, [pc, #96]	; (8002580 <HAL_GPIO_Init+0x2dc>)
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002524:	4b16      	ldr	r3, [pc, #88]	; (8002580 <HAL_GPIO_Init+0x2dc>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43da      	mvns	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	025b      	lsls	r3, r3, #9
 800253c:	4013      	ands	r3, r2
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002548:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <HAL_GPIO_Init+0x2dc>)
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3301      	adds	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	40da      	lsrs	r2, r3
 800255c:	1e13      	subs	r3, r2, #0
 800255e:	d000      	beq.n	8002562 <HAL_GPIO_Init+0x2be>
 8002560:	e6a8      	b.n	80022b4 <HAL_GPIO_Init+0x10>
  } 
}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b006      	add	sp, #24
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	40010000 	.word	0x40010000
 8002574:	48000400 	.word	0x48000400
 8002578:	48000800 	.word	0x48000800
 800257c:	48000c00 	.word	0x48000c00
 8002580:	40010400 	.word	0x40010400

08002584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	0008      	movs	r0, r1
 800258e:	0011      	movs	r1, r2
 8002590:	1cbb      	adds	r3, r7, #2
 8002592:	1c02      	adds	r2, r0, #0
 8002594:	801a      	strh	r2, [r3, #0]
 8002596:	1c7b      	adds	r3, r7, #1
 8002598:	1c0a      	adds	r2, r1, #0
 800259a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800259c:	1c7b      	adds	r3, r7, #1
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d004      	beq.n	80025ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025a4:	1cbb      	adds	r3, r7, #2
 80025a6:	881a      	ldrh	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025ac:	e003      	b.n	80025b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ae:	1cbb      	adds	r3, r7, #2
 80025b0:	881a      	ldrh	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b002      	add	sp, #8
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e301      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2201      	movs	r2, #1
 80025d8:	4013      	ands	r3, r2
 80025da:	d100      	bne.n	80025de <HAL_RCC_OscConfig+0x1e>
 80025dc:	e08d      	b.n	80026fa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025de:	4bc3      	ldr	r3, [pc, #780]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	220c      	movs	r2, #12
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d00e      	beq.n	8002608 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025ea:	4bc0      	ldr	r3, [pc, #768]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	220c      	movs	r2, #12
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d116      	bne.n	8002624 <HAL_RCC_OscConfig+0x64>
 80025f6:	4bbd      	ldr	r3, [pc, #756]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	025b      	lsls	r3, r3, #9
 80025fe:	401a      	ands	r2, r3
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	025b      	lsls	r3, r3, #9
 8002604:	429a      	cmp	r2, r3
 8002606:	d10d      	bne.n	8002624 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	4bb8      	ldr	r3, [pc, #736]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	029b      	lsls	r3, r3, #10
 8002610:	4013      	ands	r3, r2
 8002612:	d100      	bne.n	8002616 <HAL_RCC_OscConfig+0x56>
 8002614:	e070      	b.n	80026f8 <HAL_RCC_OscConfig+0x138>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d000      	beq.n	8002620 <HAL_RCC_OscConfig+0x60>
 800261e:	e06b      	b.n	80026f8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e2d8      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d107      	bne.n	800263c <HAL_RCC_OscConfig+0x7c>
 800262c:	4baf      	ldr	r3, [pc, #700]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4bae      	ldr	r3, [pc, #696]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002632:	2180      	movs	r1, #128	; 0x80
 8002634:	0249      	lsls	r1, r1, #9
 8002636:	430a      	orrs	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	e02f      	b.n	800269c <HAL_RCC_OscConfig+0xdc>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10c      	bne.n	800265e <HAL_RCC_OscConfig+0x9e>
 8002644:	4ba9      	ldr	r3, [pc, #676]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4ba8      	ldr	r3, [pc, #672]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 800264a:	49a9      	ldr	r1, [pc, #676]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 800264c:	400a      	ands	r2, r1
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	4ba6      	ldr	r3, [pc, #664]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4ba5      	ldr	r3, [pc, #660]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002656:	49a7      	ldr	r1, [pc, #668]	; (80028f4 <HAL_RCC_OscConfig+0x334>)
 8002658:	400a      	ands	r2, r1
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	e01e      	b.n	800269c <HAL_RCC_OscConfig+0xdc>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b05      	cmp	r3, #5
 8002664:	d10e      	bne.n	8002684 <HAL_RCC_OscConfig+0xc4>
 8002666:	4ba1      	ldr	r3, [pc, #644]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4ba0      	ldr	r3, [pc, #640]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 800266c:	2180      	movs	r1, #128	; 0x80
 800266e:	02c9      	lsls	r1, r1, #11
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	4b9d      	ldr	r3, [pc, #628]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b9c      	ldr	r3, [pc, #624]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 800267a:	2180      	movs	r1, #128	; 0x80
 800267c:	0249      	lsls	r1, r1, #9
 800267e:	430a      	orrs	r2, r1
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0xdc>
 8002684:	4b99      	ldr	r3, [pc, #612]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b98      	ldr	r3, [pc, #608]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 800268a:	4999      	ldr	r1, [pc, #612]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 800268c:	400a      	ands	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	4b96      	ldr	r3, [pc, #600]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b95      	ldr	r3, [pc, #596]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002696:	4997      	ldr	r1, [pc, #604]	; (80028f4 <HAL_RCC_OscConfig+0x334>)
 8002698:	400a      	ands	r2, r1
 800269a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d014      	beq.n	80026ce <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe ffa6 	bl	80015f4 <HAL_GetTick>
 80026a8:	0003      	movs	r3, r0
 80026aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ae:	f7fe ffa1 	bl	80015f4 <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b64      	cmp	r3, #100	; 0x64
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e28a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c0:	4b8a      	ldr	r3, [pc, #552]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	4013      	ands	r3, r2
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0xee>
 80026cc:	e015      	b.n	80026fa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7fe ff91 	bl	80015f4 <HAL_GetTick>
 80026d2:	0003      	movs	r3, r0
 80026d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d8:	f7fe ff8c 	bl	80015f4 <HAL_GetTick>
 80026dc:	0002      	movs	r2, r0
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e275      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ea:	4b80      	ldr	r3, [pc, #512]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	029b      	lsls	r3, r3, #10
 80026f2:	4013      	ands	r3, r2
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x118>
 80026f6:	e000      	b.n	80026fa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2202      	movs	r2, #2
 8002700:	4013      	ands	r3, r2
 8002702:	d100      	bne.n	8002706 <HAL_RCC_OscConfig+0x146>
 8002704:	e069      	b.n	80027da <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002706:	4b79      	ldr	r3, [pc, #484]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	220c      	movs	r2, #12
 800270c:	4013      	ands	r3, r2
 800270e:	d00b      	beq.n	8002728 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002710:	4b76      	ldr	r3, [pc, #472]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	220c      	movs	r2, #12
 8002716:	4013      	ands	r3, r2
 8002718:	2b08      	cmp	r3, #8
 800271a:	d11c      	bne.n	8002756 <HAL_RCC_OscConfig+0x196>
 800271c:	4b73      	ldr	r3, [pc, #460]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	025b      	lsls	r3, r3, #9
 8002724:	4013      	ands	r3, r2
 8002726:	d116      	bne.n	8002756 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002728:	4b70      	ldr	r3, [pc, #448]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2202      	movs	r2, #2
 800272e:	4013      	ands	r3, r2
 8002730:	d005      	beq.n	800273e <HAL_RCC_OscConfig+0x17e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e24b      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273e:	4b6b      	ldr	r3, [pc, #428]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	22f8      	movs	r2, #248	; 0xf8
 8002744:	4393      	bics	r3, r2
 8002746:	0019      	movs	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	00da      	lsls	r2, r3, #3
 800274e:	4b67      	ldr	r3, [pc, #412]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002754:	e041      	b.n	80027da <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d024      	beq.n	80027a8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800275e:	4b63      	ldr	r3, [pc, #396]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b62      	ldr	r3, [pc, #392]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002764:	2101      	movs	r1, #1
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7fe ff43 	bl	80015f4 <HAL_GetTick>
 800276e:	0003      	movs	r3, r0
 8002770:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002774:	f7fe ff3e 	bl	80015f4 <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e227      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002786:	4b59      	ldr	r3, [pc, #356]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2202      	movs	r2, #2
 800278c:	4013      	ands	r3, r2
 800278e:	d0f1      	beq.n	8002774 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	4b56      	ldr	r3, [pc, #344]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	22f8      	movs	r2, #248	; 0xf8
 8002796:	4393      	bics	r3, r2
 8002798:	0019      	movs	r1, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00da      	lsls	r2, r3, #3
 80027a0:	4b52      	ldr	r3, [pc, #328]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 80027a2:	430a      	orrs	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e018      	b.n	80027da <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a8:	4b50      	ldr	r3, [pc, #320]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b4f      	ldr	r3, [pc, #316]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 80027ae:	2101      	movs	r1, #1
 80027b0:	438a      	bics	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe ff1e 	bl	80015f4 <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027be:	f7fe ff19 	bl	80015f4 <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e202      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d0:	4b46      	ldr	r3, [pc, #280]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2202      	movs	r2, #2
 80027d6:	4013      	ands	r3, r2
 80027d8:	d1f1      	bne.n	80027be <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2208      	movs	r2, #8
 80027e0:	4013      	ands	r3, r2
 80027e2:	d036      	beq.n	8002852 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d019      	beq.n	8002820 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ec:	4b3f      	ldr	r3, [pc, #252]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 80027ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f0:	4b3e      	ldr	r3, [pc, #248]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 80027f2:	2101      	movs	r1, #1
 80027f4:	430a      	orrs	r2, r1
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f8:	f7fe fefc 	bl	80015f4 <HAL_GetTick>
 80027fc:	0003      	movs	r3, r0
 80027fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002802:	f7fe fef7 	bl	80015f4 <HAL_GetTick>
 8002806:	0002      	movs	r2, r0
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1e0      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002814:	4b35      	ldr	r3, [pc, #212]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	2202      	movs	r2, #2
 800281a:	4013      	ands	r3, r2
 800281c:	d0f1      	beq.n	8002802 <HAL_RCC_OscConfig+0x242>
 800281e:	e018      	b.n	8002852 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002820:	4b32      	ldr	r3, [pc, #200]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002824:	4b31      	ldr	r3, [pc, #196]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002826:	2101      	movs	r1, #1
 8002828:	438a      	bics	r2, r1
 800282a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282c:	f7fe fee2 	bl	80015f4 <HAL_GetTick>
 8002830:	0003      	movs	r3, r0
 8002832:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002836:	f7fe fedd 	bl	80015f4 <HAL_GetTick>
 800283a:	0002      	movs	r2, r0
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e1c6      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002848:	4b28      	ldr	r3, [pc, #160]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	2202      	movs	r2, #2
 800284e:	4013      	ands	r3, r2
 8002850:	d1f1      	bne.n	8002836 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2204      	movs	r2, #4
 8002858:	4013      	ands	r3, r2
 800285a:	d100      	bne.n	800285e <HAL_RCC_OscConfig+0x29e>
 800285c:	e0b4      	b.n	80029c8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285e:	201f      	movs	r0, #31
 8002860:	183b      	adds	r3, r7, r0
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002866:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002868:	69da      	ldr	r2, [r3, #28]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	055b      	lsls	r3, r3, #21
 800286e:	4013      	ands	r3, r2
 8002870:	d110      	bne.n	8002894 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002878:	2180      	movs	r1, #128	; 0x80
 800287a:	0549      	lsls	r1, r1, #21
 800287c:	430a      	orrs	r2, r1
 800287e:	61da      	str	r2, [r3, #28]
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 8002882:	69da      	ldr	r2, [r3, #28]
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	055b      	lsls	r3, r3, #21
 8002888:	4013      	ands	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800288e:	183b      	adds	r3, r7, r0
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <HAL_RCC_OscConfig+0x338>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4013      	ands	r3, r2
 800289e:	d11a      	bne.n	80028d6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a0:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HAL_RCC_OscConfig+0x338>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <HAL_RCC_OscConfig+0x338>)
 80028a6:	2180      	movs	r1, #128	; 0x80
 80028a8:	0049      	lsls	r1, r1, #1
 80028aa:	430a      	orrs	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ae:	f7fe fea1 	bl	80015f4 <HAL_GetTick>
 80028b2:	0003      	movs	r3, r0
 80028b4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b8:	f7fe fe9c 	bl	80015f4 <HAL_GetTick>
 80028bc:	0002      	movs	r2, r0
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e185      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ca:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_RCC_OscConfig+0x338>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4013      	ands	r3, r2
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10e      	bne.n	80028fc <HAL_RCC_OscConfig+0x33c>
 80028de:	4b03      	ldr	r3, [pc, #12]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 80028e0:	6a1a      	ldr	r2, [r3, #32]
 80028e2:	4b02      	ldr	r3, [pc, #8]	; (80028ec <HAL_RCC_OscConfig+0x32c>)
 80028e4:	2101      	movs	r1, #1
 80028e6:	430a      	orrs	r2, r1
 80028e8:	621a      	str	r2, [r3, #32]
 80028ea:	e035      	b.n	8002958 <HAL_RCC_OscConfig+0x398>
 80028ec:	40021000 	.word	0x40021000
 80028f0:	fffeffff 	.word	0xfffeffff
 80028f4:	fffbffff 	.word	0xfffbffff
 80028f8:	40007000 	.word	0x40007000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10c      	bne.n	800291e <HAL_RCC_OscConfig+0x35e>
 8002904:	4bb6      	ldr	r3, [pc, #728]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002906:	6a1a      	ldr	r2, [r3, #32]
 8002908:	4bb5      	ldr	r3, [pc, #724]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 800290a:	2101      	movs	r1, #1
 800290c:	438a      	bics	r2, r1
 800290e:	621a      	str	r2, [r3, #32]
 8002910:	4bb3      	ldr	r3, [pc, #716]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002912:	6a1a      	ldr	r2, [r3, #32]
 8002914:	4bb2      	ldr	r3, [pc, #712]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002916:	2104      	movs	r1, #4
 8002918:	438a      	bics	r2, r1
 800291a:	621a      	str	r2, [r3, #32]
 800291c:	e01c      	b.n	8002958 <HAL_RCC_OscConfig+0x398>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b05      	cmp	r3, #5
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x380>
 8002926:	4bae      	ldr	r3, [pc, #696]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002928:	6a1a      	ldr	r2, [r3, #32]
 800292a:	4bad      	ldr	r3, [pc, #692]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 800292c:	2104      	movs	r1, #4
 800292e:	430a      	orrs	r2, r1
 8002930:	621a      	str	r2, [r3, #32]
 8002932:	4bab      	ldr	r3, [pc, #684]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002934:	6a1a      	ldr	r2, [r3, #32]
 8002936:	4baa      	ldr	r3, [pc, #680]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002938:	2101      	movs	r1, #1
 800293a:	430a      	orrs	r2, r1
 800293c:	621a      	str	r2, [r3, #32]
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0x398>
 8002940:	4ba7      	ldr	r3, [pc, #668]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002942:	6a1a      	ldr	r2, [r3, #32]
 8002944:	4ba6      	ldr	r3, [pc, #664]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002946:	2101      	movs	r1, #1
 8002948:	438a      	bics	r2, r1
 800294a:	621a      	str	r2, [r3, #32]
 800294c:	4ba4      	ldr	r3, [pc, #656]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 800294e:	6a1a      	ldr	r2, [r3, #32]
 8002950:	4ba3      	ldr	r3, [pc, #652]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002952:	2104      	movs	r1, #4
 8002954:	438a      	bics	r2, r1
 8002956:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d014      	beq.n	800298a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7fe fe48 	bl	80015f4 <HAL_GetTick>
 8002964:	0003      	movs	r3, r0
 8002966:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002968:	e009      	b.n	800297e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296a:	f7fe fe43 	bl	80015f4 <HAL_GetTick>
 800296e:	0002      	movs	r2, r0
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	4a9b      	ldr	r2, [pc, #620]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e12b      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297e:	4b98      	ldr	r3, [pc, #608]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	2202      	movs	r2, #2
 8002984:	4013      	ands	r3, r2
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x3aa>
 8002988:	e013      	b.n	80029b2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298a:	f7fe fe33 	bl	80015f4 <HAL_GetTick>
 800298e:	0003      	movs	r3, r0
 8002990:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002992:	e009      	b.n	80029a8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002994:	f7fe fe2e 	bl	80015f4 <HAL_GetTick>
 8002998:	0002      	movs	r2, r0
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	4a91      	ldr	r2, [pc, #580]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e116      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a8:	4b8d      	ldr	r3, [pc, #564]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	2202      	movs	r2, #2
 80029ae:	4013      	ands	r3, r2
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029b2:	231f      	movs	r3, #31
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029bc:	4b88      	ldr	r3, [pc, #544]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	4b87      	ldr	r3, [pc, #540]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 80029c2:	4989      	ldr	r1, [pc, #548]	; (8002be8 <HAL_RCC_OscConfig+0x628>)
 80029c4:	400a      	ands	r2, r1
 80029c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2210      	movs	r2, #16
 80029ce:	4013      	ands	r3, r2
 80029d0:	d063      	beq.n	8002a9a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d12a      	bne.n	8002a30 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029da:	4b81      	ldr	r3, [pc, #516]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 80029dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029de:	4b80      	ldr	r3, [pc, #512]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 80029e0:	2104      	movs	r1, #4
 80029e2:	430a      	orrs	r2, r1
 80029e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80029e6:	4b7e      	ldr	r3, [pc, #504]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 80029e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ea:	4b7d      	ldr	r3, [pc, #500]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 80029ec:	2101      	movs	r1, #1
 80029ee:	430a      	orrs	r2, r1
 80029f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f2:	f7fe fdff 	bl	80015f4 <HAL_GetTick>
 80029f6:	0003      	movs	r3, r0
 80029f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029fc:	f7fe fdfa 	bl	80015f4 <HAL_GetTick>
 8002a00:	0002      	movs	r2, r0
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e0e3      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a0e:	4b74      	ldr	r3, [pc, #464]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a12:	2202      	movs	r2, #2
 8002a14:	4013      	ands	r3, r2
 8002a16:	d0f1      	beq.n	80029fc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a18:	4b71      	ldr	r3, [pc, #452]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1c:	22f8      	movs	r2, #248	; 0xf8
 8002a1e:	4393      	bics	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	00da      	lsls	r2, r3, #3
 8002a28:	4b6d      	ldr	r3, [pc, #436]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a2e:	e034      	b.n	8002a9a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	3305      	adds	r3, #5
 8002a36:	d111      	bne.n	8002a5c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a38:	4b69      	ldr	r3, [pc, #420]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a3c:	4b68      	ldr	r3, [pc, #416]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002a3e:	2104      	movs	r1, #4
 8002a40:	438a      	bics	r2, r1
 8002a42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a44:	4b66      	ldr	r3, [pc, #408]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a48:	22f8      	movs	r2, #248	; 0xf8
 8002a4a:	4393      	bics	r3, r2
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	00da      	lsls	r2, r3, #3
 8002a54:	4b62      	ldr	r3, [pc, #392]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002a56:	430a      	orrs	r2, r1
 8002a58:	635a      	str	r2, [r3, #52]	; 0x34
 8002a5a:	e01e      	b.n	8002a9a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a5c:	4b60      	ldr	r3, [pc, #384]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a60:	4b5f      	ldr	r3, [pc, #380]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002a62:	2104      	movs	r1, #4
 8002a64:	430a      	orrs	r2, r1
 8002a66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002a68:	4b5d      	ldr	r3, [pc, #372]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a6c:	4b5c      	ldr	r3, [pc, #368]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002a6e:	2101      	movs	r1, #1
 8002a70:	438a      	bics	r2, r1
 8002a72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a74:	f7fe fdbe 	bl	80015f4 <HAL_GetTick>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a7e:	f7fe fdb9 	bl	80015f4 <HAL_GetTick>
 8002a82:	0002      	movs	r2, r0
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e0a2      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a90:	4b53      	ldr	r3, [pc, #332]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a94:	2202      	movs	r2, #2
 8002a96:	4013      	ands	r3, r2
 8002a98:	d1f1      	bne.n	8002a7e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d100      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4e4>
 8002aa2:	e097      	b.n	8002bd4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa4:	4b4e      	ldr	r3, [pc, #312]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	220c      	movs	r2, #12
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d100      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x4f2>
 8002ab0:	e06b      	b.n	8002b8a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d14c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aba:	4b49      	ldr	r3, [pc, #292]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4b48      	ldr	r3, [pc, #288]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002ac0:	494a      	ldr	r1, [pc, #296]	; (8002bec <HAL_RCC_OscConfig+0x62c>)
 8002ac2:	400a      	ands	r2, r1
 8002ac4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fd95 	bl	80015f4 <HAL_GetTick>
 8002aca:	0003      	movs	r3, r0
 8002acc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe fd90 	bl	80015f4 <HAL_GetTick>
 8002ad4:	0002      	movs	r2, r0
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e079      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae2:	4b3f      	ldr	r3, [pc, #252]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	2380      	movs	r3, #128	; 0x80
 8002ae8:	049b      	lsls	r3, r3, #18
 8002aea:	4013      	ands	r3, r2
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aee:	4b3c      	ldr	r3, [pc, #240]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	220f      	movs	r2, #15
 8002af4:	4393      	bics	r3, r2
 8002af6:	0019      	movs	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afc:	4b38      	ldr	r3, [pc, #224]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002afe:	430a      	orrs	r2, r1
 8002b00:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b02:	4b37      	ldr	r3, [pc, #220]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4a3a      	ldr	r2, [pc, #232]	; (8002bf0 <HAL_RCC_OscConfig+0x630>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	431a      	orrs	r2, r3
 8002b16:	4b32      	ldr	r3, [pc, #200]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1c:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b2f      	ldr	r3, [pc, #188]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002b22:	2180      	movs	r1, #128	; 0x80
 8002b24:	0449      	lsls	r1, r1, #17
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2a:	f7fe fd63 	bl	80015f4 <HAL_GetTick>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe fd5e 	bl	80015f4 <HAL_GetTick>
 8002b38:	0002      	movs	r2, r0
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e047      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	049b      	lsls	r3, r3, #18
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x574>
 8002b52:	e03f      	b.n	8002bd4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b54:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002b5a:	4924      	ldr	r1, [pc, #144]	; (8002bec <HAL_RCC_OscConfig+0x62c>)
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fe fd48 	bl	80015f4 <HAL_GetTick>
 8002b64:	0003      	movs	r3, r0
 8002b66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe fd43 	bl	80015f4 <HAL_GetTick>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e02c      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7c:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	049b      	lsls	r3, r3, #18
 8002b84:	4013      	ands	r3, r2
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_OscConfig+0x5aa>
 8002b88:	e024      	b.n	8002bd4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e01f      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b96:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b9c:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <HAL_RCC_OscConfig+0x620>)
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	025b      	lsls	r3, r3, #9
 8002ba8:	401a      	ands	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	220f      	movs	r2, #15
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d107      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	23f0      	movs	r3, #240	; 0xf0
 8002bc4:	039b      	lsls	r3, r3, #14
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b008      	add	sp, #32
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	40021000 	.word	0x40021000
 8002be4:	00001388 	.word	0x00001388
 8002be8:	efffffff 	.word	0xefffffff
 8002bec:	feffffff 	.word	0xfeffffff
 8002bf0:	ffc2ffff 	.word	0xffc2ffff

08002bf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0b3      	b.n	8002d70 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c08:	4b5b      	ldr	r3, [pc, #364]	; (8002d78 <HAL_RCC_ClockConfig+0x184>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	4013      	ands	r3, r2
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d911      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b58      	ldr	r3, [pc, #352]	; (8002d78 <HAL_RCC_ClockConfig+0x184>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	4393      	bics	r3, r2
 8002c1e:	0019      	movs	r1, r3
 8002c20:	4b55      	ldr	r3, [pc, #340]	; (8002d78 <HAL_RCC_ClockConfig+0x184>)
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c28:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <HAL_RCC_ClockConfig+0x184>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d001      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e09a      	b.n	8002d70 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	4013      	ands	r3, r2
 8002c42:	d015      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2204      	movs	r2, #4
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d006      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c4e:	4b4b      	ldr	r3, [pc, #300]	; (8002d7c <HAL_RCC_ClockConfig+0x188>)
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <HAL_RCC_ClockConfig+0x188>)
 8002c54:	21e0      	movs	r1, #224	; 0xe0
 8002c56:	00c9      	lsls	r1, r1, #3
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c5c:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <HAL_RCC_ClockConfig+0x188>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	22f0      	movs	r2, #240	; 0xf0
 8002c62:	4393      	bics	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	4b44      	ldr	r3, [pc, #272]	; (8002d7c <HAL_RCC_ClockConfig+0x188>)
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2201      	movs	r2, #1
 8002c76:	4013      	ands	r3, r2
 8002c78:	d040      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b3e      	ldr	r3, [pc, #248]	; (8002d7c <HAL_RCC_ClockConfig+0x188>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	029b      	lsls	r3, r3, #10
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d114      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e06e      	b.n	8002d70 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d107      	bne.n	8002caa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9a:	4b38      	ldr	r3, [pc, #224]	; (8002d7c <HAL_RCC_ClockConfig+0x188>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	049b      	lsls	r3, r3, #18
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d108      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e062      	b.n	8002d70 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002caa:	4b34      	ldr	r3, [pc, #208]	; (8002d7c <HAL_RCC_ClockConfig+0x188>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e05b      	b.n	8002d70 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb8:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <HAL_RCC_ClockConfig+0x188>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	4393      	bics	r3, r2
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <HAL_RCC_ClockConfig+0x188>)
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ccc:	f7fe fc92 	bl	80015f4 <HAL_GetTick>
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd4:	e009      	b.n	8002cea <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd6:	f7fe fc8d 	bl	80015f4 <HAL_GetTick>
 8002cda:	0002      	movs	r2, r0
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	4a27      	ldr	r2, [pc, #156]	; (8002d80 <HAL_RCC_ClockConfig+0x18c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e042      	b.n	8002d70 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <HAL_RCC_ClockConfig+0x188>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	220c      	movs	r2, #12
 8002cf0:	401a      	ands	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d1ec      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cfc:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <HAL_RCC_ClockConfig+0x184>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2201      	movs	r2, #1
 8002d02:	4013      	ands	r3, r2
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d211      	bcs.n	8002d2e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0a:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_RCC_ClockConfig+0x184>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4393      	bics	r3, r2
 8002d12:	0019      	movs	r1, r3
 8002d14:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <HAL_RCC_ClockConfig+0x184>)
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1c:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <HAL_RCC_ClockConfig+0x184>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2201      	movs	r2, #1
 8002d22:	4013      	ands	r3, r2
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d001      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e020      	b.n	8002d70 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2204      	movs	r2, #4
 8002d34:	4013      	ands	r3, r2
 8002d36:	d009      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d38:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <HAL_RCC_ClockConfig+0x188>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a11      	ldr	r2, [pc, #68]	; (8002d84 <HAL_RCC_ClockConfig+0x190>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	0019      	movs	r1, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <HAL_RCC_ClockConfig+0x188>)
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d4c:	f000 f820 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8002d50:	0001      	movs	r1, r0
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <HAL_RCC_ClockConfig+0x188>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	091b      	lsrs	r3, r3, #4
 8002d58:	220f      	movs	r2, #15
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <HAL_RCC_ClockConfig+0x194>)
 8002d5e:	5cd3      	ldrb	r3, [r2, r3]
 8002d60:	000a      	movs	r2, r1
 8002d62:	40da      	lsrs	r2, r3
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <HAL_RCC_ClockConfig+0x198>)
 8002d66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d68:	2003      	movs	r0, #3
 8002d6a:	f7fe fbfd 	bl	8001568 <HAL_InitTick>
  
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b004      	add	sp, #16
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40022000 	.word	0x40022000
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	00001388 	.word	0x00001388
 8002d84:	fffff8ff 	.word	0xfffff8ff
 8002d88:	08003458 	.word	0x08003458
 8002d8c:	20000000 	.word	0x20000000

08002d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	2300      	movs	r3, #0
 8002da4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002daa:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	220c      	movs	r2, #12
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d002      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x30>
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d003      	beq.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x36>
 8002dbe:	e02c      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002dc2:	613b      	str	r3, [r7, #16]
      break;
 8002dc4:	e02c      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	0c9b      	lsrs	r3, r3, #18
 8002dca:	220f      	movs	r2, #15
 8002dcc:	4013      	ands	r3, r2
 8002dce:	4a19      	ldr	r2, [pc, #100]	; (8002e34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dd0:	5cd3      	ldrb	r3, [r2, r3]
 8002dd2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	220f      	movs	r2, #15
 8002dda:	4013      	ands	r3, r2
 8002ddc:	4a16      	ldr	r2, [pc, #88]	; (8002e38 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002dde:	5cd3      	ldrb	r3, [r2, r3]
 8002de0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	025b      	lsls	r3, r3, #9
 8002de8:	4013      	ands	r3, r2
 8002dea:	d009      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	4810      	ldr	r0, [pc, #64]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002df0:	f7fd f98a 	bl	8000108 <__udivsi3>
 8002df4:	0003      	movs	r3, r0
 8002df6:	001a      	movs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4353      	muls	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e009      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	000a      	movs	r2, r1
 8002e04:	0152      	lsls	r2, r2, #5
 8002e06:	1a52      	subs	r2, r2, r1
 8002e08:	0193      	lsls	r3, r2, #6
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	185b      	adds	r3, r3, r1
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	613b      	str	r3, [r7, #16]
      break;
 8002e18:	e002      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e1c:	613b      	str	r3, [r7, #16]
      break;
 8002e1e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e20:	693b      	ldr	r3, [r7, #16]
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b006      	add	sp, #24
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	007a1200 	.word	0x007a1200
 8002e34:	08003468 	.word	0x08003468
 8002e38:	08003478 	.word	0x08003478

08002e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e042      	b.n	8002ed4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	223d      	movs	r2, #61	; 0x3d
 8002e52:	5c9b      	ldrb	r3, [r3, r2]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d107      	bne.n	8002e6a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	223c      	movs	r2, #60	; 0x3c
 8002e5e:	2100      	movs	r1, #0
 8002e60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	0018      	movs	r0, r3
 8002e66:	f7fe fa59 	bl	800131c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	223d      	movs	r2, #61	; 0x3d
 8002e6e:	2102      	movs	r1, #2
 8002e70:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	0010      	movs	r0, r2
 8002e7e:	f000 f947 	bl	8003110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2246      	movs	r2, #70	; 0x46
 8002e86:	2101      	movs	r1, #1
 8002e88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	223e      	movs	r2, #62	; 0x3e
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	223f      	movs	r2, #63	; 0x3f
 8002e96:	2101      	movs	r1, #1
 8002e98:	5499      	strb	r1, [r3, r2]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2240      	movs	r2, #64	; 0x40
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	5499      	strb	r1, [r3, r2]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2241      	movs	r2, #65	; 0x41
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2242      	movs	r2, #66	; 0x42
 8002eae:	2101      	movs	r1, #1
 8002eb0:	5499      	strb	r1, [r3, r2]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2243      	movs	r2, #67	; 0x43
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	5499      	strb	r1, [r3, r2]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2244      	movs	r2, #68	; 0x44
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	5499      	strb	r1, [r3, r2]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2245      	movs	r2, #69	; 0x45
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	223d      	movs	r2, #61	; 0x3d
 8002ece:	2101      	movs	r1, #1
 8002ed0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b002      	add	sp, #8
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	223d      	movs	r2, #61	; 0x3d
 8002ee8:	5c9b      	ldrb	r3, [r3, r2]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d001      	beq.n	8002ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e030      	b.n	8002f56 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	223d      	movs	r2, #61	; 0x3d
 8002ef8:	2102      	movs	r1, #2
 8002efa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2101      	movs	r1, #1
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a13      	ldr	r2, [pc, #76]	; (8002f60 <HAL_TIM_Base_Start_IT+0x84>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <HAL_TIM_Base_Start_IT+0x44>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <HAL_TIM_Base_Start_IT+0x88>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d111      	bne.n	8002f44 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2207      	movs	r2, #7
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d010      	beq.n	8002f54 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f42:	e007      	b.n	8002f54 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2101      	movs	r1, #1
 8002f50:	430a      	orrs	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	0018      	movs	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b004      	add	sp, #16
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40000400 	.word	0x40000400

08002f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f72:	230f      	movs	r3, #15
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	223c      	movs	r2, #60	; 0x3c
 8002f7e:	5c9b      	ldrb	r3, [r3, r2]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_TIM_ConfigClockSource+0x20>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e0bc      	b.n	8003102 <HAL_TIM_ConfigClockSource+0x19a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	223c      	movs	r2, #60	; 0x3c
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	223d      	movs	r2, #61	; 0x3d
 8002f94:	2102      	movs	r1, #2
 8002f96:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2277      	movs	r2, #119	; 0x77
 8002fa4:	4393      	bics	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4a58      	ldr	r2, [pc, #352]	; (800310c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2280      	movs	r2, #128	; 0x80
 8002fbe:	0192      	lsls	r2, r2, #6
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d040      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0xde>
 8002fc4:	2280      	movs	r2, #128	; 0x80
 8002fc6:	0192      	lsls	r2, r2, #6
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d900      	bls.n	8002fce <HAL_TIM_ConfigClockSource+0x66>
 8002fcc:	e088      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x178>
 8002fce:	2280      	movs	r2, #128	; 0x80
 8002fd0:	0152      	lsls	r2, r2, #5
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d100      	bne.n	8002fd8 <HAL_TIM_ConfigClockSource+0x70>
 8002fd6:	e088      	b.n	80030ea <HAL_TIM_ConfigClockSource+0x182>
 8002fd8:	2280      	movs	r2, #128	; 0x80
 8002fda:	0152      	lsls	r2, r2, #5
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d900      	bls.n	8002fe2 <HAL_TIM_ConfigClockSource+0x7a>
 8002fe0:	e07e      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x178>
 8002fe2:	2b70      	cmp	r3, #112	; 0x70
 8002fe4:	d018      	beq.n	8003018 <HAL_TIM_ConfigClockSource+0xb0>
 8002fe6:	d900      	bls.n	8002fea <HAL_TIM_ConfigClockSource+0x82>
 8002fe8:	e07a      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x178>
 8002fea:	2b60      	cmp	r3, #96	; 0x60
 8002fec:	d04f      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x126>
 8002fee:	d900      	bls.n	8002ff2 <HAL_TIM_ConfigClockSource+0x8a>
 8002ff0:	e076      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x178>
 8002ff2:	2b50      	cmp	r3, #80	; 0x50
 8002ff4:	d03b      	beq.n	800306e <HAL_TIM_ConfigClockSource+0x106>
 8002ff6:	d900      	bls.n	8002ffa <HAL_TIM_ConfigClockSource+0x92>
 8002ff8:	e072      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x178>
 8002ffa:	2b40      	cmp	r3, #64	; 0x40
 8002ffc:	d057      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x146>
 8002ffe:	d900      	bls.n	8003002 <HAL_TIM_ConfigClockSource+0x9a>
 8003000:	e06e      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x178>
 8003002:	2b30      	cmp	r3, #48	; 0x30
 8003004:	d063      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0x166>
 8003006:	d86b      	bhi.n	80030e0 <HAL_TIM_ConfigClockSource+0x178>
 8003008:	2b20      	cmp	r3, #32
 800300a:	d060      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0x166>
 800300c:	d868      	bhi.n	80030e0 <HAL_TIM_ConfigClockSource+0x178>
 800300e:	2b00      	cmp	r3, #0
 8003010:	d05d      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0x166>
 8003012:	2b10      	cmp	r3, #16
 8003014:	d05b      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0x166>
 8003016:	e063      	b.n	80030e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003028:	f000 f966 	bl	80032f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2277      	movs	r2, #119	; 0x77
 8003038:	4313      	orrs	r3, r2
 800303a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	609a      	str	r2, [r3, #8]
      break;
 8003044:	e052      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003056:	f000 f94f 	bl	80032f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2180      	movs	r1, #128	; 0x80
 8003066:	01c9      	lsls	r1, r1, #7
 8003068:	430a      	orrs	r2, r1
 800306a:	609a      	str	r2, [r3, #8]
      break;
 800306c:	e03e      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800307a:	001a      	movs	r2, r3
 800307c:	f000 f8c2 	bl	8003204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2150      	movs	r1, #80	; 0x50
 8003086:	0018      	movs	r0, r3
 8003088:	f000 f91c 	bl	80032c4 <TIM_ITRx_SetConfig>
      break;
 800308c:	e02e      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800309a:	001a      	movs	r2, r3
 800309c:	f000 f8e0 	bl	8003260 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2160      	movs	r1, #96	; 0x60
 80030a6:	0018      	movs	r0, r3
 80030a8:	f000 f90c 	bl	80032c4 <TIM_ITRx_SetConfig>
      break;
 80030ac:	e01e      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ba:	001a      	movs	r2, r3
 80030bc:	f000 f8a2 	bl	8003204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2140      	movs	r1, #64	; 0x40
 80030c6:	0018      	movs	r0, r3
 80030c8:	f000 f8fc 	bl	80032c4 <TIM_ITRx_SetConfig>
      break;
 80030cc:	e00e      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	0019      	movs	r1, r3
 80030d8:	0010      	movs	r0, r2
 80030da:	f000 f8f3 	bl	80032c4 <TIM_ITRx_SetConfig>
      break;
 80030de:	e005      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80030e0:	230f      	movs	r3, #15
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
      break;
 80030e8:	e000      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x184>
      break;
 80030ea:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	223d      	movs	r2, #61	; 0x3d
 80030f0:	2101      	movs	r1, #1
 80030f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	223c      	movs	r2, #60	; 0x3c
 80030f8:	2100      	movs	r1, #0
 80030fa:	5499      	strb	r1, [r3, r2]

  return status;
 80030fc:	230f      	movs	r3, #15
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	781b      	ldrb	r3, [r3, #0]
}
 8003102:	0018      	movs	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	b004      	add	sp, #16
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	ffff00ff 	.word	0xffff00ff

08003110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a32      	ldr	r2, [pc, #200]	; (80031ec <TIM_Base_SetConfig+0xdc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_Base_SetConfig+0x20>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a31      	ldr	r2, [pc, #196]	; (80031f0 <TIM_Base_SetConfig+0xe0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d108      	bne.n	8003142 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2270      	movs	r2, #112	; 0x70
 8003134:	4393      	bics	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a29      	ldr	r2, [pc, #164]	; (80031ec <TIM_Base_SetConfig+0xdc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00f      	beq.n	800316a <TIM_Base_SetConfig+0x5a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a28      	ldr	r2, [pc, #160]	; (80031f0 <TIM_Base_SetConfig+0xe0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00b      	beq.n	800316a <TIM_Base_SetConfig+0x5a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a27      	ldr	r2, [pc, #156]	; (80031f4 <TIM_Base_SetConfig+0xe4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <TIM_Base_SetConfig+0x5a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <TIM_Base_SetConfig+0xe8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d003      	beq.n	800316a <TIM_Base_SetConfig+0x5a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a25      	ldr	r2, [pc, #148]	; (80031fc <TIM_Base_SetConfig+0xec>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d108      	bne.n	800317c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a24      	ldr	r2, [pc, #144]	; (8003200 <TIM_Base_SetConfig+0xf0>)
 800316e:	4013      	ands	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2280      	movs	r2, #128	; 0x80
 8003180:	4393      	bics	r3, r2
 8003182:	001a      	movs	r2, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a11      	ldr	r2, [pc, #68]	; (80031ec <TIM_Base_SetConfig+0xdc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <TIM_Base_SetConfig+0xaa>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <TIM_Base_SetConfig+0xe8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d003      	beq.n	80031ba <TIM_Base_SetConfig+0xaa>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a11      	ldr	r2, [pc, #68]	; (80031fc <TIM_Base_SetConfig+0xec>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d103      	bne.n	80031c2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2201      	movs	r2, #1
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d106      	bne.n	80031e2 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	2201      	movs	r2, #1
 80031da:	4393      	bics	r3, r2
 80031dc:	001a      	movs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	611a      	str	r2, [r3, #16]
  }
}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b004      	add	sp, #16
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	40012c00 	.word	0x40012c00
 80031f0:	40000400 	.word	0x40000400
 80031f4:	40002000 	.word	0x40002000
 80031f8:	40014400 	.word	0x40014400
 80031fc:	40014800 	.word	0x40014800
 8003200:	fffffcff 	.word	0xfffffcff

08003204 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	2201      	movs	r2, #1
 800321c:	4393      	bics	r3, r2
 800321e:	001a      	movs	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	22f0      	movs	r2, #240	; 0xf0
 800322e:	4393      	bics	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	220a      	movs	r2, #10
 8003240:	4393      	bics	r3, r2
 8003242:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	621a      	str	r2, [r3, #32]
}
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	b006      	add	sp, #24
 800325e:	bd80      	pop	{r7, pc}

08003260 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	2210      	movs	r2, #16
 8003278:	4393      	bics	r3, r2
 800327a:	001a      	movs	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4a0d      	ldr	r2, [pc, #52]	; (80032c0 <TIM_TI2_ConfigInputStage+0x60>)
 800328a:	4013      	ands	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	031b      	lsls	r3, r3, #12
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	22a0      	movs	r2, #160	; 0xa0
 800329c:	4393      	bics	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	621a      	str	r2, [r3, #32]
}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b006      	add	sp, #24
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	ffff0fff 	.word	0xffff0fff

080032c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2270      	movs	r2, #112	; 0x70
 80032d8:	4393      	bics	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	2207      	movs	r2, #7
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	609a      	str	r2, [r3, #8]
}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b004      	add	sp, #16
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	4a09      	ldr	r2, [pc, #36]	; (8003334 <TIM_ETR_SetConfig+0x3c>)
 8003310:	4013      	ands	r3, r2
 8003312:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	021a      	lsls	r2, r3, #8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	431a      	orrs	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4313      	orrs	r3, r2
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	609a      	str	r2, [r3, #8]
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	b006      	add	sp, #24
 8003332:	bd80      	pop	{r7, pc}
 8003334:	ffff00ff 	.word	0xffff00ff

08003338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	223c      	movs	r2, #60	; 0x3c
 8003346:	5c9b      	ldrb	r3, [r3, r2]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800334c:	2302      	movs	r3, #2
 800334e:	e03c      	b.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	223c      	movs	r2, #60	; 0x3c
 8003354:	2101      	movs	r1, #1
 8003356:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	223d      	movs	r2, #61	; 0x3d
 800335c:	2102      	movs	r1, #2
 800335e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2270      	movs	r2, #112	; 0x70
 8003374:	4393      	bics	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0f      	ldr	r2, [pc, #60]	; (80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d10c      	bne.n	80033b8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2280      	movs	r2, #128	; 0x80
 80033a2:	4393      	bics	r3, r2
 80033a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	223d      	movs	r2, #61	; 0x3d
 80033bc:	2101      	movs	r1, #1
 80033be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	223c      	movs	r2, #60	; 0x3c
 80033c4:	2100      	movs	r1, #0
 80033c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b004      	add	sp, #16
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	40012c00 	.word	0x40012c00
 80033d8:	40000400 	.word	0x40000400

080033dc <memset>:
 80033dc:	0003      	movs	r3, r0
 80033de:	1882      	adds	r2, r0, r2
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d100      	bne.n	80033e6 <memset+0xa>
 80033e4:	4770      	bx	lr
 80033e6:	7019      	strb	r1, [r3, #0]
 80033e8:	3301      	adds	r3, #1
 80033ea:	e7f9      	b.n	80033e0 <memset+0x4>

080033ec <__libc_init_array>:
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	2600      	movs	r6, #0
 80033f0:	4c0c      	ldr	r4, [pc, #48]	; (8003424 <__libc_init_array+0x38>)
 80033f2:	4d0d      	ldr	r5, [pc, #52]	; (8003428 <__libc_init_array+0x3c>)
 80033f4:	1b64      	subs	r4, r4, r5
 80033f6:	10a4      	asrs	r4, r4, #2
 80033f8:	42a6      	cmp	r6, r4
 80033fa:	d109      	bne.n	8003410 <__libc_init_array+0x24>
 80033fc:	2600      	movs	r6, #0
 80033fe:	f000 f819 	bl	8003434 <_init>
 8003402:	4c0a      	ldr	r4, [pc, #40]	; (800342c <__libc_init_array+0x40>)
 8003404:	4d0a      	ldr	r5, [pc, #40]	; (8003430 <__libc_init_array+0x44>)
 8003406:	1b64      	subs	r4, r4, r5
 8003408:	10a4      	asrs	r4, r4, #2
 800340a:	42a6      	cmp	r6, r4
 800340c:	d105      	bne.n	800341a <__libc_init_array+0x2e>
 800340e:	bd70      	pop	{r4, r5, r6, pc}
 8003410:	00b3      	lsls	r3, r6, #2
 8003412:	58eb      	ldr	r3, [r5, r3]
 8003414:	4798      	blx	r3
 8003416:	3601      	adds	r6, #1
 8003418:	e7ee      	b.n	80033f8 <__libc_init_array+0xc>
 800341a:	00b3      	lsls	r3, r6, #2
 800341c:	58eb      	ldr	r3, [r5, r3]
 800341e:	4798      	blx	r3
 8003420:	3601      	adds	r6, #1
 8003422:	e7f2      	b.n	800340a <__libc_init_array+0x1e>
 8003424:	08003488 	.word	0x08003488
 8003428:	08003488 	.word	0x08003488
 800342c:	0800348c 	.word	0x0800348c
 8003430:	08003488 	.word	0x08003488

08003434 <_init>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343a:	bc08      	pop	{r3}
 800343c:	469e      	mov	lr, r3
 800343e:	4770      	bx	lr

08003440 <_fini>:
 8003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003446:	bc08      	pop	{r3}
 8003448:	469e      	mov	lr, r3
 800344a:	4770      	bx	lr
